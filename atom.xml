<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>hanqunfeng&#39;s blog</title>
  <subtitle>Spring--java程序员的春天</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://blog.hanqunfeng.com/"/>
  <updated>2018-02-26T10:09:16.788Z</updated>
  <id>http://blog.hanqunfeng.com/</id>
  
  <author>
    <name>hanqunfeng</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Protocol Buffer学习笔记</title>
    <link href="http://blog.hanqunfeng.com/2018/02/26/protocol-buffer-study/"/>
    <id>http://blog.hanqunfeng.com/2018/02/26/protocol-buffer-study/</id>
    <published>2018-02-26T08:30:05.000Z</published>
    <updated>2018-02-26T10:09:16.788Z</updated>
    
    <content type="html"><![CDATA[<h2 id="什么是Protocol-Buffer"><a href="#什么是Protocol-Buffer" class="headerlink" title="什么是Protocol Buffer"></a>什么是Protocol Buffer</h2><p>Protocol Buffers(也称protobuf)是Google公司出口的一种独立于开发语言，独立于平台的可扩展的结构化数据序列机制。通俗点来讲它跟xml和json是一类。是一种数据交互格式协议。<br>主要优点是它是基于二进制的，所以比起结构化的xml协议来说，它的体积很少，数据在传输过程中会更快。另外它也支持c++、java、python、php、javascript等主流开发语言。</p>
<a id="more"></a>
<h2 id="Protoc-3-x-x安装"><a href="#Protoc-3-x-x安装" class="headerlink" title="Protoc-3.x.x安装"></a>Protoc-3.x.x安装</h2><p><a href="https://github.com/google/protobuf/releases" target="_blank" rel="external">下载地址</a>：3.x.x的版本基本都按照操作系统和语言进行了区分，系统包里只包含了protoc命令，语言包则是用于编译后使用，比如java需要生成对应的jar包。这里可以根据需要下载对应的操作系统和语言包，比如这里我下载的是protoc-3.5.1-osx-x86_64.zip（苹果系统）和protobuf-java-3.5.1.tar.gz（java语言）。</p>
<ul>
<li>unzip protoc-3.5.1-osx-x86_64.zip</li>
<li>在/etc/profile中添加环境变量PROTOCTL_BUFFER_HOME（protoc-3.5.1-osx-x86_64.zip解压后目录），并在PATH中添加$PROTOCTL_BUFFER_HOME/bin</li>
<li>查看版本：protoc –version ：输出 libprotoc 3.5.1</li>
<li>tar -zxcf protobuf-java-3.5.1.tar.gz，解压后目录名称为protobuf-3.5.1</li>
<li>cd protobuf-3.5.1/src，创建软连接 ln -s $PROTOCTL_BUFFER_HOME/bin/protoc protoc</li>
<li>cd protobuf-3.5.1/java，mvn package（maven请自行安装），成功后会在protobuf-3.5.1/java/code/target下生成protobuf-java-3.5.1.jar</li>
<li><p>然后将protobuf-java-3.5.1.jar上传到maven私服或者安装到本地仓库就可以使用了</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">mvn install:install-file -Dfile=protobuf-java-3.5.1.jar -DgroupId=com.google.protobuf -DartifactId=protobuf-java -Dversion=3.5.1 -Dpackaging=jar</div></pre></td></tr></table></figure>
</li>
<li><p>pom中添加依赖</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!-- protocol buffer --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.google.protobuf<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>protobuf-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.5.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div></pre></td></tr></table></figure>
</li>
</ul>
<h2 id="Protoc-2-x-x安装"><a href="#Protoc-2-x-x安装" class="headerlink" title="Protoc-2.x.x安装"></a>Protoc-2.x.x安装</h2><p><a href="http://repo1.maven.org/maven2/com/google/protobuf/protoc/" target="_blank" rel="external">下载地址</a>：这里只是操作系统包，比如这里我下载的是protoc-2.6.1-osx-x86_64.exe，<a href="https://github.com/google/protobuf/releases/tag/v2.6.1" target="_blank" rel="external">语言包protobuf-2.6.1.tar.gz</a>。</p>
<ul>
<li>mv protoc-2.6.1-osx-x86_64.exe protoc</li>
<li>将上面重命名后的protoc文件所在目录加到系统环境变量PATH中</li>
<li>查看版本：protoc –version ：输出 libprotoc 2.6.1</li>
<li>tar -zxcf protobuf-2.6.1.tar.gz，解压后目录名称为protobuf-2.6.1</li>
<li>cd protobuf-2.6.1/src，创建软连接 ln -s $PROTOCTL_BUFFER_HOME/bin/protoc protoc</li>
<li>cd protobuf-2.6.1/java，mvn package（maven请自行安装），成功后会在protobuf-2.6.1/java/target下生成protobuf-java-2.6.1.jar</li>
<li><p>然后将protobuf-java-2.6.1.jar上传到maven私服或者安装到本地仓库就可以使用了</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">mvn install:install-file -Dfile=protobuf-java-2.6.1.jar -DgroupId=com.google.protobuf -DartifactId=protobuf-java -Dversion=2.6.1 -Dpackaging=jar</div></pre></td></tr></table></figure>
</li>
<li><p>pom中添加依赖</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!-- protocol buffer --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.google.protobuf<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>protobuf-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.6.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div></pre></td></tr></table></figure>
</li>
</ul>
<h2 id="protoc使用"><a href="#protoc使用" class="headerlink" title="protoc使用"></a>protoc使用</h2><ul>
<li>先编写proto文件，具体语法请参考<a href="http://blog.csdn.net/briblue/article/details/53187780" target="_blank" rel="external">通信协议之Protocol buffer(Java篇)</a></li>
<li>protoc –java_out=.  XXXX.proto</li>
</ul>
<h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ul>
<li><a href="http://blog.csdn.net/fangzhangsc2006/article/details/8687415" target="_blank" rel="external">springMVC项目中实现Protocol Buffers对象自动转换</a></li>
<li><a href="http://blog.csdn.net/zhuyijian135757/article/details/52294745" target="_blank" rel="external">protobuf实现js与java间的http通信</a></li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;什么是Protocol-Buffer&quot;&gt;&lt;a href=&quot;#什么是Protocol-Buffer&quot; class=&quot;headerlink&quot; title=&quot;什么是Protocol Buffer&quot;&gt;&lt;/a&gt;什么是Protocol Buffer&lt;/h2&gt;&lt;p&gt;Protocol Buffers(也称protobuf)是Google公司出口的一种独立于开发语言，独立于平台的可扩展的结构化数据序列机制。通俗点来讲它跟xml和json是一类。是一种数据交互格式协议。&lt;br&gt;主要优点是它是基于二进制的，所以比起结构化的xml协议来说，它的体积很少，数据在传输过程中会更快。另外它也支持c++、java、python、php、javascript等主流开发语言。&lt;/p&gt;
    
    </summary>
    
      <category term="技术" scheme="http://blog.hanqunfeng.com/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="protocbuf" scheme="http://blog.hanqunfeng.com/tags/protocbuf/"/>
    
  </entry>
  
  <entry>
    <title>钉钉与企业微信之OA产品分析</title>
    <link href="http://blog.hanqunfeng.com/2017/08/08/dingtalk-weixin-oa/"/>
    <id>http://blog.hanqunfeng.com/2017/08/08/dingtalk-weixin-oa/</id>
    <published>2017-08-08T02:24:04.000Z</published>
    <updated>2017-08-09T06:17:11.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="网站"><a href="#网站" class="headerlink" title="网站"></a>网站</h2><ul>
<li><a href="https://www.dingtalk.com" target="_blank" rel="external">钉钉</a></li>
<li><a href="https://work.weixin.qq.com" target="_blank" rel="external">企业微信</a></li>
</ul>
<h2 id="结论"><a href="#结论" class="headerlink" title="结论"></a>结论</h2><ul>
<li>钉钉自身就实现了OA中的绝大部分功能，且流程配置更加灵活，目前我们用到的只有CRM需要依赖于第三方的销帮帮。</li>
<li>销帮帮不支持区间设置，但只有合同审批会受此影响（目前正在和对方沟通希望其能进行升级）。</li>
<li>微信自身提供的功能和第三方应用都不如钉钉的多。</li>
<li>从功能、使用方式、价格和技术支持等多个维度对比，钉钉更有优势。</li>
</ul>
<h2 id="平台对比"><a href="#平台对比" class="headerlink" title="平台对比"></a>平台对比</h2><table>
<thead>
<tr>
<th style="text-align:left">功能</th>
<th style="text-align:center">钉钉</th>
<th style="text-align:center">企业微信</th>
<th style="text-align:left">说明</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">web端</td>
<td style="text-align:center">支持</td>
<td style="text-align:center">支持</td>
<td style="text-align:left"></td>
</tr>
<tr>
<td style="text-align:left">手机客户端</td>
<td style="text-align:center">支持</td>
<td style="text-align:center">支持</td>
<td style="text-align:left"></td>
</tr>
<tr>
<td style="text-align:left">PC客户端</td>
<td style="text-align:center">支持</td>
<td style="text-align:center">支持</td>
<td style="text-align:left">钉钉：除第三方功能（销帮帮CRM）外，都可以在客户端上完成，第三方功能会跳转到web端。<br>企业微信：部分内置审批功能都需要跳转到web端，第三方（企微云）支持客户端直接发起申请很审批。</td>
</tr>
<tr>
<td style="text-align:left">微信插件</td>
<td style="text-align:center">无</td>
<td style="text-align:center">有</td>
<td style="text-align:left">使用微信插件可以不安装企业微信客户端，只使用微信就可以。</td>
</tr>
<tr>
<td style="text-align:left">自定义表单</td>
<td style="text-align:center">支持</td>
<td style="text-align:center">支持</td>
<td style="text-align:left"></td>
</tr>
<tr>
<td style="text-align:left">自定义流程</td>
<td style="text-align:center">支持</td>
<td style="text-align:center">支持</td>
<td style="text-align:left">企业微信：分支流程不支持区间设置，所以不能实现超过2个分支的情况，比如按请假天数走不同的审批流：小于3天，大于等于3天且小于10天，大于等于10天。企微云mac系统支持不好。销帮帮不支持区间设置。</td>
</tr>
<tr>
<td style="text-align:left">自定义工作台布局</td>
<td style="text-align:center">支持</td>
<td style="text-align:center">不支持</td>
<td style="text-align:left"></td>
</tr>
<tr>
<td style="text-align:left">使用方式</td>
<td style="text-align:center">多公司</td>
<td style="text-align:center">单公司</td>
<td style="text-align:left">钉钉：登录后可同时接收多家公司的消息，在工作台中对某个公司进行切换。<br>企业微信：登录时选择公司，只接收登录公司的信息</td>
</tr>
</tbody>
</table>
<a id="more"></a>
<h2 id="OA功能对比"><a href="#OA功能对比" class="headerlink" title="OA功能对比"></a>OA功能对比</h2><table>
<thead>
<tr>
<th style="text-align:left">功能</th>
<th style="text-align:center">钉钉</th>
<th style="text-align:center">企业微信</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">出勤休假–考勤打卡（签到）</td>
<td style="text-align:center">有</td>
<td style="text-align:center">有</td>
<td>企微云平台 - 移动办公</td>
</tr>
<tr>
<td style="text-align:left">出勤休假–请假</td>
<td style="text-align:center">有</td>
<td style="text-align:center">有</td>
<td>适用于请假申请，精确扣减出勤时间，并同步考勤报表</td>
</tr>
<tr>
<td style="text-align:left">出勤休假–出差</td>
<td style="text-align:center">有</td>
<td style="text-align:center">有</td>
<td>适用于出差申请，精确汇总至考勤报表</td>
</tr>
<tr>
<td style="text-align:left">出勤休假–外出</td>
<td style="text-align:center">有</td>
<td style="text-align:center">有</td>
<td>适用于外出申请，精确汇总至考勤报表</td>
</tr>
<tr>
<td style="text-align:left">出勤休假–加班</td>
<td style="text-align:center">有</td>
<td style="text-align:center">有</td>
<td>适用于加班申请，精确汇总至考勤报表</td>
</tr>
<tr>
<td style="text-align:left">出勤休假–补卡</td>
<td style="text-align:center">有</td>
<td style="text-align:center">有（企微云）</td>
<td>当员工考勤出现缺卡时，可发起补卡审批，审批通过后考勤报表中的缺卡记录改为正常</td>
</tr>
<tr>
<td style="text-align:left">人事–转正</td>
<td style="text-align:center">有</td>
<td style="text-align:center">无（可以创建）</td>
<td>用于试用期内员工的员工转正申请</td>
</tr>
<tr>
<td style="text-align:left">人事–招聘</td>
<td style="text-align:center">有</td>
<td style="text-align:center">无（可以创建）</td>
<td>用于用人部门需求申请</td>
</tr>
<tr>
<td style="text-align:left">人事–调岗申请单</td>
<td style="text-align:center">有</td>
<td style="text-align:center">无（可以创建）</td>
<td>适用于调岗审批</td>
</tr>
<tr>
<td style="text-align:left">人事–离职申请单</td>
<td style="text-align:center">有</td>
<td style="text-align:center">无（可以创建）</td>
<td>适用于离职审批</td>
</tr>
<tr>
<td style="text-align:left">行政–用车申请</td>
<td style="text-align:center">有</td>
<td style="text-align:center">有（企微云）</td>
<td>适用于因公使用车辆的申请</td>
</tr>
<tr>
<td style="text-align:left">行政–物品领用</td>
<td style="text-align:center">有</td>
<td style="text-align:center">有（企微云）</td>
<td>适用于物品领用申请</td>
</tr>
<tr>
<td style="text-align:left">行政–用印申请</td>
<td style="text-align:center">有</td>
<td style="text-align:center">无（可以创建）</td>
<td>适用于公司印章使用</td>
</tr>
<tr>
<td style="text-align:left">行政–通用审批</td>
<td style="text-align:center">有</td>
<td style="text-align:center">有</td>
<td>适用于通用审批</td>
</tr>
<tr>
<td style="text-align:left">财务–报销</td>
<td style="text-align:center">有</td>
<td style="text-align:center">有</td>
<td>适用于公司报销审批</td>
</tr>
<tr>
<td style="text-align:left">财务–备用金申请</td>
<td style="text-align:center">有</td>
<td style="text-align:center">无（可以创建）</td>
<td>用于企业员工出差或外出办事填写的备用金申请单</td>
</tr>
<tr>
<td style="text-align:left">财务–付款申请</td>
<td style="text-align:center">有</td>
<td style="text-align:center">无（可以创建）</td>
<td>适用于付款审批</td>
</tr>
<tr>
<td style="text-align:left">其它–立项申请</td>
<td style="text-align:center">有</td>
<td style="text-align:center">无（可以创建）</td>
<td>适用于项目立项时的申请</td>
</tr>
<tr>
<td style="text-align:left">其它–采购</td>
<td style="text-align:center">有</td>
<td style="text-align:center">无（可以创建）</td>
<td>用于企业办公或所需材料的采购申请</td>
</tr>
<tr>
<td style="text-align:left">合同和CRM</td>
<td style="text-align:center">无（销帮帮）</td>
<td style="text-align:center">企微云</td>
<td>均为第三方产品，都支持自定义合同表单和审批流程。<br>钉钉中第三方产品比较多。<br>企业微信比较少。</td>
</tr>
</tbody>
</table>
<h2 id="手机客户端界面对比"><a href="#手机客户端界面对比" class="headerlink" title="手机客户端界面对比"></a>手机客户端界面对比</h2><table>
<thead>
<tr>
<th style="text-align:center">功能页</th>
<th style="text-align:center">钉钉</th>
<th style="text-align:center">企业微信</th>
<th style="text-align:left">说明</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">首页</td>
<td style="text-align:center"><img src="/images_glob/dingtalk-weixin-oa/dingtalk-index.PNG" alt=""></td>
<td style="text-align:center"><img src="/images_glob/dingtalk-weixin-oa/weixin-index.PNG" alt=""></td>
<td style="text-align:left">钉钉：显示多个公司的信息。<br>企业微信：显示单个公司的信息。</td>
</tr>
<tr>
<td style="text-align:center">工作台</td>
<td style="text-align:center"><img src="/images_glob/dingtalk-weixin-oa/dingtalk-work.PNG" alt=""></td>
<td style="text-align:center"><img src="/images_glob/dingtalk-weixin-oa/weixin-work.PNG" alt=""></td>
<td style="text-align:left"></td>
</tr>
<tr>
<td style="text-align:center">审批</td>
<td style="text-align:center"><img src="/images_glob/dingtalk-weixin-oa/dingtalk-approve.PNG" alt=""></td>
<td style="text-align:center"><img src="/images_glob/dingtalk-weixin-oa/weixin-approve.PNG" alt=""><img src="/images_glob/dingtalk-weixin-oa/weixin-approve-thd.PNG" alt=""></td>
<td style="text-align:left">企业微信：第一个是微信的，第二张图是第三方的（指掌天下）</td>
</tr>
<tr>
<td style="text-align:center">CRM(合同)</td>
<td style="text-align:center"><img src="/images_glob/dingtalk-weixin-oa/dingtalk-crm-index.PNG" alt=""><img src="/images_glob/dingtalk-weixin-oa/dingtalk-crm-create.PNG" alt=""></td>
<td style="text-align:center"><img src="/images_glob/dingtalk-weixin-oa/weixin-crm.PNG" alt=""></td>
<td style="text-align:left">钉钉：销帮帮（第三方）。<br> 企业微信：企微云（第三方）</td>
</tr>
</tbody>
</table>
<h2 id="PC客户端界面对比"><a href="#PC客户端界面对比" class="headerlink" title="PC客户端界面对比"></a>PC客户端界面对比</h2><table>
<thead>
<tr>
<th style="text-align:center">功能页</th>
<th style="text-align:center">钉钉</th>
<th style="text-align:center">企业微信</th>
<th style="text-align:left">说明</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">首页</td>
<td style="text-align:center"><img src="/images_glob/dingtalk-weixin-oa/dt-index.png" alt=""></td>
<td style="text-align:center"><img src="/images_glob/dingtalk-weixin-oa/wx-index.png" alt=""></td>
<td style="text-align:left"></td>
</tr>
<tr>
<td style="text-align:center">工作台</td>
<td style="text-align:center"><img src="/images_glob/dingtalk-weixin-oa/dt-work.png" alt=""></td>
<td style="text-align:center"></td>
<td style="text-align:left">企业微信：首页即为工作台</td>
</tr>
<tr>
<td style="text-align:center">审批</td>
<td style="text-align:center"><img src="/images_glob/dingtalk-weixin-oa/dt-approve.png" alt=""><img src="/images_glob/dingtalk-weixin-oa/dt-approve-create.png" alt=""></td>
<td style="text-align:center"><img src="/images_glob/dingtalk-weixin-oa/wx-approve-create.png" alt=""></td>
<td style="text-align:left">企业微信：内置审批需要跳转到web申请</td>
</tr>
<tr>
<td style="text-align:center">CRM(合同)</td>
<td style="text-align:center"></td>
<td style="text-align:center"><img src="/images_glob/dingtalk-weixin-oa/wx-crm.png" alt=""></td>
<td style="text-align:left">钉钉：跳转到web</td>
</tr>
</tbody>
</table>
<h2 id="销帮帮"><a href="#销帮帮" class="headerlink" title="销帮帮"></a>销帮帮</h2><ul>
<li><a href="https://dingtalk.xbongbong.com//user/crmIndex.html" target="_blank" rel="external">网址</a><br><img src="/images_glob/dingtalk-weixin-oa/xbb-index.png" alt=""></li>
<li>使用手册<br><a href="/images_glob/dingtalk-weixin-oa/销帮帮CRM钉钉版管理员使用手册V3.4.pptx">销帮帮CRM钉钉版管理员使用手册V3.4.pptx</a><br><a href="/images_glob/dingtalk-weixin-oa/销帮帮CRM钉钉版用户使用手册V3.4.ppt">销帮帮CRM钉钉版用户使用手册V3.4.ppt</a></li>
<li>费用<br><img src="/images_glob/dingtalk-weixin-oa/xbb-price.png" alt=""></li>
</ul>
<h2 id="企微云"><a href="#企微云" class="headerlink" title="企微云"></a>企微云</h2><ul>
<li><a href="http://qy.do1.com.cn/qwy/manager/form_flow/main.jsp" target="_blank" rel="external">网址</a><br><img src="/images_glob/dingtalk-weixin-oa/qwy-index.png" alt=""></li>
<li>使用手册<br><a href="/images_glob/dingtalk-weixin-oa/企微云平台-微信办公第一品牌8.0.pdf">企微云平台-微信办公第一品牌8.0.pdf</a></li>
<li><a href="http://qy.do1.com.cn/qwy/qiweipublicity/companysrv/vip/vip_single_buy.jsp?tabCode=3" target="_blank" rel="external">免费版与收费版区别</a></li>
<li>费用:服务价格：100人（含）内2万元/年，超出部分，每50人增加2千元（不足50人按50人计算) ，超过2千人价格面议</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;网站&quot;&gt;&lt;a href=&quot;#网站&quot; class=&quot;headerlink&quot; title=&quot;网站&quot;&gt;&lt;/a&gt;网站&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://www.dingtalk.com&quot;&gt;钉钉&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://work.weixin.qq.com&quot;&gt;企业微信&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;结论&quot;&gt;&lt;a href=&quot;#结论&quot; class=&quot;headerlink&quot; title=&quot;结论&quot;&gt;&lt;/a&gt;结论&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;钉钉自身就实现了OA中的绝大部分功能，且流程配置更加灵活，目前我们用到的只有CRM需要依赖于第三方的销帮帮。&lt;/li&gt;
&lt;li&gt;销帮帮不支持区间设置，但只有合同审批会受此影响（目前正在和对方沟通希望其能进行升级）。&lt;/li&gt;
&lt;li&gt;微信自身提供的功能和第三方应用都不如钉钉的多。&lt;/li&gt;
&lt;li&gt;从功能、使用方式、价格和技术支持等多个维度对比，钉钉更有优势。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;平台对比&quot;&gt;&lt;a href=&quot;#平台对比&quot; class=&quot;headerlink&quot; title=&quot;平台对比&quot;&gt;&lt;/a&gt;平台对比&lt;/h2&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&quot;text-align:left&quot;&gt;功能&lt;/th&gt;
&lt;th style=&quot;text-align:center&quot;&gt;钉钉&lt;/th&gt;
&lt;th style=&quot;text-align:center&quot;&gt;企业微信&lt;/th&gt;
&lt;th style=&quot;text-align:left&quot;&gt;说明&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:left&quot;&gt;web端&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;支持&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;支持&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:left&quot;&gt;手机客户端&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;支持&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;支持&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:left&quot;&gt;PC客户端&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;支持&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;支持&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;钉钉：除第三方功能（销帮帮CRM）外，都可以在客户端上完成，第三方功能会跳转到web端。&lt;br&gt;企业微信：部分内置审批功能都需要跳转到web端，第三方（企微云）支持客户端直接发起申请很审批。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:left&quot;&gt;微信插件&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;无&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;有&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;使用微信插件可以不安装企业微信客户端，只使用微信就可以。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:left&quot;&gt;自定义表单&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;支持&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;支持&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:left&quot;&gt;自定义流程&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;支持&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;支持&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;企业微信：分支流程不支持区间设置，所以不能实现超过2个分支的情况，比如按请假天数走不同的审批流：小于3天，大于等于3天且小于10天，大于等于10天。企微云mac系统支持不好。销帮帮不支持区间设置。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:left&quot;&gt;自定义工作台布局&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;支持&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;不支持&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:left&quot;&gt;使用方式&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;多公司&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;单公司&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;钉钉：登录后可同时接收多家公司的消息，在工作台中对某个公司进行切换。&lt;br&gt;企业微信：登录时选择公司，只接收登录公司的信息&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
    
    </summary>
    
      <category term="学习笔记" scheme="http://blog.hanqunfeng.com/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="学习笔记" scheme="http://blog.hanqunfeng.com/tags/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>Spring Boot学习笔记08--NoSql之MongoDB&amp;Redis</title>
    <link href="http://blog.hanqunfeng.com/2016/12/30/spring-boot-study-nosql/"/>
    <id>http://blog.hanqunfeng.com/2016/12/30/spring-boot-study-nosql/</id>
    <published>2016-12-30T15:33:15.000Z</published>
    <updated>2016-12-30T09:55:22.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="摘要"><a href="#摘要" class="headerlink" title="摘要"></a>摘要</h2><p>看完本文你将掌握如下知识点：</p>
<ol>
<li>Spring Boot对MongoDB的支持</li>
<li>Spring Boot对Redis的支持</li>
</ol>
<a id="more"></a>
<hr>
<p><strong>SpringBoot系列</strong>：<a href="/tags/Spring-Boot/">Spring Boot学习笔记</a></p>
<hr>
<h2 id="Spring-Boot对MongoDB的支持"><a href="#Spring-Boot对MongoDB的支持" class="headerlink" title="Spring Boot对MongoDB的支持"></a>Spring Boot对MongoDB的支持</h2><p><strong>pom</strong>中加入依赖</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-data-mongodb<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div></pre></td></tr></table></figure>
<p>自定义Repository需要继承于<strong>MongoRepository</strong>，与JPA类似，同样支持命名方法和@Query接口查询。</p>
<p>按方法名进行查询，规则与JPA一致，@Query接口查询就是mongo的原生查询语句的语法类似。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">PersonRepository</span> <span class="keyword">extends</span> <span class="title">MongoRepository</span>&lt;<span class="title">Person</span>, <span class="title">String</span>&gt; </span>&#123;</div><div class="line"></div><div class="line">    <span class="comment">//等于</span></div><div class="line">    <span class="function">List&lt;Person&gt; <span class="title">findByName</span><span class="params">(String name)</span></span>;</div><div class="line"></div><div class="line">    <span class="comment">//And --- 等价于 SQL 中的 and 关键字；</span></div><div class="line">    <span class="function">List&lt;Person&gt; <span class="title">findByNameAndAge</span><span class="params">(String name, Integer age)</span></span>;</div><div class="line"></div><div class="line">    <span class="comment">// Or --- 等价于 SQL 中的 or 关键字；</span></div><div class="line">    <span class="function">List&lt;Person&gt; <span class="title">findByNameOrAge</span><span class="params">(String name, Integer age)</span></span>;</div><div class="line">    </div><div class="line">    <span class="comment">//分页</span></div><div class="line">    <span class="function">Page&lt;Person&gt; <span class="title">findByNameNot</span><span class="params">(String name, Pageable pageable)</span></span>;</div><div class="line"></div><div class="line">    <span class="comment">//mongo原生查询语句</span></div><div class="line">    <span class="comment">//等于</span></div><div class="line">    <span class="meta">@Query</span>(<span class="string">"&#123;'age':?0&#125;"</span>)</div><div class="line">    <span class="function">List&lt;Person&gt; <span class="title">withQueryFindByAge</span><span class="params">(Integer age)</span></span>;</div><div class="line"></div><div class="line">    <span class="comment">//大于</span></div><div class="line">    <span class="meta">@Query</span>(<span class="string">"&#123;'age': &#123;'$gt' : ?0&#125;&#125;"</span>)</div><div class="line">    <span class="function">List&lt;Person&gt; <span class="title">findByAgeGreaterThan</span><span class="params">(<span class="keyword">int</span> age)</span></span>;</div><div class="line"></div><div class="line">    <span class="comment">//正则匹配name，age范围</span></div><div class="line">    <span class="meta">@Query</span>(<span class="string">"&#123; 'name':&#123;'$regex':?0,'$options':'i'&#125;, 'age': &#123;'$gte':?1,'$lte':?2&#125;&#125;"</span>)</div><div class="line">    <span class="function"><span class="keyword">public</span> Page&lt;Person&gt; <span class="title">findByNameAndAgeRange</span><span class="params">(String name,<span class="keyword">int</span> ageFrom,<span class="keyword">int</span> ageTo,Pageable page)</span></span>;</div><div class="line"></div><div class="line">    <span class="comment">//正则匹配name，age范围，查询结果只封装name和age，当然默认ID是必须封装的</span></div><div class="line">    <span class="meta">@Query</span>(value = <span class="string">"&#123; 'name':&#123;'$regex':?0,'$options':'i'&#125;, 'age': &#123;'$gte':?1,'$lte':?2&#125;&#125;"</span>,fields = <span class="string">"&#123; 'name' : 1, 'age' : 1&#125;"</span>)</div><div class="line">    <span class="function"><span class="keyword">public</span> Page&lt;Person&gt; <span class="title">findByNameAndAgeRangeShow</span><span class="params">(String name,<span class="keyword">int</span> ageFrom,<span class="keyword">int</span> ageTo,Pageable page)</span></span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<hr>
<p>关于Mongo原生语句的说明可以参考：<a href="http://www.cnblogs.com/egger/archive/2013/06/14/3135847.html" target="_blank" rel="external">http://www.cnblogs.com/egger/archive/2013/06/14/3135847.html</a></p>
<hr>
<p>如果希望接管spring boot对mongo的自动配置，可以创建如下配置类，这样我们也可以像前文介绍的JPA绑定多数据源那样，绑定多个mongo数据源。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.example.mongo;</div><div class="line"></div><div class="line"><span class="keyword">import</span> com.mongodb.MongoClient;</div><div class="line"><span class="keyword">import</span> com.mongodb.MongoClientURI;</div><div class="line"><span class="keyword">import</span> com.mongodb.ServerAddress;</div><div class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Value;</div><div class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</div><div class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</div><div class="line"><span class="keyword">import</span> org.springframework.data.mongodb.MongoDbFactory;</div><div class="line"><span class="keyword">import</span> org.springframework.data.mongodb.core.MongoTemplate;</div><div class="line"><span class="keyword">import</span> org.springframework.data.mongodb.core.SimpleMongoDbFactory;</div><div class="line"><span class="keyword">import</span> org.springframework.data.mongodb.repository.config.EnableMongoRepositories;</div><div class="line"></div><div class="line"><span class="meta">@Configuration</span></div><div class="line"><span class="meta">@EnableMongoRepositories</span>(basePackages = &#123;<span class="string">"com.example.mongo.dao"</span>&#125;,mongoTemplateRef = <span class="string">"mongoTemplate"</span>)</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MongoConfig</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="meta">@Value</span>(<span class="string">"$&#123;spring.data.mongodb.host&#125;"</span>)</div><div class="line">    String mongoHost;</div><div class="line">    <span class="meta">@Value</span>(<span class="string">"$&#123;spring.data.mongodb.uri&#125;"</span>)</div><div class="line">    String mongoUrl;</div><div class="line"></div><div class="line">    <span class="meta">@Bean</span></div><div class="line">    <span class="function"><span class="keyword">public</span> MongoClient <span class="title">mongoClient</span><span class="params">()</span> </span>&#123;</div><div class="line">        MongoClient mongoClient = <span class="keyword">new</span> MongoClient(<span class="keyword">new</span> ServerAddress(mongoHost));</div><div class="line">        <span class="keyword">return</span> mongoClient;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Bean</span></div><div class="line">    <span class="function"><span class="keyword">public</span> MongoDbFactory <span class="title">mongoDbFactory</span><span class="params">()</span></span>&#123;</div><div class="line">        String database = <span class="keyword">new</span> MongoClientURI(mongoUrl).getDatabase();</div><div class="line">        <span class="keyword">return</span> <span class="keyword">new</span> SimpleMongoDbFactory(mongoClient(),database);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Bean</span>(name = <span class="string">"mongoTemplate"</span>)</div><div class="line">    <span class="function"><span class="keyword">public</span> MongoTemplate <span class="title">mongoTemplate</span><span class="params">()</span></span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">new</span> MongoTemplate(mongoDbFactory());</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<hr>
<h2 id="Spring-Boot对Redis的支持"><a href="#Spring-Boot对Redis的支持" class="headerlink" title="Spring Boot对Redis的支持"></a>Spring Boot对Redis的支持</h2><p><strong>pom</strong>中加入依赖</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-data-redis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div></pre></td></tr></table></figure>
<p>然后就可以通过<strong>@Autowired</strong>注解注入<strong>RedisTemplate</strong>，比如：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.example.redis.dao;</div><div class="line"></div><div class="line"><span class="keyword">import</span> com.example.redis.domain.Student;</div><div class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</div><div class="line"><span class="keyword">import</span> org.springframework.data.redis.core.RedisTemplate;</div><div class="line"><span class="keyword">import</span> org.springframework.data.redis.core.StringRedisTemplate;</div><div class="line"><span class="keyword">import</span> org.springframework.data.redis.core.ValueOperations;</div><div class="line"><span class="keyword">import</span> org.springframework.stereotype.Repository;</div><div class="line"></div><div class="line"><span class="keyword">import</span> javax.annotation.Resource;</div><div class="line"></div><div class="line"><span class="meta">@Repository</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StudentDao</span> </span>&#123;</div><div class="line">    <span class="meta">@Autowired</span></div><div class="line">    StringRedisTemplate stringRedisTemplate;</div><div class="line"></div><div class="line">    <span class="meta">@Autowired</span></div><div class="line">    RedisTemplate&lt;Object,Object&gt; redisTemplate;</div><div class="line"></div><div class="line">    <span class="meta">@Resource</span>(name = <span class="string">"stringRedisTemplate"</span>)</div><div class="line">    ValueOperations&lt;String,String&gt; valueOperationsStr;</div><div class="line"></div><div class="line">    <span class="meta">@Resource</span>(name = <span class="string">"redisTemplate"</span>)</div><div class="line">    ValueOperations&lt;Object,Object&gt; valueOperations;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setString</span><span class="params">(String key,String value)</span></span>&#123;</div><div class="line">        valueOperationsStr.set(key,value);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getString</span><span class="params">(String key)</span></span>&#123;</div><div class="line">        <span class="keyword">return</span> valueOperationsStr.get(key);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">saveStudent</span><span class="params">(Student student)</span></span>&#123;</div><div class="line">        valueOperations.set(student.getId(),student);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> Student <span class="title">getStudent</span><span class="params">(String id)</span></span>&#123;</div><div class="line">        <span class="keyword">return</span> (Student)valueOperations.get(id);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>同样，如果希望接管spring boot对redis的自动配置，可以创建如下自动配置类：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.example.redis;</div><div class="line"></div><div class="line"><span class="keyword">import</span> com.fasterxml.jackson.databind.ObjectMapper;</div><div class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Value;</div><div class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</div><div class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</div><div class="line"><span class="keyword">import</span> org.springframework.data.redis.connection.jedis.JedisConnectionFactory;</div><div class="line"><span class="keyword">import</span> org.springframework.data.redis.core.RedisTemplate;</div><div class="line"><span class="keyword">import</span> org.springframework.data.redis.core.StringRedisTemplate;</div><div class="line"><span class="keyword">import</span> org.springframework.data.redis.serializer.Jackson2JsonRedisSerializer;</div><div class="line"><span class="keyword">import</span> org.springframework.data.redis.serializer.StringRedisSerializer;</div><div class="line"></div><div class="line"><span class="meta">@Configuration</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RedisConfig</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="meta">@Value</span>(<span class="string">"$&#123;spring.redis.database&#125;"</span>)</div><div class="line">    String redisDatabase;</div><div class="line">    <span class="meta">@Value</span>(<span class="string">"$&#123;spring.redis.host&#125;"</span>)</div><div class="line">    String redisHost;</div><div class="line"></div><div class="line">    <span class="meta">@Bean</span></div><div class="line">    <span class="function"><span class="keyword">public</span> JedisConnectionFactory <span class="title">connectionFactory</span><span class="params">()</span></span>&#123;</div><div class="line">        JedisConnectionFactory jedisConnectionFactory = <span class="keyword">new</span> JedisConnectionFactory();</div><div class="line">        jedisConnectionFactory.setDatabase(Integer.valueOf(redisDatabase));</div><div class="line">        jedisConnectionFactory.setHostName(redisHost);</div><div class="line">        <span class="keyword">return</span> jedisConnectionFactory;</div><div class="line">    &#125;</div><div class="line"></div><div class="line"></div><div class="line">    <span class="meta">@Bean</span></div><div class="line">    <span class="function"><span class="keyword">public</span> Jackson2JsonRedisSerializer&lt;Object&gt; <span class="title">jackson2JsonRedisSerializer</span><span class="params">()</span> </span>&#123;</div><div class="line">        ObjectMapper objectMapper = <span class="keyword">new</span> ObjectMapper();</div><div class="line">        Jackson2JsonRedisSerializer&lt;Object&gt; jackson2JsonRedisSerializer = <span class="keyword">new</span> Jackson2JsonRedisSerializer&lt;Object&gt;(</div><div class="line">                Object.class);</div><div class="line">        jackson2JsonRedisSerializer.setObjectMapper(objectMapper);</div><div class="line">        <span class="keyword">return</span> jackson2JsonRedisSerializer;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">//用于对存储内容转换为json格式</span></div><div class="line">    <span class="meta">@Bean</span>(name = <span class="string">"redisTemplate"</span>)</div><div class="line">    <span class="function"><span class="keyword">public</span> RedisTemplate&lt;Object, Object&gt; <span class="title">objRedisTemplate</span><span class="params">(JedisConnectionFactory connectionFactory,</span></span></div><div class="line">                                                   Jackson2JsonRedisSerializer&lt;Object&gt; jackson2JsonRedisSerializer) &#123;</div><div class="line">        RedisTemplate&lt;Object, Object&gt; redisTemplate = <span class="keyword">new</span> RedisTemplate&lt;Object, Object&gt;();</div><div class="line">        redisTemplate.setConnectionFactory(connectionFactory);</div><div class="line">        redisTemplate.setDefaultSerializer(jackson2JsonRedisSerializer);</div><div class="line">        StringRedisSerializer stringRedisSerializer = <span class="keyword">new</span> StringRedisSerializer();</div><div class="line">        redisTemplate.setKeySerializer(stringRedisSerializer);</div><div class="line">        redisTemplate.setHashKeySerializer(stringRedisSerializer);</div><div class="line">        <span class="keyword">return</span> redisTemplate;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Bean</span>(name = <span class="string">"stringRedisTemplate"</span>)</div><div class="line">    <span class="function"><span class="keyword">public</span> StringRedisTemplate <span class="title">stringRedisTemplate</span><span class="params">(JedisConnectionFactory connectionFactory)</span> </span>&#123;</div><div class="line">        StringRedisTemplate stringRedisTemplate = <span class="keyword">new</span> StringRedisTemplate(connectionFactory);</div><div class="line">        <span class="keyword">return</span> stringRedisTemplate;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<hr>
<p>本文示例代码下载地址：<a href="https://github.com/hanqunfeng/SpringBootStudy" target="_blank" rel="external">https://github.com/hanqunfeng/SpringBootStudy</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;摘要&quot;&gt;&lt;a href=&quot;#摘要&quot; class=&quot;headerlink&quot; title=&quot;摘要&quot;&gt;&lt;/a&gt;摘要&lt;/h2&gt;&lt;p&gt;看完本文你将掌握如下知识点：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Spring Boot对MongoDB的支持&lt;/li&gt;
&lt;li&gt;Spring Boot对Redis的支持&lt;/li&gt;
&lt;/ol&gt;
    
    </summary>
    
      <category term="技术" scheme="http://blog.hanqunfeng.com/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="Spring Boot" scheme="http://blog.hanqunfeng.com/tags/Spring-Boot/"/>
    
  </entry>
  
  <entry>
    <title>Spring Boot学习笔记07--DataSource的创建方法</title>
    <link href="http://blog.hanqunfeng.com/2016/12/22/spring-boot-study-datasource/"/>
    <id>http://blog.hanqunfeng.com/2016/12/22/spring-boot-study-datasource/</id>
    <published>2016-12-22T15:33:15.000Z</published>
    <updated>2016-12-22T11:53:01.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="摘要"><a href="#摘要" class="headerlink" title="摘要"></a>摘要</h2><p>看完本文你将掌握如下知识点：</p>
<ol>
<li>Spring Boot项目中DataSource的创建方法</li>
</ol>
<a id="more"></a>
<hr>
<p><strong>SpringBoot系列</strong>：<a href="/tags/Spring-Boot/">Spring Boot学习笔记</a></p>
<hr>
<h2 id="DataSource的创建方法"><a href="#DataSource的创建方法" class="headerlink" title="DataSource的创建方法"></a>DataSource的创建方法</h2><p>前面讲了很多Spring Boot数据访问方面的内容，在讲到自己扩展数据访问的时候，示例代码中给出的DataSource创建方式都是<strong>DriverManagerDataSource</strong>，比如：</p>
<figure class="highlight yml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#datasource</span></div><div class="line">spring.datasource.driver-class-name=com.mysql.jdbc.Driver</div><div class="line">spring.datasource.url=jdbc:mysql://localhost:<span class="number">3306</span>/springboot1?useUnicode=<span class="literal">true</span>&amp;characterEncoding=utf<span class="bullet">-8</span></div><div class="line">spring.datasource.username=root</div><div class="line">spring.datasource.password=newpwd</div></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Value</span>(<span class="string">"$&#123;spring.datasource.driver-class-name&#125;"</span>)</div><div class="line">String driverClass;</div><div class="line"><span class="meta">@Value</span>(<span class="string">"$&#123;spring.datasource.url&#125;"</span>)</div><div class="line">String url;</div><div class="line"><span class="meta">@Value</span>(<span class="string">"$&#123;spring.datasource.username&#125;"</span>)</div><div class="line">String userName;</div><div class="line"><span class="meta">@Value</span>(<span class="string">"$&#123;spring.datasource.password&#125;"</span>)</div><div class="line">String passWord;</div><div class="line"></div><div class="line"><span class="meta">@Bean</span>(name = <span class="string">"dataSource"</span>)</div><div class="line"><span class="function"><span class="keyword">public</span> DataSource <span class="title">dataSource</span><span class="params">()</span> </span>&#123;</div><div class="line"></div><div class="line">    DriverManagerDataSource dataSource = <span class="keyword">new</span> DriverManagerDataSource();</div><div class="line">    dataSource.setDriverClassName(driverClass);</div><div class="line">    dataSource.setUrl(url);</div><div class="line">    dataSource.setUsername(userName);</div><div class="line">    dataSource.setPassword(passWord);</div><div class="line">    <span class="keyword">return</span> dataSource;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>如果有多个数据源，就再创建多个<strong>DriverManagerDataSource</strong>。<br>一般生产项目中我们不会这样使用，通常可以使用<strong>org.apache.commons.dbcp.BasicDataSource</strong>。</p>
<hr>
<p>实际上Spring Boot为我们提供了简便的创建DataSource的方法：</p>
<figure class="highlight yml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#datasource</span></div><div class="line"><span class="comment">#需要执行数据源的类型</span></div><div class="line">spring.datasource.ds1.type=org.apache.tomcat.jdbc.pool.DataSource</div><div class="line">spring.datasource.ds1.driver-class-name=com.mysql.jdbc.Driver</div><div class="line">spring.datasource.ds1.url=jdbc:mysql://localhost:<span class="number">3306</span>/springboot1?useUnicode=<span class="literal">true</span>&amp;characterEncoding=utf<span class="bullet">-8</span></div><div class="line">spring.datasource.ds1.username=root</div><div class="line">spring.datasource.ds1.password=newpwd</div><div class="line"></div><div class="line">spring.datasource.ds2.type=org.apache.tomcat.jdbc.pool.DataSource</div><div class="line">spring.datasource.ds2.driver-class-name=com.mysql.jdbc.Driver</div><div class="line">spring.datasource.ds2.url=jdbc:mysql://localhost:<span class="number">3306</span>/springboot2?useUnicode=<span class="literal">true</span>&amp;characterEncoding=utf<span class="bullet">-8</span></div><div class="line">spring.datasource.ds2.username=root</div><div class="line">spring.datasource.ds2.password=newpwd</div></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Bean</span>(name = <span class="string">"dataSource1"</span>)</div><div class="line"><span class="comment">//application.properties中属性名称的前缀</span></div><div class="line"><span class="meta">@ConfigurationProperties</span>(prefix = <span class="string">"spring.datasource.ds1"</span>)</div><div class="line"><span class="function"><span class="keyword">public</span> DataSource <span class="title">dataSource1</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">return</span> DataSourceBuilder.create().build();</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="meta">@Bean</span>(name = <span class="string">"dataSource2"</span>)</div><div class="line"><span class="meta">@ConfigurationProperties</span>(prefix = <span class="string">"spring.datasource.ds2"</span>)</div><div class="line"><span class="function"><span class="keyword">public</span> DataSource <span class="title">dataSource2</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">return</span> DataSourceBuilder.create().build();</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>目前，此种方式支持如下几种数据源类型：</p>
<p>“org.apache.tomcat.jdbc.pool.DataSource”, “com.zaxxer.hikari.HikariDataSource”, “org.apache.commons.dbcp.BasicDataSource”, “org.apache.commons.dbcp2.BasicDataSource”</p>
<p>使用哪种数据源类型，就要在项目中加入相应的jar依赖，<br>比如<strong>org.apache.tomcat.jdbc.pool.DataSource</strong></p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.tomcat<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>tomcat-jdbc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>8.5.6<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;摘要&quot;&gt;&lt;a href=&quot;#摘要&quot; class=&quot;headerlink&quot; title=&quot;摘要&quot;&gt;&lt;/a&gt;摘要&lt;/h2&gt;&lt;p&gt;看完本文你将掌握如下知识点：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Spring Boot项目中DataSource的创建方法&lt;/li&gt;
&lt;/ol&gt;
    
    </summary>
    
      <category term="技术" scheme="http://blog.hanqunfeng.com/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="Spring Boot" scheme="http://blog.hanqunfeng.com/tags/Spring-Boot/"/>
    
  </entry>
  
  <entry>
    <title>Spring Boot学习笔记06--JPA</title>
    <link href="http://blog.hanqunfeng.com/2016/12/21/spring-boot-study-jpa/"/>
    <id>http://blog.hanqunfeng.com/2016/12/21/spring-boot-study-jpa/</id>
    <published>2016-12-21T15:33:15.000Z</published>
    <updated>2016-12-25T07:51:52.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="摘要"><a href="#摘要" class="headerlink" title="摘要"></a>摘要</h2><p>看完本文你将掌握如下知识点：</p>
<ol>
<li>Spring Boot项目中JPA的配置及使用方法</li>
<li>Spring Boot项目配置Spring Data JPA的方法</li>
<li>Spring Data JPA与Atomikos整合实现多数据源事务管理</li>
<li>扩展JPA的方法</li>
</ol>
<a id="more"></a>
<hr>
<p><strong>SpringBoot系列</strong>：<a href="/tags/Spring-Boot/">Spring Boot学习笔记</a></p>
<hr>
<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>JPA即Java Persistence API，是一个基于O/R映射的标准规范，该规范只负责定义规则的标准（注解或接口），而不需要提供具体实现，具体的实现交由软件提供商来实现，目前主要的JPA提供商为Hibernate，EclipseLink和OperJPA。</p>
<p><a href="http://projects.spring.io/spring-data-jpa/" target="_blank" rel="external">Spring Data JPA</a>是Spring Data的一个子项目，通过提供基于JPA的Repository来简化代码量。<br>其提供了一个<strong>org.springframework.data.jpa.repository.JpaRepository</strong>，我们的Repository只要继承该JpaRepository，即可享受到JPA带来的好处。</p>
<p>Spring Boot通过<strong>spring-boot-starter-data-jpa</strong>来提供对JPA的支持，Spring Boot默认的JPA实现者是Hibernate。</p>
<hr>
<p><strong>说明</strong><br>在讲解下面的内容前，我们先在数据库中创建一张表</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"># 创建库1</div><div class="line">CREATE SCHEMA `springboot1` DEFAULT CHARACTER SET utf8 ;</div><div class="line">CREATE TABLE `springboot1`.`person` (</div><div class="line">  `p_id` INT NOT NULL AUTO_INCREMENT COMMENT '主键',</div><div class="line">  `p_name` VARCHAR(45) NULL COMMENT '姓名',</div><div class="line">  `p_age` INT NULL COMMENT '年龄',</div><div class="line">  PRIMARY KEY (`p_id`))</div><div class="line">ENGINE = InnoDB</div><div class="line">COMMENT = '人员信息表';</div><div class="line"></div><div class="line">INSERT INTO `springboot1`.`person` (`p_id`, `p_name`, `p_age`) VALUES ('1', '张三', '20');</div><div class="line">INSERT INTO `springboot1`.`person` (`p_id`, `p_name`, `p_age`) VALUES ('2', '李四', '25');</div><div class="line">INSERT INTO `springboot1`.`person` (`p_id`, `p_name`, `p_age`) VALUES ('3', '王五', '18');</div><div class="line">INSERT INTO `springboot1`.`person` (`p_id`, `p_name`, `p_age`) VALUES ('4', '王五', '18');</div></pre></td></tr></table></figure>
<hr>
<h2 id="Spring-Boot项目中使用JPA"><a href="#Spring-Boot项目中使用JPA" class="headerlink" title="Spring Boot项目中使用JPA"></a>Spring Boot项目中使用JPA</h2><p>创建项目时选择JPA依赖，或者手工将<strong>spring-boot-starter-data-jpa</strong>添加到pom中。</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-data-jpa<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div></pre></td></tr></table></figure>
<p>此时项目会自动开启如下两个自动配置类：</p>
<blockquote>
<p>JpaRepositoriesAutoConfiguration<br>HibernateJpaAutoConfiguration</p>
</blockquote>
<p><strong>application.properties</strong>中增加jpa相关配置</p>
<figure class="highlight yml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#datasource</span></div><div class="line">spring.datasource.driver-class-name=com.mysql.jdbc.Driver</div><div class="line">spring.datasource.url=jdbc:mysql://localhost:<span class="number">3306</span>/springboot1?useUnicode=<span class="literal">true</span>&amp;characterEncoding=utf<span class="bullet">-8</span></div><div class="line">spring.datasource.username=root</div><div class="line">spring.datasource.password=newpwd</div><div class="line"></div><div class="line"><span class="comment">#spring_jpa</span></div><div class="line"><span class="comment">#启动时会根据实体类生成数据表，或者更新表结构，不清空数据，开发阶段使用；validate：表结构稳定后使用，可用于正式环境；</span></div><div class="line">spring.jpa.hibernate.ddl-auto=update</div><div class="line"><span class="comment">#控制台打印sql</span></div><div class="line">spring.jpa.show-sql=<span class="literal">true</span></div><div class="line"><span class="comment">#让控制器输出的json格式更美观</span></div><div class="line">spring.jackson.serialization.indent-output=<span class="literal">true</span></div></pre></td></tr></table></figure>
<p>在项目中使用JPA时，只需要创建一个继承于<strong>JpaRepository</strong>的Repository接口，即可拥有<strong>JpaRepository</strong>及其父类中提供的全部数据访问方法。如果提供的方法不满足业务需要，可以按如下规则扩展数据方法。</p>
<p><strong>JpaRepository</strong></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> org.springframework.data.jpa.repository;</div><div class="line"></div><div class="line"><span class="keyword">import</span> java.io.Serializable;</div><div class="line"><span class="keyword">import</span> java.util.List;</div><div class="line"><span class="keyword">import</span> org.springframework.data.domain.Example;</div><div class="line"><span class="keyword">import</span> org.springframework.data.domain.Sort;</div><div class="line"><span class="keyword">import</span> org.springframework.data.repository.NoRepositoryBean;</div><div class="line"><span class="keyword">import</span> org.springframework.data.repository.PagingAndSortingRepository;</div><div class="line"><span class="keyword">import</span> org.springframework.data.repository.query.QueryByExampleExecutor;</div><div class="line"></div><div class="line"><span class="meta">@NoRepositoryBean</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">JpaRepository</span>&lt;<span class="title">T</span>, <span class="title">ID</span> <span class="keyword">extends</span> <span class="title">Serializable</span>&gt; <span class="keyword">extends</span> <span class="title">PagingAndSortingRepository</span>&lt;<span class="title">T</span>, <span class="title">ID</span>&gt;, <span class="title">QueryByExampleExecutor</span>&lt;<span class="title">T</span>&gt; </span>&#123;</div><div class="line">    <span class="function">List&lt;T&gt; <span class="title">findAll</span><span class="params">()</span></span>;</div><div class="line"></div><div class="line">    <span class="function">List&lt;T&gt; <span class="title">findAll</span><span class="params">(Sort var1)</span></span>;</div><div class="line"></div><div class="line">    <span class="function">List&lt;T&gt; <span class="title">findAll</span><span class="params">(Iterable&lt;ID&gt; var1)</span></span>;</div><div class="line"></div><div class="line">    &lt;S extends T&gt; <span class="function">List&lt;S&gt; <span class="title">save</span><span class="params">(Iterable&lt;S&gt; var1)</span></span>;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">flush</span><span class="params">()</span></span>;</div><div class="line"></div><div class="line">    &lt;S extends T&gt; <span class="function">S <span class="title">saveAndFlush</span><span class="params">(S var1)</span></span>;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">deleteInBatch</span><span class="params">(Iterable&lt;T&gt; var1)</span></span>;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">deleteAllInBatch</span><span class="params">()</span></span>;</div><div class="line"></div><div class="line">    <span class="function">T <span class="title">getOne</span><span class="params">(ID var1)</span></span>;</div><div class="line"></div><div class="line">    &lt;S extends T&gt; <span class="function">List&lt;S&gt; <span class="title">findAll</span><span class="params">(Example&lt;S&gt; var1)</span></span>;</div><div class="line"></div><div class="line">    &lt;S extends T&gt; <span class="function">List&lt;S&gt; <span class="title">findAll</span><span class="params">(Example&lt;S&gt; var1, Sort var2)</span></span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>自定义Repository：<strong>PersonRepository</strong>，并扩展数据访问方法，具体扩展方法参看示例代码</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.example.dao;</div><div class="line"></div><div class="line"><span class="keyword">import</span> com.example.model.Person;</div><div class="line"><span class="keyword">import</span> org.springframework.data.domain.Page;</div><div class="line"><span class="keyword">import</span> org.springframework.data.domain.Pageable;</div><div class="line"><span class="keyword">import</span> org.springframework.data.jpa.repository.JpaRepository;</div><div class="line"><span class="keyword">import</span> org.springframework.data.jpa.repository.Modifying;</div><div class="line"><span class="keyword">import</span> org.springframework.data.jpa.repository.Query;</div><div class="line"><span class="keyword">import</span> org.springframework.data.repository.query.Param;</div><div class="line"><span class="keyword">import</span> java.util.List;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">PersonRepository</span> <span class="keyword">extends</span> <span class="title">JpaRepository</span>&lt;<span class="title">Person</span>, <span class="title">Integer</span>&gt; </span>&#123;</div><div class="line"></div><div class="line">    <span class="comment">//1.以下方法基于属性名称和查询关键字，所以方法名称必须遵循命名规则，并且参数类型要与实体的参数类型一致。</span></div><div class="line">    <span class="comment">// 只用于查询方法，以下给出常用的示例</span></div><div class="line"></div><div class="line">    <span class="comment">//等于</span></div><div class="line">    <span class="function">List&lt;Person&gt; <span class="title">findByPName</span><span class="params">(String PName)</span></span>;</div><div class="line"></div><div class="line">    <span class="comment">//And --- 等价于 SQL 中的 and 关键字；  </span></div><div class="line">    <span class="function">List&lt;Person&gt; <span class="title">findByPNameAndPAge</span><span class="params">(String PName, Integer PAge)</span></span>;</div><div class="line"></div><div class="line">    <span class="comment">// Or --- 等价于 SQL 中的 or 关键字；  </span></div><div class="line">    <span class="function">List&lt;Person&gt; <span class="title">findByPNameOrPAge</span><span class="params">(String PName, Integer PAge)</span></span>;</div><div class="line"></div><div class="line">    <span class="comment">//Between --- 等价于 SQL 中的 between 关键字；  </span></div><div class="line">    <span class="function">List&lt;Person&gt; <span class="title">findByPAgeBetween</span><span class="params">(Integer min, Integer max)</span></span>;</div><div class="line"></div><div class="line">    <span class="comment">//LessThan --- 等价于 SQL 中的 "&lt;"；  日期类型也可以使用Before关键字</span></div><div class="line">    <span class="function">List&lt;Person&gt; <span class="title">findByPAgeLessThan</span><span class="params">(Integer max)</span></span>;</div><div class="line"></div><div class="line">    <span class="comment">//LessThanEqual --- 等价于 SQL 中的 "&lt;="；</span></div><div class="line">    <span class="function">List&lt;Person&gt; <span class="title">findByPAgeLessThanEqual</span><span class="params">(Integer max)</span></span>;</div><div class="line"></div><div class="line">    <span class="comment">//GreaterThan --- 等价于 SQL 中的"&gt;"；日期类型也可以使用After关键字</span></div><div class="line">    <span class="function">List&lt;Person&gt; <span class="title">findByPAgeGreaterThan</span><span class="params">(Integer min)</span></span>;</div><div class="line"></div><div class="line">    <span class="comment">//GreaterThanEqual --- 等价于 SQL 中的"&gt;="；</span></div><div class="line">    <span class="function">List&lt;Person&gt; <span class="title">findByPAgeGreaterThanEqual</span><span class="params">(Integer min)</span></span>;</div><div class="line"></div><div class="line">    <span class="comment">//IsNull --- 等价于 SQL 中的 "is null"；</span></div><div class="line">    <span class="function">List&lt;Person&gt; <span class="title">findByPNameIsNull</span><span class="params">()</span></span>;</div><div class="line"></div><div class="line">    <span class="comment">//IsNotNull --- 等价于 SQL 中的 "is not null"；</span></div><div class="line">    <span class="function">List&lt;Person&gt; <span class="title">findByPNameIsNotNull</span><span class="params">()</span></span>;</div><div class="line"></div><div class="line">    <span class="comment">//NotNull --- 与 IsNotNull 等价；  </span></div><div class="line">    <span class="function">List&lt;Person&gt; <span class="title">findByPNameNotNull</span><span class="params">()</span></span>;</div><div class="line"></div><div class="line">    <span class="comment">//Like --- 等价于 SQL 中的 "like";</span></div><div class="line">    <span class="function">List&lt;Person&gt; <span class="title">findByPNameLike</span><span class="params">(String PName)</span></span>;</div><div class="line"></div><div class="line">    <span class="comment">//NotLike --- 等价于 SQL 中的 "not like"；</span></div><div class="line">    <span class="function">List&lt;Person&gt; <span class="title">findByPNameNotLike</span><span class="params">(String PName)</span></span>;</div><div class="line"></div><div class="line">    <span class="comment">//OrderBy --- 等价于 SQL 中的 "order by"；</span></div><div class="line">    <span class="function">List&lt;Person&gt; <span class="title">findByPNameNotNullOrderByPAgeAsc</span><span class="params">()</span></span>;</div><div class="line"></div><div class="line">    <span class="comment">//Not --- 等价于 SQL 中的 "！ ="；</span></div><div class="line">    <span class="function">List&lt;Person&gt; <span class="title">findByPNameNot</span><span class="params">(String PName)</span></span>;</div><div class="line"></div><div class="line">    <span class="comment">//In --- 等价于 SQL 中的 "in";</span></div><div class="line">    <span class="function">List&lt;Person&gt; <span class="title">findByPNameIn</span><span class="params">(String PName)</span></span>;</div><div class="line"></div><div class="line">    <span class="comment">//NotIn --- 等价于 SQL 中的 "not in";</span></div><div class="line">    <span class="function">List&lt;Person&gt; <span class="title">findByPNameNotIn</span><span class="params">(String PName)</span></span>;</div><div class="line"></div><div class="line"></div><div class="line">    <span class="comment">//Top --- 查询符合条件的前两条记录，等价与First关键字</span></div><div class="line">    <span class="function">List&lt;Person&gt; <span class="title">findTop2ByPName</span><span class="params">(String PName)</span></span>;</div><div class="line"></div><div class="line">    <span class="comment">//2.以下方法基于@Query注解，方法名称可以随意，可用于查询和更新方法，更新方法要设置@Modifying注解</span></div><div class="line">    <span class="comment">//使用命名参数</span></div><div class="line">    <span class="meta">@Query</span>(<span class="string">"select p from Person p where p.pName = :name and p.pAge = :age"</span>)</div><div class="line">    <span class="function">List&lt;Person&gt; <span class="title">withNameAndAgeQuery</span><span class="params">(@Param(<span class="string">"name"</span>)</span> String name, @<span class="title">Param</span><span class="params">(<span class="string">"age"</span>)</span> Integer age)</span>;</div><div class="line"></div><div class="line">    <span class="comment">//使用参数索引</span></div><div class="line">    <span class="meta">@Query</span>(<span class="string">"select p from Person p where p.pName = ?1 and p.pAge = ?2"</span>)</div><div class="line">    <span class="function">List&lt;Person&gt; <span class="title">withNameAndAgeQuery2</span><span class="params">(String name, Integer age)</span></span>;</div><div class="line"></div><div class="line"></div><div class="line">    <span class="comment">//删除操作，使用hql，如果要使用sql，需要增加nativeQuery = true</span></div><div class="line">    <span class="meta">@Query</span>(value = <span class="string">"delete from Person where pId=?1"</span>)</div><div class="line">    <span class="meta">@Modifying</span></div><div class="line">    <span class="function"><span class="keyword">int</span> <span class="title">deletePersonById</span><span class="params">(Integer id)</span></span>;</div><div class="line"></div><div class="line">    <span class="comment">//修改操作</span></div><div class="line">    <span class="meta">@Query</span>(value = <span class="string">"update Person set pName=?1 where pId=?2 "</span>)</div><div class="line">    <span class="meta">@Modifying</span></div><div class="line">    <span class="function"><span class="keyword">int</span> <span class="title">updatePersonName</span><span class="params">(String name, Integer id)</span></span>;</div><div class="line"></div><div class="line">    <span class="comment">//插入操作，使用sql操作</span></div><div class="line">    <span class="meta">@Query</span>(value = <span class="string">"insert into person(p_name,p_age) value(?1,?2)"</span>,nativeQuery = <span class="keyword">true</span>)</div><div class="line">    <span class="meta">@Modifying</span></div><div class="line">    <span class="function"><span class="keyword">int</span> <span class="title">insertPersonByParam</span><span class="params">(String name, Integer age)</span></span>;</div><div class="line"></div><div class="line"></div><div class="line">    <span class="comment">//3.以下方法实现分页查询功能，只需要在方法中增加Pageable pageable参数即可，返回结果为Page集合</span></div><div class="line">    <span class="function">Page&lt;Person&gt; <span class="title">findByPNameNot</span><span class="params">(String name, Pageable pageable)</span></span>;</div><div class="line"></div><div class="line">    <span class="comment">//使用命名参数</span></div><div class="line">    <span class="meta">@Query</span>(<span class="string">"select p from Person p where p.pName = :name "</span>)</div><div class="line">    <span class="function">Page&lt;Person&gt; <span class="title">withNameQueryPage</span><span class="params">(@Param(<span class="string">"name"</span>)</span> String name, Pageable pageable)</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>POJO实体对象：<strong>Person</strong></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.example.model;</div><div class="line"><span class="keyword">import</span> javax.persistence.*;</div><div class="line"></div><div class="line"><span class="keyword">import</span> <span class="keyword">static</span> javax.persistence.GenerationType.IDENTITY;</div><div class="line"></div><div class="line"><span class="meta">@Entity</span></div><div class="line"><span class="meta">@Table</span>(name = <span class="string">"person"</span></div><div class="line">        , catalog = <span class="string">"springboot1"</span></div><div class="line">)</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span> <span class="keyword">implements</span> <span class="title">java</span>.<span class="title">io</span>.<span class="title">Serializable</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="meta">@Id</span></div><div class="line">    <span class="meta">@GeneratedValue</span>(strategy = IDENTITY)</div><div class="line">    <span class="meta">@Column</span>(name = <span class="string">"p_id"</span>, unique = <span class="keyword">true</span>, nullable = <span class="keyword">false</span>)</div><div class="line">    <span class="keyword">private</span> Integer pId;</div><div class="line"></div><div class="line">    <span class="meta">@Column</span>(name = <span class="string">"p_name"</span>, length = <span class="number">45</span>)</div><div class="line">    <span class="keyword">private</span> String pName;</div><div class="line"></div><div class="line">    <span class="meta">@Column</span>(name = <span class="string">"p_age"</span>)</div><div class="line">    <span class="keyword">private</span> Integer pAge;</div><div class="line"></div><div class="line">    <span class="comment">//setter and getter</span></div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="string">"Person&#123;"</span> +</div><div class="line">                <span class="string">"pId="</span> + pId +</div><div class="line">                <span class="string">", pName='"</span> + pName + <span class="string">'\''</span> +</div><div class="line">                <span class="string">", pAge="</span> + pAge +</div><div class="line">                <span class="string">'&#125;'</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="测试演示"><a href="#测试演示" class="headerlink" title="测试演示"></a>测试演示</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.example;</div><div class="line"></div><div class="line"><span class="keyword">import</span> com.example.dao.PersonRepository;</div><div class="line"><span class="keyword">import</span> com.example.model.Person;</div><div class="line"><span class="keyword">import</span> org.junit.Test;</div><div class="line"><span class="keyword">import</span> org.junit.runner.RunWith;</div><div class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</div><div class="line"><span class="keyword">import</span> org.springframework.boot.test.context.SpringBootTest;</div><div class="line"><span class="keyword">import</span> org.springframework.data.domain.Page;</div><div class="line"><span class="keyword">import</span> org.springframework.data.domain.PageRequest;</div><div class="line"><span class="keyword">import</span> org.springframework.data.domain.Pageable;</div><div class="line"><span class="keyword">import</span> org.springframework.data.domain.Sort;</div><div class="line"><span class="keyword">import</span> org.springframework.test.context.junit4.SpringRunner;</div><div class="line"><span class="keyword">import</span> org.springframework.transaction.annotation.Transactional;</div><div class="line"></div><div class="line"><span class="keyword">import</span> java.util.Iterator;</div><div class="line"><span class="keyword">import</span> java.util.List;</div><div class="line"></div><div class="line"><span class="meta">@RunWith</span>(SpringRunner.class)</div><div class="line"><span class="meta">@SpringBootTest</span></div><div class="line"><span class="meta">@Transactional</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JpaSingleDatasourceApplicationTests</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="meta">@Autowired</span></div><div class="line">    <span class="keyword">private</span> PersonRepository personRepository;</div><div class="line"></div><div class="line">    <span class="meta">@Test</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">findByPName</span><span class="params">()</span> </span>&#123;</div><div class="line">        String name = <span class="string">"王五"</span>;</div><div class="line">        List&lt;Person&gt; list = personRepository.findByPName(name);</div><div class="line">        System.out.println(list.size());</div><div class="line">        <span class="keyword">for</span>(Person person : list)&#123;</div><div class="line">            System.out.println(person);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Test</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">findByPNameAndPAge</span><span class="params">()</span> </span>&#123;</div><div class="line">        String name = <span class="string">"王五"</span>;</div><div class="line">        <span class="keyword">int</span> age = <span class="number">18</span>;</div><div class="line">        List&lt;Person&gt; list = personRepository.findByPNameAndPAge(name,age);</div><div class="line">        System.out.println(list.size());</div><div class="line">        <span class="keyword">for</span>(Person person : list)&#123;</div><div class="line">            System.out.println(person);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Test</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">findByPNameOrPAge</span><span class="params">()</span> </span>&#123;</div><div class="line">        String name = <span class="string">"王五"</span>;</div><div class="line">        <span class="keyword">int</span> age = <span class="number">25</span>;</div><div class="line">        List&lt;Person&gt; list = personRepository.findByPNameOrPAge(name,age);</div><div class="line">        System.out.println(list.size());</div><div class="line">        <span class="keyword">for</span>(Person person : list)&#123;</div><div class="line">            System.out.println(person);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Test</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">findTop2ByPName</span><span class="params">()</span> </span>&#123;</div><div class="line">        String name = <span class="string">"王五"</span>;</div><div class="line">        List&lt;Person&gt; list = personRepository.findTop2ByPName(name);</div><div class="line">        System.out.println(list.size());</div><div class="line">        <span class="keyword">for</span>(Person person : list)&#123;</div><div class="line">            System.out.println(person);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Test</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">withNameAndAgeQuery</span><span class="params">()</span> </span>&#123;</div><div class="line">        String name = <span class="string">"王五"</span>;</div><div class="line">        <span class="keyword">int</span> age = <span class="number">18</span>;</div><div class="line">        List&lt;Person&gt; list = personRepository.withNameAndAgeQuery(name,age);</div><div class="line">        System.out.println(list.size());</div><div class="line">        <span class="keyword">for</span>(Person person : list)&#123;</div><div class="line">            System.out.println(person);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Test</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">withNameAndAgeQuery2</span><span class="params">()</span> </span>&#123;</div><div class="line">        String name = <span class="string">"王五"</span>;</div><div class="line">        <span class="keyword">int</span> age = <span class="number">18</span>;</div><div class="line">        List&lt;Person&gt; list = personRepository.withNameAndAgeQuery2(name,age);</div><div class="line">        System.out.println(list.size());</div><div class="line">        <span class="keyword">for</span>(Person person : list)&#123;</div><div class="line">            System.out.println(person);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line"></div><div class="line">    <span class="meta">@Test</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">deletePersonById</span><span class="params">()</span></span>&#123;</div><div class="line">        <span class="keyword">int</span> id = <span class="number">1</span>;</div><div class="line">        <span class="keyword">int</span> result = personRepository.deletePersonById(id);</div><div class="line">        System.out.println(<span class="string">"result = "</span> + result);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Test</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">updatePersonName</span><span class="params">()</span></span>&#123;</div><div class="line">        <span class="keyword">int</span> id = <span class="number">1</span>;</div><div class="line">        String name = <span class="string">"哈哈"</span>;</div><div class="line">        <span class="keyword">int</span> result = personRepository.updatePersonName(name,id);</div><div class="line">        System.out.println(<span class="string">"result = "</span> + result);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Test</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">insertPersonByParam</span><span class="params">()</span></span>&#123;</div><div class="line">        <span class="keyword">int</span> age = <span class="number">10</span>;</div><div class="line">        String name = <span class="string">"哈哈"</span>;</div><div class="line">        <span class="keyword">int</span> result = personRepository.insertPersonByParam(name,age);</div><div class="line">        System.out.println(<span class="string">"result = "</span> + result);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Test</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">findByPNameNot</span><span class="params">()</span></span>&#123;</div><div class="line">        String name = <span class="string">"哈哈"</span>;</div><div class="line">        <span class="comment">//排序</span></div><div class="line">        Sort sort = <span class="keyword">new</span> Sort(Sort.Direction.DESC, <span class="string">"pId"</span>);</div><div class="line">        <span class="comment">//查询第一页，按一页三行分页</span></div><div class="line">        Pageable pageable = <span class="keyword">new</span> PageRequest(<span class="number">0</span>, <span class="number">3</span>, sort);</div><div class="line"></div><div class="line">        Page&lt;Person&gt; pages = personRepository.findByPNameNot(name,pageable);</div><div class="line">        System.out.println(<span class="string">"pages.getTotalElements()"</span> + pages.getTotalElements());</div><div class="line">        System.out.println(<span class="string">"pages.getTotalPages()"</span> + pages.getTotalPages());</div><div class="line">        Iterator&lt;Person&gt; it=pages.iterator();</div><div class="line">        <span class="keyword">while</span>(it.hasNext())&#123;</div><div class="line">            System.out.println(<span class="string">"value:"</span>+((Person)it.next()));</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Test</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">withNameQueryPage</span><span class="params">()</span></span>&#123;</div><div class="line">        String name = <span class="string">"王五"</span>;</div><div class="line">        <span class="comment">//排序</span></div><div class="line">        Sort sort = <span class="keyword">new</span> Sort(Sort.Direction.DESC, <span class="string">"pId"</span>);</div><div class="line">        <span class="comment">//查询第二页，按一页三行分页</span></div><div class="line">        Pageable pageable = <span class="keyword">new</span> PageRequest(<span class="number">1</span>, <span class="number">3</span>, sort);</div><div class="line"></div><div class="line">        Page&lt;Person&gt; pages = personRepository.withNameQueryPage(name,pageable);</div><div class="line">        System.out.println(<span class="string">"pages.getTotalElements()"</span> + pages.getTotalElements());</div><div class="line">        System.out.println(<span class="string">"pages.getTotalPages()"</span> + pages.getTotalPages());</div><div class="line">        Iterator&lt;Person&gt; it=pages.iterator();</div><div class="line">        <span class="keyword">while</span>(it.hasNext())&#123;</div><div class="line">            System.out.println(<span class="string">"value:"</span>+((Person)it.next()));</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<hr>
<h2 id="Spring-Boot项目配置Spring-Data-JPA的方法"><a href="#Spring-Boot项目配置Spring-Data-JPA的方法" class="headerlink" title="Spring Boot项目配置Spring Data JPA的方法"></a>Spring Boot项目配置Spring Data JPA的方法</h2><p>如果不想依赖于<strong>spring-boot-starter-data-jpa</strong>，我们依然可以通过配置类来实现Spring Boot对Spring Data JPA的支持。</p>
<p><strong>pom</strong>替换依赖<br>这里说明一下，实际上我们可以不用替换掉<strong>spring-boot-starter-data-jpa</strong>的依赖，替换掉的好处仅仅是减少对不需要的jar的依赖。</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.1.37<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javax.transaction<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jta<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.aspectj<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>aspectjweaver<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.8.9<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line"></div><div class="line"><span class="comment">&lt;!-- hibernate --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.hibernate<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>hibernate-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.3.5.Final<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.hibernate<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>hibernate-entitymanager<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.3.5.Final<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-orm<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.3.3.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.data<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-data-jpa<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.10.5.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line"></div><div class="line"><span class="comment">&lt;!--</span></div><div class="line">&lt;dependency&gt;</div><div class="line">    &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</div><div class="line">    &lt;artifactId&gt;spring-boot-starter-data-jpa&lt;/artifactId&gt;</div><div class="line">&lt;/dependency&gt;--&gt;</div></pre></td></tr></table></figure>
<p>自定义配置类：<strong>DataSourceConfig</strong></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.example;</div><div class="line"></div><div class="line"><span class="keyword">import</span> org.hibernate.jpa.HibernatePersistenceProvider;</div><div class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Value;</div><div class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</div><div class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</div><div class="line"><span class="keyword">import</span> org.springframework.data.jpa.repository.config.EnableJpaRepositories;</div><div class="line"><span class="keyword">import</span> org.springframework.jdbc.datasource.DriverManagerDataSource;</div><div class="line"><span class="keyword">import</span> org.springframework.orm.jpa.JpaTransactionManager;</div><div class="line"><span class="keyword">import</span> org.springframework.orm.jpa.JpaVendorAdapter;</div><div class="line"><span class="keyword">import</span> org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean;</div><div class="line"><span class="keyword">import</span> org.springframework.orm.jpa.vendor.Database;</div><div class="line"><span class="keyword">import</span> org.springframework.orm.jpa.vendor.HibernateJpaVendorAdapter;</div><div class="line"><span class="keyword">import</span> org.springframework.transaction.PlatformTransactionManager;</div><div class="line"><span class="keyword">import</span> org.springframework.transaction.annotation.EnableTransactionManagement;</div><div class="line"></div><div class="line"><span class="keyword">import</span> javax.sql.DataSource;</div><div class="line"></div><div class="line"><span class="meta">@Configuration</span></div><div class="line"><span class="meta">@EnableTransactionManagement</span>(proxyTargetClass = <span class="keyword">true</span>)</div><div class="line"><span class="comment">//开启Spring Data JPA的支持</span></div><div class="line"><span class="meta">@EnableJpaRepositories</span>(basePackages = <span class="string">"com.example.dao"</span>, entityManagerFactoryRef = <span class="string">"entityManagerFactory"</span>, transactionManagerRef = <span class="string">"transactionManager"</span>)</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DataSourceConfig</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="meta">@Value</span>(<span class="string">"$&#123;spring.datasource.driver-class-name&#125;"</span>)</div><div class="line">    String driverClass;</div><div class="line">    <span class="meta">@Value</span>(<span class="string">"$&#123;spring.datasource.url&#125;"</span>)</div><div class="line">    String url;</div><div class="line">    <span class="meta">@Value</span>(<span class="string">"$&#123;spring.datasource.username&#125;"</span>)</div><div class="line">    String userName;</div><div class="line">    <span class="meta">@Value</span>(<span class="string">"$&#123;spring.datasource.password&#125;"</span>)</div><div class="line">    String passWord;</div><div class="line"></div><div class="line">    <span class="meta">@Bean</span>(name = <span class="string">"dataSource"</span>)</div><div class="line">    <span class="function"><span class="keyword">public</span> DataSource <span class="title">dataSource</span><span class="params">()</span> </span>&#123;</div><div class="line"></div><div class="line">        DriverManagerDataSource dataSource = <span class="keyword">new</span> DriverManagerDataSource();</div><div class="line">        dataSource.setDriverClassName(driverClass);</div><div class="line">        dataSource.setUrl(url);</div><div class="line">        dataSource.setUsername(userName);</div><div class="line">        dataSource.setPassword(passWord);</div><div class="line">        <span class="keyword">return</span> dataSource;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">//  jpa事务管理器</span></div><div class="line">    <span class="meta">@Bean</span>(name = <span class="string">"transactionManager"</span>)</div><div class="line">    <span class="function"><span class="keyword">public</span> PlatformTransactionManager <span class="title">transactionManager</span><span class="params">()</span> </span>&#123;</div><div class="line">        JpaTransactionManager jpaTransactionManager = <span class="keyword">new</span> JpaTransactionManager();</div><div class="line">        jpaTransactionManager.setDataSource(dataSource());</div><div class="line">        jpaTransactionManager.setEntityManagerFactory(entityManagerFactory().getObject());</div><div class="line">        <span class="keyword">return</span> jpaTransactionManager;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Bean</span></div><div class="line">    <span class="function"><span class="keyword">public</span> JpaVendorAdapter <span class="title">jpaVendorAdapter</span><span class="params">()</span> </span>&#123;</div><div class="line">        HibernateJpaVendorAdapter adapter = <span class="keyword">new</span> HibernateJpaVendorAdapter();</div><div class="line">        adapter.setShowSql(<span class="keyword">true</span>);</div><div class="line">        adapter.setDatabase(Database.MYSQL);</div><div class="line">        adapter.setGenerateDdl(<span class="keyword">true</span>);</div><div class="line">        <span class="keyword">return</span> adapter;</div><div class="line">    &#125;</div><div class="line"></div><div class="line"></div><div class="line">    <span class="meta">@Bean</span>(name = <span class="string">"entityManagerFactory"</span>)</div><div class="line">    <span class="function"><span class="keyword">public</span> LocalContainerEntityManagerFactoryBean <span class="title">entityManagerFactory</span><span class="params">()</span> </span>&#123;</div><div class="line">        LocalContainerEntityManagerFactoryBean entityManager = <span class="keyword">new</span> LocalContainerEntityManagerFactoryBean();</div><div class="line">        entityManager.setDataSource(dataSource());</div><div class="line">        entityManager.setJpaVendorAdapter(jpaVendorAdapter());</div><div class="line">        entityManager.setPackagesToScan(<span class="string">"com.example.model"</span>);<span class="comment">// entity package</span></div><div class="line">        entityManager.setPersistenceProviderClass(HibernatePersistenceProvider.class);</div><div class="line">        <span class="keyword">return</span> entityManager;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>项目启动类中要关闭jpa的自动配置：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@SpringBootApplication</span>(exclude = &#123;DataSourceAutoConfiguration.class,JpaRepositoriesAutoConfiguration.class, HibernateJpaAutoConfiguration.class&#125;)</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JpaSingleDatasourceApplication</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">        SpringApplication.run(JpaSingleDatasourceApplication.class, args);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<hr>
<h2 id="Spring-Data-JPA与Atomikos整合实现多数据源事务管理"><a href="#Spring-Data-JPA与Atomikos整合实现多数据源事务管理" class="headerlink" title="Spring Data JPA与Atomikos整合实现多数据源事务管理"></a>Spring Data JPA与Atomikos整合实现多数据源事务管理</h2><p>spring-data-jpa虽说默认使用的是Hibernate，但是其与Atomikos整合方式与Hibernate略有不同。</p>
<p><strong>pom</strong></p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.atomikos<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>transactions-jdbc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.0.4<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.atomikos<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>transactions-jta<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.0.4<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.atomikos<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>transactions<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.0.4<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.atomikos<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>atomikos-util<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.0.4<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line"></div><div class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javax.transaction<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jta<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line"></div><div class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.aspectj<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>aspectjweaver<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.8.9<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line"></div><div class="line">        <span class="comment">&lt;!-- hibernate --&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.hibernate<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>hibernate-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.3.5.Final<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line"></div><div class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-orm<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.3.3.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line"></div><div class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.data<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-data-jpa<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.10.5.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line"></div><div class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.hibernate<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>hibernate-entitymanager<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.3.5.Final<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line"></div><div class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.1.37<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line"></div><div class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line"></div><div class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div></pre></td></tr></table></figure>
<p><strong>application.properties</strong></p>
<figure class="highlight yml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#datasource</span></div><div class="line">spring.datasource.driver-class-name=com.mysql.jdbc.Driver</div><div class="line">spring.datasource.url=jdbc:mysql://localhost:<span class="number">3306</span>/springboot1?useUnicode=<span class="literal">true</span>&amp;characterEncoding=utf<span class="bullet">-8</span></div><div class="line">spring.datasource.username=root</div><div class="line">spring.datasource.password=newpwd</div><div class="line"></div><div class="line"><span class="comment">#datasource2</span></div><div class="line">spring.datasource.driver-class-name2=com.mysql.jdbc.Driver</div><div class="line">spring.datasource.url2=jdbc:mysql://localhost:<span class="number">3306</span>/springboot2?useUnicode=<span class="literal">true</span>&amp;characterEncoding=utf<span class="bullet">-8</span></div><div class="line">spring.datasource.username2=root</div><div class="line">spring.datasource.password2=newpwd</div></pre></td></tr></table></figure>
<p><strong>MainConfig</strong>：用于注册Atomikos事务管理器</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.example;</div><div class="line"></div><div class="line"><span class="keyword">import</span> com.atomikos.icatch.jta.UserTransactionImp;</div><div class="line"><span class="keyword">import</span> com.atomikos.icatch.jta.UserTransactionManager;</div><div class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</div><div class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</div><div class="line"><span class="keyword">import</span> org.springframework.context.annotation.DependsOn;</div><div class="line"><span class="keyword">import</span> org.springframework.transaction.PlatformTransactionManager;</div><div class="line"><span class="keyword">import</span> org.springframework.transaction.jta.JtaTransactionManager;</div><div class="line"></div><div class="line"><span class="keyword">import</span> javax.transaction.TransactionManager;</div><div class="line"><span class="keyword">import</span> javax.transaction.UserTransaction;</div><div class="line"></div><div class="line"><span class="meta">@Configuration</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainConfig</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="meta">@Bean</span>(name = <span class="string">"userTransaction"</span>)</div><div class="line">    <span class="function"><span class="keyword">public</span> UserTransaction <span class="title">userTransaction</span><span class="params">()</span> <span class="keyword">throws</span> Throwable </span>&#123;</div><div class="line">        UserTransactionImp userTransactionImp = <span class="keyword">new</span> UserTransactionImp();</div><div class="line">        userTransactionImp.setTransactionTimeout(<span class="number">10000</span>);</div><div class="line">        <span class="keyword">return</span> userTransactionImp;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Bean</span>(name = <span class="string">"atomikosTransactionManager"</span>, initMethod = <span class="string">"init"</span>, destroyMethod = <span class="string">"close"</span>)</div><div class="line">    <span class="function"><span class="keyword">public</span> TransactionManager <span class="title">atomikosTransactionManager</span><span class="params">()</span> <span class="keyword">throws</span> Throwable </span>&#123;</div><div class="line">        UserTransactionManager userTransactionManager = <span class="keyword">new</span> UserTransactionManager();</div><div class="line">        userTransactionManager.setForceShutdown(<span class="keyword">true</span>);</div><div class="line">        <span class="keyword">return</span> userTransactionManager;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Bean</span>(name = <span class="string">"transactionManager"</span>)</div><div class="line">    <span class="meta">@DependsOn</span>(&#123; <span class="string">"userTransaction"</span>, <span class="string">"atomikosTransactionManager"</span> &#125;)</div><div class="line">    <span class="function"><span class="keyword">public</span> PlatformTransactionManager <span class="title">transactionManager</span><span class="params">()</span> <span class="keyword">throws</span> Throwable </span>&#123;</div><div class="line">        UserTransaction userTransaction = userTransaction();</div><div class="line">        TransactionManager atomikosTransactionManager = atomikosTransactionManager();</div><div class="line">        JtaTransactionManager jtaTransactionManager = <span class="keyword">new</span> JtaTransactionManager(userTransaction, atomikosTransactionManager);</div><div class="line">        jtaTransactionManager.setAllowCustomIsolationLevels(<span class="keyword">true</span>);</div><div class="line">        <span class="keyword">return</span> jtaTransactionManager;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">//上面三个都认识，下面说一下这个bean</span></div><div class="line">    <span class="meta">@Bean</span>(name = <span class="string">"atomikosJtaPlatfom"</span>)</div><div class="line">    <span class="function"><span class="keyword">public</span> AtomikosJtaPlatfom <span class="title">atomikosJtaPlatfom</span><span class="params">()</span></span>&#123;</div><div class="line">        AtomikosJtaPlatfom atomikosJtaPlatfom = <span class="keyword">new</span> AtomikosJtaPlatfom();</div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            atomikosJtaPlatfom.setTm(atomikosTransactionManager());</div><div class="line">            atomikosJtaPlatfom.setUt(userTransaction());</div><div class="line">        &#125; <span class="keyword">catch</span> (Throwable throwable) &#123;</div><div class="line">            throwable.printStackTrace();</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="keyword">return</span> atomikosJtaPlatfom;</div><div class="line"></div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>配置JPA的LocalContainerEntityManagerFactoryBean时候，如果要使其能够支持JTA事务，则在配置其<strong>JpaProperties</strong>时需要为其指定如下参数：</p>
<blockquote>
<p>hibernate.transaction.jta.platform<br>hibernate.current_session_context_class<br>hibernate.transaction.factory_class</p>
</blockquote>
<p>后面我们配置LocalContainerEntityManagerFactoryBean的时候会看到相应的配置，<br>这里要说的是，<code>hibernate.transaction.jta.platform</code>需要指定<code>org.hibernate.engine.transaction.jta.platform.spi.JtaPlatform</code>的实现类，其主要功能就是要绑定<strong>javax.transaction.TransactionManager</strong>和<strong>javax.transaction.UserTransaction</strong>。</p>
<p>spring-data-jpa没有提供该实现类，但是hibernate提供了许多实现类，spring boot也提供了一个实现类–<strong>SpringJtaPlatform</strong>，<br>但是这些实现类都是通过构造函数绑定<strong>javax.transaction.TransactionManager</strong>和<strong>javax.transaction.UserTransaction</strong>，而没有提供缺省的构造方法，这就导致通过属性指定<code>hibernate.transaction.jta.platform</code>时，spring不能初始化该实现类（可能是我还没有搞明白吧）。</p>
<p>所以，可以自己创建一个实现类，并通过set方法来绑定<strong>javax.transaction.TransactionManager</strong>和<strong>javax.transaction.UserTransaction</strong>。<br>这就是<strong>AtomikosJtaPlatfom</strong></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.example;</div><div class="line"></div><div class="line"><span class="keyword">import</span> org.hibernate.engine.transaction.jta.platform.internal.AbstractJtaPlatform;</div><div class="line"></div><div class="line"><span class="keyword">import</span> javax.transaction.TransactionManager;</div><div class="line"><span class="keyword">import</span> javax.transaction.UserTransaction;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AtomikosJtaPlatfom</span> <span class="keyword">extends</span> <span class="title">AbstractJtaPlatform</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> UserTransaction ut;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> TransactionManager tm;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">protected</span> TransactionManager <span class="title">locateTransactionManager</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> tm;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">protected</span> UserTransaction <span class="title">locateUserTransaction</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> ut;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> UserTransaction <span class="title">getUt</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> ut;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setUt</span><span class="params">(UserTransaction ut)</span> </span>&#123;</div><div class="line">        AtomikosJtaPlatfom.ut = ut;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> TransactionManager <span class="title">getTm</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> tm;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setTm</span><span class="params">(TransactionManager tm)</span> </span>&#123;</div><div class="line">        AtomikosJtaPlatfom.tm = tm;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>接下来需要在配置类中注册<strong>LocalContainerEntityManagerFactoryBean</strong>，<br>由于<em>@EnableJpaRepositories</em>注解不能在同一个配置类上声明两次，所以就按数据源进行分别设置：</p>
<p><strong>JpaConfigDs1</strong>：数据源1</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.example;</div><div class="line"></div><div class="line"><span class="keyword">import</span> com.atomikos.jdbc.AtomikosDataSourceBean;</div><div class="line"><span class="keyword">import</span> com.mysql.jdbc.jdbc2.optional.MysqlXADataSource;</div><div class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Value;</div><div class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</div><div class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</div><div class="line"><span class="keyword">import</span> org.springframework.context.annotation.DependsOn;</div><div class="line"><span class="keyword">import</span> org.springframework.data.jpa.repository.config.EnableJpaRepositories;</div><div class="line"><span class="keyword">import</span> org.springframework.orm.jpa.JpaVendorAdapter;</div><div class="line"><span class="keyword">import</span> org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean;</div><div class="line"><span class="keyword">import</span> org.springframework.orm.jpa.vendor.Database;</div><div class="line"><span class="keyword">import</span> org.springframework.orm.jpa.vendor.HibernateJpaVendorAdapter;</div><div class="line"><span class="keyword">import</span> org.springframework.transaction.annotation.EnableTransactionManagement;</div><div class="line"></div><div class="line"><span class="keyword">import</span> javax.sql.DataSource;</div><div class="line"><span class="keyword">import</span> java.util.Properties;</div><div class="line"></div><div class="line"><span class="meta">@Configuration</span></div><div class="line"><span class="meta">@EnableTransactionManagement</span>(proxyTargetClass = <span class="keyword">true</span>)</div><div class="line"><span class="comment">//指定数据源1的Repository路径，数据源1的entityManagerFactory，事务是公共事务</span></div><div class="line"><span class="meta">@EnableJpaRepositoryies</span>(basePackages = <span class="string">"com.example.dao.ds1"</span>, entityManagerFactoryRef = <span class="string">"entityManagerFactory"</span>, transactionManagerRef = <span class="string">"transactionManager"</span>)</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JpaConfigDs1</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="meta">@Value</span>(<span class="string">"$&#123;spring.datasource.driver-class-name&#125;"</span>)</div><div class="line">    String driverClass;</div><div class="line">    <span class="meta">@Value</span>(<span class="string">"$&#123;spring.datasource.url&#125;"</span>)</div><div class="line">    String url;</div><div class="line">    <span class="meta">@Value</span>(<span class="string">"$&#123;spring.datasource.username&#125;"</span>)</div><div class="line">    String userName;</div><div class="line">    <span class="meta">@Value</span>(<span class="string">"$&#123;spring.datasource.password&#125;"</span>)</div><div class="line">    String passWord;</div><div class="line"></div><div class="line"></div><div class="line">    <span class="meta">@Bean</span>(name = <span class="string">"dataSource"</span>, initMethod = <span class="string">"init"</span>, destroyMethod = <span class="string">"close"</span>)</div><div class="line">    <span class="function"><span class="keyword">public</span> DataSource <span class="title">dataSource</span><span class="params">()</span> </span>&#123;</div><div class="line">        System.out.println(<span class="string">"dataSource init"</span>);</div><div class="line">        MysqlXADataSource mysqlXaDataSource = <span class="keyword">new</span> MysqlXADataSource();</div><div class="line">        mysqlXaDataSource.setUrl(url);</div><div class="line">        mysqlXaDataSource.setPassword(passWord);</div><div class="line">        mysqlXaDataSource.setUser(userName);</div><div class="line">        mysqlXaDataSource.setPinGlobalTxToPhysicalConnection(<span class="keyword">true</span>);</div><div class="line"></div><div class="line">        AtomikosDataSourceBean xaDataSource = <span class="keyword">new</span> AtomikosDataSourceBean();</div><div class="line">        xaDataSource.setXaDataSource(mysqlXaDataSource);</div><div class="line">        xaDataSource.setUniqueResourceName(<span class="string">"dataSource"</span>);</div><div class="line">        xaDataSource.setMinPoolSize(<span class="number">10</span>);</div><div class="line">        xaDataSource.setPoolSize(<span class="number">10</span>);</div><div class="line">        xaDataSource.setMaxPoolSize(<span class="number">30</span>);</div><div class="line">        xaDataSource.setBorrowConnectionTimeout(<span class="number">60</span>);</div><div class="line">        xaDataSource.setReapTimeout(<span class="number">20</span>);</div><div class="line">        xaDataSource.setMaxIdleTime(<span class="number">60</span>);</div><div class="line">        xaDataSource.setMaintenanceInterval(<span class="number">60</span>);</div><div class="line"></div><div class="line">        <span class="keyword">return</span> xaDataSource;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Bean</span>(name = <span class="string">"jpaVendorAdapter"</span>)</div><div class="line">    <span class="function"><span class="keyword">public</span> JpaVendorAdapter <span class="title">jpaVendorAdapter</span><span class="params">()</span> </span>&#123;</div><div class="line">        System.out.println(<span class="string">"jpaVendorAdapter init"</span>);</div><div class="line">        HibernateJpaVendorAdapter adapter = <span class="keyword">new</span> HibernateJpaVendorAdapter();</div><div class="line">        adapter.setShowSql(<span class="keyword">true</span>);</div><div class="line">        adapter.setDatabase(Database.MYSQL);</div><div class="line">        adapter.setDatabasePlatform(<span class="string">"org.hibernate.dialect.MySQLDialect"</span>);</div><div class="line">        adapter.setGenerateDdl(<span class="keyword">true</span>);</div><div class="line">        <span class="keyword">return</span> adapter;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Bean</span>(name = <span class="string">"entityManagerFactory"</span>)</div><div class="line">    <span class="meta">@DependsOn</span>(&#123;<span class="string">"atomikosJtaPlatfom"</span>&#125;) <span class="comment">//需要先注册atomikosJtaPlatfom</span></div><div class="line">    <span class="function"><span class="keyword">public</span> LocalContainerEntityManagerFactoryBean <span class="title">entityManagerFactory</span><span class="params">()</span> </span>&#123;</div><div class="line">        System.out.println(<span class="string">"entityManagerFactory init"</span>);</div><div class="line">        LocalContainerEntityManagerFactoryBean entityManager = <span class="keyword">new</span> LocalContainerEntityManagerFactoryBean();</div><div class="line"></div><div class="line">        entityManager.setJpaVendorAdapter(jpaVendorAdapter());</div><div class="line">        <span class="comment">// entity package</span></div><div class="line">        entityManager.setPackagesToScan(<span class="string">"com.example.model.ds1"</span>);</div><div class="line">        entityManager.setJtaDataSource(dataSource());</div><div class="line"></div><div class="line">        Properties properties = <span class="keyword">new</span> Properties();       </div><div class="line">        properties.put(<span class="string">"hibernate.dialect"</span>, <span class="string">"org.hibernate.dialect.MySQLDialect"</span>);</div><div class="line">        properties.put(<span class="string">"hibernate.show_sql"</span>, <span class="string">"true"</span>);</div><div class="line">        properties.put(<span class="string">"hibernate.format_sql"</span>, <span class="string">"true"</span>);</div><div class="line"></div><div class="line">        <span class="comment">//jta设置</span></div><div class="line">        properties.put(<span class="string">"hibernate.current_session_context_class"</span>, <span class="string">"jta"</span>);</div><div class="line">        properties.put(<span class="string">"hibernate.transaction.factory_class"</span>, <span class="string">"org.hibernate.engine.transaction.internal.jta.CMTTransactionFactory"</span>);</div><div class="line">        <span class="comment">//这里指定我们自己创建的AtomikosJtaPlatfom</span></div><div class="line">        properties.put(<span class="string">"hibernate.transaction.jta.platform"</span>,<span class="string">"com.example.AtomikosJtaPlatfom"</span>);</div><div class="line">        entityManager.setJpaProperties(properties);</div><div class="line">        <span class="keyword">return</span> entityManager;</div><div class="line"></div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><strong>JpaConfigDs2</strong>：数据源2</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.example;</div><div class="line"></div><div class="line"><span class="keyword">import</span> com.atomikos.jdbc.AtomikosDataSourceBean;</div><div class="line"><span class="keyword">import</span> com.mysql.jdbc.jdbc2.optional.MysqlXADataSource;</div><div class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Value;</div><div class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</div><div class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</div><div class="line"><span class="keyword">import</span> org.springframework.context.annotation.DependsOn;</div><div class="line"><span class="keyword">import</span> org.springframework.data.jpa.repository.config.EnableJpaRepositories;</div><div class="line"><span class="keyword">import</span> org.springframework.orm.jpa.JpaVendorAdapter;</div><div class="line"><span class="keyword">import</span> org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean;</div><div class="line"><span class="keyword">import</span> org.springframework.orm.jpa.vendor.Database;</div><div class="line"><span class="keyword">import</span> org.springframework.orm.jpa.vendor.HibernateJpaVendorAdapter;</div><div class="line"><span class="keyword">import</span> org.springframework.transaction.annotation.EnableTransactionManagement;</div><div class="line"></div><div class="line"><span class="keyword">import</span> javax.sql.DataSource;</div><div class="line"><span class="keyword">import</span> java.util.Properties;</div><div class="line"></div><div class="line"><span class="meta">@Configuration</span></div><div class="line"><span class="meta">@EnableTransactionManagement</span>(proxyTargetClass = <span class="keyword">true</span>)</div><div class="line"><span class="meta">@EnableJpaRepositories</span>(basePackages = <span class="string">"com.example.dao.ds2"</span>, entityManagerFactoryRef = <span class="string">"entityManagerFactory2"</span>, transactionManagerRef = <span class="string">"transactionManager"</span>)</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JpaConfigDs2</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="meta">@Value</span>(<span class="string">"$&#123;spring.datasource.driver-class-name2&#125;"</span>)</div><div class="line">    String driverClass;</div><div class="line">    <span class="meta">@Value</span>(<span class="string">"$&#123;spring.datasource.url2&#125;"</span>)</div><div class="line">    String url;</div><div class="line">    <span class="meta">@Value</span>(<span class="string">"$&#123;spring.datasource.username2&#125;"</span>)</div><div class="line">    String userName;</div><div class="line">    <span class="meta">@Value</span>(<span class="string">"$&#123;spring.datasource.password2&#125;"</span>)</div><div class="line">    String passWord;</div><div class="line"></div><div class="line"></div><div class="line">    <span class="meta">@Bean</span>(name = <span class="string">"dataSource2"</span>, initMethod = <span class="string">"init"</span>, destroyMethod = <span class="string">"close"</span>)</div><div class="line">    <span class="function"><span class="keyword">public</span> DataSource <span class="title">dataSource</span><span class="params">()</span> </span>&#123;</div><div class="line">        System.out.println(<span class="string">"dataSource2 init"</span>);</div><div class="line">        MysqlXADataSource mysqlXaDataSource = <span class="keyword">new</span> MysqlXADataSource();</div><div class="line">        mysqlXaDataSource.setUrl(url);</div><div class="line">        mysqlXaDataSource.setPassword(passWord);</div><div class="line">        mysqlXaDataSource.setUser(userName);</div><div class="line">        mysqlXaDataSource.setPinGlobalTxToPhysicalConnection(<span class="keyword">true</span>);</div><div class="line"></div><div class="line">        AtomikosDataSourceBean xaDataSource = <span class="keyword">new</span> AtomikosDataSourceBean();</div><div class="line">        xaDataSource.setXaDataSource(mysqlXaDataSource);</div><div class="line">        xaDataSource.setUniqueResourceName(<span class="string">"dataSource2"</span>);</div><div class="line">        xaDataSource.setMinPoolSize(<span class="number">10</span>);</div><div class="line">        xaDataSource.setPoolSize(<span class="number">10</span>);</div><div class="line">        xaDataSource.setMaxPoolSize(<span class="number">30</span>);</div><div class="line">        xaDataSource.setBorrowConnectionTimeout(<span class="number">60</span>);</div><div class="line">        xaDataSource.setReapTimeout(<span class="number">20</span>);</div><div class="line">        xaDataSource.setMaxIdleTime(<span class="number">60</span>);</div><div class="line">        xaDataSource.setMaintenanceInterval(<span class="number">60</span>);</div><div class="line"></div><div class="line">        <span class="keyword">return</span> xaDataSource;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Bean</span>(name = <span class="string">"jpaVendorAdapter2"</span>)</div><div class="line">    <span class="function"><span class="keyword">public</span> JpaVendorAdapter <span class="title">jpaVendorAdapter</span><span class="params">()</span> </span>&#123;</div><div class="line">        System.out.println(<span class="string">"jpaVendorAdapter2 init"</span>);</div><div class="line">        HibernateJpaVendorAdapter adapter = <span class="keyword">new</span> HibernateJpaVendorAdapter();</div><div class="line">        adapter.setShowSql(<span class="keyword">true</span>);</div><div class="line">        adapter.setDatabase(Database.MYSQL);</div><div class="line">        adapter.setDatabasePlatform(<span class="string">"org.hibernate.dialect.MySQLDialect"</span>);</div><div class="line">        adapter.setGenerateDdl(<span class="keyword">true</span>);</div><div class="line">        <span class="keyword">return</span> adapter;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Bean</span>(name = <span class="string">"entityManagerFactory2"</span>)</div><div class="line">    <span class="meta">@DependsOn</span>(&#123;<span class="string">"atomikosJtaPlatfom"</span>&#125;)</div><div class="line">    <span class="function"><span class="keyword">public</span> LocalContainerEntityManagerFactoryBean <span class="title">entityManagerFactory</span><span class="params">()</span> </span>&#123;</div><div class="line">        System.out.println(<span class="string">"entityManagerFactory2 init"</span>);</div><div class="line">        LocalContainerEntityManagerFactoryBean entityManager = <span class="keyword">new</span> LocalContainerEntityManagerFactoryBean();</div><div class="line"></div><div class="line"></div><div class="line">        entityManager.setJpaVendorAdapter(jpaVendorAdapter());</div><div class="line">        entityManager.setPackagesToScan(<span class="string">"com.example.model.ds2"</span>);<span class="comment">// entity package</span></div><div class="line">        entityManager.setJtaDataSource(dataSource());</div><div class="line"></div><div class="line">        Properties properties = <span class="keyword">new</span> Properties();</div><div class="line">        properties.put(<span class="string">"hibernate.transaction.jta.platform"</span>,<span class="string">"com.example.AtomikosJtaPlatfom"</span>);</div><div class="line"></div><div class="line">        properties.put(<span class="string">"hibernate.dialect"</span>, <span class="string">"org.hibernate.dialect.MySQLDialect"</span>);</div><div class="line">        properties.put(<span class="string">"hibernate.show_sql"</span>, <span class="string">"true"</span>);</div><div class="line">        properties.put(<span class="string">"hibernate.format_sql"</span>, <span class="string">"true"</span>);</div><div class="line">        properties.put(<span class="string">"hibernate.current_session_context_class"</span>, <span class="string">"jta"</span>);</div><div class="line">        properties.put(<span class="string">"hibernate.transaction.factory_class"</span>, <span class="string">"org.hibernate.engine.transaction.internal.jta.CMTTransactionFactory"</span>);</div><div class="line"></div><div class="line">        entityManager.setJpaProperties(properties);</div><div class="line">        <span class="keyword">return</span> entityManager;</div><div class="line"></div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>其它方面与单数据源使用JPA没有区别，这里就不罗列代码了。</p>
<hr>
<h2 id="扩展JPA的方法"><a href="#扩展JPA的方法" class="headerlink" title="扩展JPA的方法"></a>扩展JPA的方法</h2><p>上面我们介绍过，一般情况下我们的Repository接口继承JpaRepository，所以可以默认使用JpaRepository提供的所有方法，如果提供的方法不满足需求时，可以在自己的Repository中通过命名规则或者@Query注解等实现方法的扩展。那么，我们如果希望将一些自己扩展公共的方法放在父类中，以便我们所有的Repository都能拥有该扩展功能，该如何实现呢？</p>
<p>本例只举例说明，实现的功能为接收查询条件的分页查询，查询时按传递实体对象的属性进行处理，如果是字符串就按模糊匹配，否则就按精确匹配。</p>
<h3 id="定义父类接口–BaseJpaRepository"><a href="#定义父类接口–BaseJpaRepository" class="headerlink" title="定义父类接口–BaseJpaRepository"></a>定义父类接口–BaseJpaRepository</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@NoRepositoryBean</span> <span class="comment">//说明这不是一个需要被扫描到的Repository</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">BaseJpaRepository</span>&lt;<span class="title">T</span>, <span class="title">ID</span> <span class="keyword">extends</span> <span class="title">Serializable</span>&gt; <span class="keyword">extends</span> <span class="title">JpaRepository</span>&lt;<span class="title">T</span>, <span class="title">ID</span>&gt;,<span class="title">JpaSpecificationExecutor</span>&lt;<span class="title">T</span>&gt; </span>&#123;</div><div class="line"></div><div class="line">    <span class="function">Page&lt;T&gt; <span class="title">findByAuto</span><span class="params">(T example, Pageable pageable)</span></span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="创建实现类–BaseJpaRepositoryImpl"><a href="#创建实现类–BaseJpaRepositoryImpl" class="headerlink" title="创建实现类–BaseJpaRepositoryImpl"></a>创建实现类–BaseJpaRepositoryImpl</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BaseJpaRepositoryImpl</span>&lt;<span class="title">T</span>, <span class="title">ID</span> <span class="keyword">extends</span> <span class="title">Serializable</span>&gt; <span class="keyword">extends</span> <span class="title">SimpleJpaRepository</span>&lt;<span class="title">T</span>, <span class="title">ID</span>&gt; <span class="keyword">implements</span> <span class="title">BaseJpaRepository</span>&lt;<span class="title">T</span>, <span class="title">ID</span>&gt; </span>&#123;</div><div class="line"></div><div class="line">    <span class="comment">//通过构造方法初始化EntityManager</span></div><div class="line">    <span class="keyword">private</span> <span class="keyword">final</span> EntityManager entityManager;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">BaseJpaRepositoryImpl</span><span class="params">(Class&lt;T&gt; domainClass, EntityManager entityManager)</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>(domainClass, entityManager);</div><div class="line">        <span class="keyword">this</span>.entityManager = entityManager;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">//具体方法实现，这里使用了一个自定义工具类BaseSpecs</span></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> Page&lt;T&gt; <span class="title">findByAuto</span><span class="params">(T example, Pageable pageable)</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> findAll(BaseSpecs.byAuto(entityManager,example),pageable);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>BaseSpecs的byAuto方法负责封装查询对象Specification，按传递实体对象的属性进行处理，如果是字符串就按模糊匹配，否则就按精确匹配。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BaseSpecs</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; <span class="function">Specification&lt;T&gt; <span class="title">byAuto</span><span class="params">(<span class="keyword">final</span> EntityManager entityManager, <span class="keyword">final</span> T example)</span></span>&#123;</div><div class="line">        <span class="keyword">final</span> Class&lt;T&gt; type = (Class&lt;T&gt;) example.getClass();</div><div class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Specification&lt;T&gt;() &#123;</div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> Predicate <span class="title">toPredicate</span><span class="params">(Root&lt;T&gt; root, CriteriaQuery&lt;?&gt; criteriaQuery, CriteriaBuilder criteriaBuilder)</span> </span>&#123;</div><div class="line"></div><div class="line">                List&lt;Predicate&gt; predicateList = <span class="keyword">new</span> ArrayList&lt;&gt;();</div><div class="line">                EntityType&lt;T&gt; entityType = entityManager.getMetamodel().entity(type);</div><div class="line"></div><div class="line">                <span class="keyword">for</span>(Attribute&lt;T,?&gt; attribute : entityType.getDeclaredAttributes())&#123;</div><div class="line">                    Object attrValue = getValue(example,attribute);</div><div class="line">                    <span class="keyword">if</span>(attrValue != <span class="keyword">null</span>)&#123;</div><div class="line">                        <span class="keyword">if</span>(attribute.getJavaType() == String.class)&#123;</div><div class="line">                            <span class="keyword">if</span>(!StringUtils.isEmpty(attrValue))&#123;</div><div class="line">                                predicateList.add(criteriaBuilder.like(root.get(attribute(entityType,attribute.getName(),String.class)),pattern((String)attrValue)));</div><div class="line">                            &#125;</div><div class="line">                        &#125;<span class="keyword">else</span>&#123;</div><div class="line">                            predicateList.add(criteriaBuilder.equal(root.get(attribute(entityType,attribute.getName(),attrValue.getClass())),attrValue));</div><div class="line">                        &#125;</div><div class="line">                    &#125;</div><div class="line">                &#125;</div><div class="line">                <span class="keyword">return</span> predicateList.isEmpty()?criteriaBuilder.conjunction():criteriaBuilder.and(toArray(predicateList));</div><div class="line">            &#125;</div><div class="line"></div><div class="line">            <span class="keyword">private</span> &lt;T&gt; <span class="function">Object <span class="title">getValue</span><span class="params">(T example,Attribute&lt;T,?&gt; attr)</span></span>&#123;</div><div class="line">                <span class="keyword">return</span> ReflectionUtils.getField((Field)attr.getJavaMember(),example);</div><div class="line">            &#125;</div><div class="line"></div><div class="line">            <span class="keyword">private</span> &lt;E,T&gt; <span class="function">SingularAttribute&lt;T,E&gt; <span class="title">attribute</span><span class="params">(EntityType&lt;T&gt; entityType,String fieldName,Class&lt;E&gt; fieldClass)</span></span>&#123;</div><div class="line">                <span class="keyword">return</span> entityType.getDeclaredSingularAttribute(fieldName,fieldClass);</div><div class="line">            &#125;</div><div class="line"></div><div class="line">            <span class="keyword">private</span> Predicate[] toArray(List&lt;Predicate&gt; predicateList)&#123;</div><div class="line">                Predicate[] array = predicateList.toArray(<span class="keyword">new</span> Predicate[predicateList.size()]);</div><div class="line">                <span class="keyword">return</span> array;</div><div class="line">            &#125;</div><div class="line">        &#125;;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">private</span> String <span class="title">pattern</span><span class="params">(String str)</span></span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="string">"%"</span> + str + <span class="string">"%"</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<hr>
<p><strong>说明</strong><br>当我们的Repository实现的是JpaRepository的时候，<em>Spring-data-jpa</em>会为我们动态使用JpaRepository的实现类<em>SimpleJpaRepository</em>，这也是为什么我们只需要创建接口而不需要提供实现类。</p>
<p>这里，我们创建了新的父类接口<em>BaseJpaRepository</em>，并为其提供了实现类<em>BaseJpaRepositoryImpl</em>，所以我们要告诉<em>Spring-data-jpa</em>要使用我们自己的实现类，而不能去使用<em>SimpleJpaRepository</em>，所以我们要改写<em>JpaRepositoryFactoryBean</em>；</p>
<p>创建一个<strong>BaseRepositoryFactoryBean</strong>继承于<em>JpaRepositoryFactoryBean</em>：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BaseRepositoryFactoryBean</span>&lt;<span class="title">T</span> <span class="keyword">extends</span> <span class="title">JpaRepository</span>&lt;<span class="title">S</span>, <span class="title">ID</span>&gt;, <span class="title">S</span>, <span class="title">ID</span> <span class="keyword">extends</span> <span class="title">Serializable</span>&gt;   <span class="keyword">extends</span> <span class="title">JpaRepositoryFactoryBean</span>&lt;<span class="title">T</span>,<span class="title">S</span>,<span class="title">ID</span>&gt; </span>&#123;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">protected</span> RepositoryFactorySupport <span class="title">createRepositoryFactory</span><span class="params">(EntityManager entityManager)</span>    </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">new</span> BaseRepositoryFactory(entityManager);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">BaseRepositoryFactory</span> <span class="keyword">extends</span> <span class="title">JpaRepositoryFactory</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">BaseRepositoryFactory</span><span class="params">(EntityManager entityManager)</span></span>&#123;</div><div class="line">        <span class="keyword">super</span>(entityManager);</div><div class="line">    &#125;</div><div class="line"></div><div class="line"></div><div class="line">    <span class="comment">//指定实现类</span></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="keyword">protected</span> &lt;T, ID extends Serializable&gt; SimpleJpaRepository&lt;?, ?&gt; getTargetRepository(RepositoryInformation information, EntityManager entityManager) &#123;</div><div class="line">        BaseJpaRepositoryImpl customRepository = <span class="keyword">new</span> BaseJpaRepositoryImpl&lt;T,ID&gt;((Class&lt;T&gt;)information.getDomainType(),entityManager);</div><div class="line">        <span class="keyword">return</span> customRepository;</div><div class="line"></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">//指定实现类类型</span></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="keyword">protected</span> Class&lt;?&gt; getRepositoryBaseClass(RepositoryMetadata metadata)     </div><div class="line">        <span class="keyword">return</span> BaseJpaRepositoryImpl.class;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>并且在<em>@EnableJpaRepositories</em>注解中进行指定：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@EnableJpaRepositories</span>(basePackages = <span class="string">"com.example.dao"</span>, entityManagerFactoryRef = <span class="string">"entityManagerFactory"</span>, transactionManagerRef = <span class="string">"transactionManager"</span>,repositoryFactoryBeanClass=BaseRepositoryFactoryBean.class)</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JpaConfig</span> </span>&#123;</div><div class="line">    <span class="comment">//………………</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="自定义Repository继承BaseJpaRepository"><a href="#自定义Repository继承BaseJpaRepository" class="headerlink" title="自定义Repository继承BaseJpaRepository"></a>自定义Repository继承BaseJpaRepository</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">PersonRepository</span> <span class="keyword">extends</span> <span class="title">BaseJpaRepository</span>&lt;<span class="title">Person</span>, <span class="title">Integer</span>&gt; </span>&#123;</div><div class="line">    <span class="comment">//………依然可以在该接口中对功能进行扩展………</span></div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@RunWith</span>(SpringRunner.class)</div><div class="line"><span class="meta">@SpringBootTest</span></div><div class="line"><span class="meta">@Transactional</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JpaExtendApplicationTests</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="meta">@Autowired</span></div><div class="line">    <span class="keyword">private</span> PersonRepository personRepository;</div><div class="line"></div><div class="line">    <span class="meta">@Test</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">findByAuto</span><span class="params">()</span> </span>&#123;</div><div class="line">        Person person = <span class="keyword">new</span> Person();</div><div class="line">        person.setpName(<span class="string">"王五"</span>);</div><div class="line">        person.setpAge(<span class="number">18</span>);</div><div class="line">        Sort sort = <span class="keyword">new</span> Sort(Sort.Direction.DESC, <span class="string">"pId"</span>);</div><div class="line">        <span class="comment">//查询第一页，按一页三行分页</span></div><div class="line">        Pageable pageable = <span class="keyword">new</span> PageRequest(<span class="number">0</span>, <span class="number">3</span>, sort);</div><div class="line">        Page&lt;Person&gt; list = personRepository.findByAuto(person,pageable);</div><div class="line">        <span class="keyword">for</span>(Person p:list)&#123;</div><div class="line">            System.out.println(p);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<hr>
<p>本文示例代码下载地址：<a href="https://github.com/hanqunfeng/SpringBootStudy" target="_blank" rel="external">https://github.com/hanqunfeng/SpringBootStudy</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;摘要&quot;&gt;&lt;a href=&quot;#摘要&quot; class=&quot;headerlink&quot; title=&quot;摘要&quot;&gt;&lt;/a&gt;摘要&lt;/h2&gt;&lt;p&gt;看完本文你将掌握如下知识点：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Spring Boot项目中JPA的配置及使用方法&lt;/li&gt;
&lt;li&gt;Spring Boot项目配置Spring Data JPA的方法&lt;/li&gt;
&lt;li&gt;Spring Data JPA与Atomikos整合实现多数据源事务管理&lt;/li&gt;
&lt;li&gt;扩展JPA的方法&lt;/li&gt;
&lt;/ol&gt;
    
    </summary>
    
      <category term="技术" scheme="http://blog.hanqunfeng.com/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="Spring Boot" scheme="http://blog.hanqunfeng.com/tags/Spring-Boot/"/>
    
  </entry>
  
  <entry>
    <title>Spring Boot学习笔记05--Mybatis+通用Mapper+分页插件</title>
    <link href="http://blog.hanqunfeng.com/2016/12/20/spring-boot-study-mybatis/"/>
    <id>http://blog.hanqunfeng.com/2016/12/20/spring-boot-study-mybatis/</id>
    <published>2016-12-20T15:33:15.000Z</published>
    <updated>2016-12-20T10:55:28.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="摘要"><a href="#摘要" class="headerlink" title="摘要"></a>摘要</h2><p>看完本文你将掌握如下知识点：</p>
<ol>
<li>Spring Boot项目中，Mybatis+通用Mapper+分页插件的配置方法</li>
</ol>
<a id="more"></a>
<hr>
<p><strong>SpringBoot系列</strong>：<a href="/tags/Spring-Boot/">Spring Boot学习笔记</a></p>
<hr>
<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>前文已经对Spring Boot中各种类型的数据访问做了说明，本文是对Spring Boot中使用Mybatis的扩展，重点说明如何在mybatis中集成通用Mapper和分页插件。</p>
<p>本文代码是在上文中讲到的mybatis单数据源配置的基础上进行扩展。</p>
<h2 id="配置说明"><a href="#配置说明" class="headerlink" title="配置说明"></a>配置说明</h2><p><strong>pom</strong>中增加通用Mapper和分页插件的依赖：</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!--分页插件--&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.github.pagehelper<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>pagehelper<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.2.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line"><span class="comment">&lt;!--通用Mapper--&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>tk.mybatis<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mapper<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.3.9<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div></pre></td></tr></table></figure>
<p><strong>MyBatisConfig</strong>：在SqlSessionFactory中增加分页插件配置，因为通用Mapper是基于注解的，所以这里去掉xml的加载。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Bean</span>(name = <span class="string">"sqlSessionFactory"</span>)</div><div class="line"><span class="function"><span class="keyword">public</span> SqlSessionFactory <span class="title">sqlSessionFactoryBean</span><span class="params">()</span> </span>&#123;</div><div class="line">    SqlSessionFactoryBean bean = <span class="keyword">new</span> SqlSessionFactoryBean();</div><div class="line">    bean.setDataSource(dataSource());</div><div class="line"></div><div class="line">    bean.setTypeAliasesPackage(<span class="string">"com.example.pojo"</span>);</div><div class="line"></div><div class="line">    <span class="comment">//分页插件设置</span></div><div class="line">    PageHelper pageHelper = <span class="keyword">new</span> PageHelper();</div><div class="line">    Properties properties = <span class="keyword">new</span> Properties();</div><div class="line">    properties.setProperty(<span class="string">"reasonable"</span>, <span class="string">"true"</span>);</div><div class="line">    properties.setProperty(<span class="string">"supportMethodsArguments"</span>, <span class="string">"true"</span>);</div><div class="line">    properties.setProperty(<span class="string">"returnPageInfo"</span>, <span class="string">"check"</span>);</div><div class="line">    properties.setProperty(<span class="string">"params"</span>, <span class="string">"count=countSql"</span>);</div><div class="line">    pageHelper.setProperties(properties);</div><div class="line"></div><div class="line">    <span class="comment">//添加分页插件</span></div><div class="line">    bean.setPlugins(<span class="keyword">new</span> Interceptor[]&#123;pageHelper&#125;);</div><div class="line"></div><div class="line">    ResourcePatternResolver resolver = <span class="keyword">new</span> PathMatchingResourcePatternResolver();</div><div class="line">    <span class="keyword">try</span> &#123;</div><div class="line">        <span class="comment">//基于注解扫描Mapper，不需配置xml路径</span></div><div class="line">        <span class="comment">//bean.setMapperLocations(resolver.getResources("classpath:mapper/*.xml"));</span></div><div class="line">        <span class="keyword">return</span> bean.getObject();</div><div class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;</div><div class="line">        e.printStackTrace();</div><div class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(e);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><strong>MyBatisMapperScannerConfig</strong><br>注意这里使用的是<strong>tk.mybatis.spring.mapper.MapperScannerConfigurer</strong></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.example;</div><div class="line"></div><div class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.AutoConfigureAfter;</div><div class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</div><div class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</div><div class="line"><span class="keyword">import</span> tk.mybatis.spring.mapper.MapperScannerConfigurer;</div><div class="line"><span class="keyword">import</span> java.util.Properties;</div><div class="line"></div><div class="line"><span class="meta">@Configuration</span></div><div class="line"><span class="comment">//必须在MyBatisConfig注册后再加载MapperScannerConfigurer，否则会报错</span></div><div class="line"><span class="meta">@AutoConfigureAfter</span>(MyBatisConfig.class)</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyBatisMapperScannerConfig</span> </span>&#123;</div><div class="line">    <span class="meta">@Bean</span></div><div class="line">    <span class="function"><span class="keyword">public</span> MapperScannerConfigurer <span class="title">mapperScannerConfigurer</span><span class="params">()</span> </span>&#123;</div><div class="line">        MapperScannerConfigurer mapperScannerConfigurer = <span class="keyword">new</span> MapperScannerConfigurer();</div><div class="line">        mapperScannerConfigurer.setSqlSessionFactoryBeanName(<span class="string">"sqlSessionFactory"</span>);</div><div class="line">        mapperScannerConfigurer.setBasePackage(<span class="string">"com.example.mapper"</span>);</div><div class="line"></div><div class="line">        <span class="comment">//初始化扫描器的相关配置，这里我们要创建一个Mapper的父类</span></div><div class="line">        Properties properties = <span class="keyword">new</span> Properties();</div><div class="line">        properties.setProperty(<span class="string">"mappers"</span>, <span class="string">"com.example.MyMapper"</span>);</div><div class="line">        properties.setProperty(<span class="string">"notEmpty"</span>, <span class="string">"false"</span>);</div><div class="line">        properties.setProperty(<span class="string">"IDENTITY"</span>, <span class="string">"MYSQL"</span>);</div><div class="line"></div><div class="line">        mapperScannerConfigurer.setProperties(properties);</div><div class="line"></div><div class="line">        <span class="keyword">return</span> mapperScannerConfigurer;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><strong>MyMapper</strong></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.example;</div><div class="line"></div><div class="line"><span class="keyword">import</span> tk.mybatis.mapper.common.Mapper;</div><div class="line"><span class="keyword">import</span> tk.mybatis.mapper.common.MySqlMapper;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">MyMapper</span>&lt;<span class="title">T</span>&gt; <span class="keyword">extends</span> <span class="title">Mapper</span>&lt;<span class="title">T</span>&gt;, <span class="title">MySqlMapper</span>&lt;<span class="title">T</span>&gt; </span>&#123;</div><div class="line">    <span class="comment">//TODO</span></div><div class="line">    <span class="comment">//FIXME 特别注意，该接口不能被扫描到，否则会出错</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><strong>PersonMapper</strong>：实体mapper继承<em>MyMapper</em>即可，业务方法中我们就可以使用通用Mapper提供的各种方法</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.example.mapper;</div><div class="line"></div><div class="line"><span class="keyword">import</span> com.example.MyMapper;</div><div class="line"><span class="keyword">import</span> com.example.pojo.Person;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">PersonMapper</span> <span class="keyword">extends</span> <span class="title">MyMapper</span>&lt;<span class="title">Person</span>&gt; </span>&#123;</div><div class="line"></div><div class="line">    <span class="comment">//以下方法用于演示，当通用Mapper不能买足需求时，可以自己扩展相应的方法</span></div><div class="line">    <span class="comment">//不允许查询参数为空的情况</span></div><div class="line">    <span class="meta">@Select</span>(&#123;</div><div class="line">            <span class="string">"select"</span>,</div><div class="line">            <span class="string">"p_id, p_name, p_age"</span>,</div><div class="line">            <span class="string">"from person"</span>,</div><div class="line">            <span class="string">"where  p_age between #&#123;startAge&#125; and #&#123;endAge&#125;"</span></div><div class="line">    &#125;)</div><div class="line">    <span class="meta">@Results</span>(&#123;</div><div class="line">            <span class="meta">@Result</span>(column=<span class="string">"p_id"</span>, property=<span class="string">"pId"</span>, jdbcType= JdbcType.INTEGER, id=<span class="keyword">true</span>),</div><div class="line">            <span class="meta">@Result</span>(column=<span class="string">"p_name"</span>, property=<span class="string">"pName"</span>, jdbcType=JdbcType.VARCHAR),</div><div class="line">            <span class="meta">@Result</span>(column=<span class="string">"p_age"</span>, property=<span class="string">"pAge"</span>, jdbcType=JdbcType.INTEGER)</div><div class="line">    &#125;)</div><div class="line">    <span class="function">List&lt;Person&gt; <span class="title">queryListByParam</span><span class="params">(Person person)</span></span>;</div><div class="line"></div><div class="line">    <span class="comment">//允许查询参数为空的情况</span></div><div class="line">    <span class="meta">@SelectProvider</span>(type = PersonSqlProvider.class,method = <span class="string">"selectSelective"</span>)</div><div class="line">    <span class="meta">@Results</span>(&#123;</div><div class="line">            <span class="meta">@Result</span>(column=<span class="string">"p_id"</span>, property=<span class="string">"pId"</span>, jdbcType= JdbcType.INTEGER, id=<span class="keyword">true</span>),</div><div class="line">            <span class="meta">@Result</span>(column=<span class="string">"p_name"</span>, property=<span class="string">"pName"</span>, jdbcType=JdbcType.VARCHAR),</div><div class="line">            <span class="meta">@Result</span>(column=<span class="string">"p_age"</span>, property=<span class="string">"pAge"</span>, jdbcType=JdbcType.INTEGER)</div><div class="line">    &#125;)</div><div class="line">    <span class="function">List&lt;Person&gt; <span class="title">queryListByParamSelective</span><span class="params">(Person person)</span></span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.example.mapper;</div><div class="line"></div><div class="line"><span class="keyword">import</span> com.example.pojo.Person;</div><div class="line"><span class="keyword">import</span> <span class="keyword">static</span> org.apache.ibatis.jdbc.SqlBuilder.*;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PersonSqlProvider</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">selectSelective</span><span class="params">(Person record)</span></span>&#123;</div><div class="line">        BEGIN();</div><div class="line"></div><div class="line">        SELECT(<span class="string">"p_id, p_name, p_age"</span>);</div><div class="line">        FROM(<span class="string">"person"</span>);</div><div class="line">        WHERE(<span class="string">"1=1"</span>);</div><div class="line"></div><div class="line">        <span class="keyword">if</span>(record.getStartAge()!=<span class="keyword">null</span>)&#123;</div><div class="line">            AND();</div><div class="line">            WHERE(<span class="string">"p_age &gt;= #&#123;startAge&#125;"</span>);</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="keyword">if</span>(record.getEndAge()!=<span class="keyword">null</span>)&#123;</div><div class="line">            AND();</div><div class="line">            WHERE(<span class="string">"p_age &lt;= #&#123;endAge&#125;"</span>);</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="keyword">return</span> SQL();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>这里要注意，使用通用<strong>Mapper</strong>时，实体类必须有一个叫做<strong>id</strong>的整型主键，另外，为了方便使用分页插件，要在每个实体对象中定义两个属性–<em>page</em>和<em>rows</em>，我们可以把这些通用的属性放到父类中，比如我们创建一个父类：BaseEntity</p>
<p><strong>BaseEntity</strong></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.example.pojo;</div><div class="line"></div><div class="line"><span class="keyword">import</span> javax.persistence.Transient;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BaseEntity</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="meta">@Id</span></div><div class="line">    <span class="comment">//注意，如果是老的项目，表中的主键可能不叫做id，这时可以在父类中去掉这个属性，改在子类中实现</span></div><div class="line">    <span class="meta">@Column</span>(name = <span class="string">"id"</span>) </div><div class="line">    <span class="meta">@GeneratedValue</span>(strategy = GenerationType.IDENTITY)</div><div class="line">    <span class="keyword">private</span> Integer id;</div><div class="line"></div><div class="line">    <span class="meta">@Transient</span></div><div class="line">    <span class="keyword">private</span> Integer page = <span class="number">1</span>;</div><div class="line"></div><div class="line">    <span class="meta">@Transient</span></div><div class="line">    <span class="keyword">private</span> Integer rows = <span class="number">10</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.example.pojo;</div><div class="line"></div><div class="line"><span class="keyword">import</span> javax.persistence.*;</div><div class="line"></div><div class="line"><span class="meta">@Table</span>(name = <span class="string">"person"</span>)</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span> <span class="keyword">extends</span> <span class="title">BaseEntity</span></span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> String pName;</div><div class="line">    <span class="keyword">private</span> Integer pAge;</div><div class="line"></div><div class="line">    <span class="comment">//以下属性用于演示范围查询</span></div><div class="line">    <span class="meta">@Transient</span></div><div class="line">    <span class="keyword">private</span> Integer startAge;</div><div class="line">    <span class="meta">@Transient</span></div><div class="line">    <span class="keyword">private</span> Integer endAge; </div><div class="line">    <span class="comment">//setter and getter</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="测试演示"><a href="#测试演示" class="headerlink" title="测试演示"></a>测试演示</h3><p><strong>业务方法</strong></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.example.service;</div><div class="line"></div><div class="line"><span class="keyword">import</span> com.example.mapper.PersonMapper;</div><div class="line"><span class="keyword">import</span> com.example.pojo.Person;</div><div class="line"><span class="keyword">import</span> com.github.pagehelper.PageHelper;</div><div class="line"><span class="keyword">import</span> org.apache.ibatis.session.RowBounds;</div><div class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</div><div class="line"><span class="keyword">import</span> org.springframework.stereotype.Service;</div><div class="line"><span class="keyword">import</span> org.springframework.transaction.annotation.Propagation;</div><div class="line"><span class="keyword">import</span> org.springframework.transaction.annotation.Transactional;</div><div class="line"></div><div class="line"><span class="keyword">import</span> java.util.List;</div><div class="line"></div><div class="line"><span class="meta">@Service</span></div><div class="line"><span class="meta">@Transactional</span>(propagation = Propagation.REQUIRED, readOnly = <span class="keyword">false</span>, rollbackFor = &#123;Exception.class&#125;)</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PersonService</span> </span>&#123;</div><div class="line">    <span class="meta">@Autowired</span></div><div class="line">    <span class="keyword">private</span> PersonMapper personMapper;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">insert</span><span class="params">(Person person)</span></span>&#123;</div><div class="line">        <span class="keyword">return</span> personMapper.insert(person);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Transactional</span>(readOnly = <span class="keyword">true</span>)</div><div class="line">    <span class="function"><span class="keyword">public</span> Person <span class="title">selectByPrimaryKey</span><span class="params">(Integer pId)</span></span>&#123;</div><div class="line">        <span class="keyword">return</span> personMapper.selectByPrimaryKey(pId);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Transactional</span>(readOnly = <span class="keyword">true</span>)</div><div class="line">    <span class="function"><span class="keyword">public</span> List&lt;Person&gt; <span class="title">getAllPersonList</span><span class="params">()</span></span>&#123;</div><div class="line">        <span class="keyword">return</span> personMapper.selectAll();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Transactional</span>(readOnly = <span class="keyword">true</span>)</div><div class="line">    <span class="function"><span class="keyword">public</span> List&lt;Person&gt; <span class="title">getPagePersonList</span><span class="params">(Person person, RowBounds rowBounds)</span></span>&#123;</div><div class="line"></div><div class="line">        <span class="keyword">return</span> personMapper.selectByRowBounds(person,rowBounds);</div><div class="line"></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> List&lt;Person&gt; <span class="title">getPagePersonList</span><span class="params">(Person person)</span></span>&#123;</div><div class="line">        <span class="keyword">if</span> (person.getPage() != <span class="keyword">null</span> &amp;&amp; person.getRows() != <span class="keyword">null</span>) &#123;</div><div class="line">            PageHelper.startPage(person.getPage(), person.getRows(), <span class="string">"p_id"</span>);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> personMapper.selectAll();</div><div class="line">    &#125;</div><div class="line"></div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> List&lt;Person&gt; <span class="title">queryListByParam</span><span class="params">(Person person)</span></span>&#123;</div><div class="line">        <span class="keyword">if</span> (person.getPage() != <span class="keyword">null</span> &amp;&amp; person.getRows() != <span class="keyword">null</span>) &#123;</div><div class="line">            PageHelper.startPage(person.getPage(), person.getRows(), <span class="string">"p_id"</span>);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> personMapper.queryListByParam(person);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> List&lt;Person&gt; <span class="title">queryListByParamSelective</span><span class="params">(Person person)</span></span>&#123;</div><div class="line">        <span class="keyword">if</span> (person.getPage() != <span class="keyword">null</span> &amp;&amp; person.getRows() != <span class="keyword">null</span>) &#123;</div><div class="line">            PageHelper.startPage(person.getPage(), person.getRows(), <span class="string">"p_id"</span>);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> personMapper.queryListByParamSelective(person);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><strong>单元测试</strong></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.example;</div><div class="line"></div><div class="line"><span class="keyword">import</span> com.example.pojo.Person;</div><div class="line"><span class="keyword">import</span> com.example.service.PersonService;</div><div class="line"><span class="keyword">import</span> org.apache.ibatis.session.RowBounds;</div><div class="line"><span class="keyword">import</span> org.junit.Test;</div><div class="line"><span class="keyword">import</span> org.junit.runner.RunWith;</div><div class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</div><div class="line"><span class="keyword">import</span> org.springframework.boot.test.context.SpringBootTest;</div><div class="line"><span class="keyword">import</span> org.springframework.test.context.junit4.SpringRunner;</div><div class="line"><span class="keyword">import</span> org.springframework.transaction.annotation.Transactional;</div><div class="line"></div><div class="line"><span class="keyword">import</span> java.util.List;</div><div class="line"></div><div class="line"><span class="meta">@RunWith</span>(SpringRunner.class)</div><div class="line"><span class="meta">@SpringBootTest</span></div><div class="line"><span class="meta">@Transactional</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MybatisMapperPagehelperApplicationTests</span> </span>&#123;</div><div class="line"></div><div class="line"></div><div class="line">    <span class="meta">@Autowired</span></div><div class="line">    PersonService personService;</div><div class="line"></div><div class="line">    <span class="meta">@Test</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">selectByPrimaryKey</span><span class="params">()</span></span>&#123;</div><div class="line">        Person person = personService.selectByPrimaryKey(<span class="number">1</span>);</div><div class="line">        System.out.println(person);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Test</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">insert</span><span class="params">()</span></span>&#123;</div><div class="line">        Person person = <span class="keyword">new</span> Person();</div><div class="line">        person.setpName(<span class="string">"王五"</span>);</div><div class="line">        person.setpAge(<span class="number">18</span>);</div><div class="line">        System.out.println(personService.insert(person));</div><div class="line"></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Test</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">getAllPersonList</span><span class="params">()</span></span>&#123;</div><div class="line">        List&lt;Person&gt; list = personService.getAllPersonList();</div><div class="line">        System.out.println(list.size());</div><div class="line">        <span class="keyword">for</span>(Person person : list)&#123;</div><div class="line">            System.out.println(person);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Test</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">getPagePersonList</span><span class="params">()</span></span>&#123;</div><div class="line">        Person person = <span class="keyword">new</span> Person();</div><div class="line">        person.setpName(<span class="string">"王五"</span>);</div><div class="line">        <span class="comment">//指定limit和offset</span></div><div class="line">        List&lt;Person&gt; list = personService.getPagePersonList(person,<span class="keyword">new</span> RowBounds(<span class="number">2</span>,<span class="number">3</span>));</div><div class="line">        System.out.println(list.size());</div><div class="line">        <span class="keyword">for</span>(Person p : list)&#123;</div><div class="line">            System.out.println(p);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Test</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">getPagePersonList2</span><span class="params">()</span></span>&#123;</div><div class="line">        Person person = <span class="keyword">new</span> Person();</div><div class="line">        <span class="comment">//每页2行，查询第二页</span></div><div class="line">        person.setPage(<span class="number">2</span>);</div><div class="line">        person.setRows(<span class="number">2</span>);</div><div class="line"></div><div class="line">        List&lt;Person&gt; list = personService.getPagePersonList(person);</div><div class="line">        System.out.println(list.size());</div><div class="line">        <span class="keyword">for</span>(Person p : list)&#123;</div><div class="line">            System.out.println(p);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Test</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">queryListByParam</span><span class="params">()</span></span>&#123;</div><div class="line">        Person person = <span class="keyword">new</span> Person();</div><div class="line">        <span class="comment">//每页2行，查询第二页</span></div><div class="line">        person.setPage(<span class="number">2</span>);</div><div class="line">        person.setRows(<span class="number">2</span>);</div><div class="line">        <span class="comment">//查询年龄在15到22之间的数据</span></div><div class="line">        person.setStartAge(<span class="number">15</span>);</div><div class="line">        person.setEndAge(<span class="number">22</span>);</div><div class="line"></div><div class="line">        List&lt;Person&gt; list = personService.queryListByParam(person);</div><div class="line">        System.out.println(list.size());</div><div class="line">        <span class="keyword">for</span>(Person p : list)&#123;</div><div class="line">            System.out.println(p);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line"></div><div class="line">    <span class="meta">@Test</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">queryListByParamSelective</span><span class="params">()</span></span>&#123;</div><div class="line">        Person person = <span class="keyword">new</span> Person();</div><div class="line">        <span class="comment">//每页2行，查询第一页</span></div><div class="line">        person.setPage(<span class="number">1</span>);</div><div class="line">        person.setRows(<span class="number">2</span>);</div><div class="line"></div><div class="line">        <span class="comment">//查询年龄大于等于15的数据</span></div><div class="line">        person.setStartAge(<span class="number">15</span>);</div><div class="line">        <span class="comment">//person.setEndAge(22);</span></div><div class="line"></div><div class="line">        List&lt;Person&gt; list = personService.queryListByParamSelective(person);</div><div class="line">        System.out.println(list.size());</div><div class="line">        <span class="keyword">for</span>(Person p : list)&#123;</div><div class="line">            System.out.println(p);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<hr>
<p>本文示例代码下载地址：<a href="https://github.com/hanqunfeng/SpringBootStudy" target="_blank" rel="external">https://github.com/hanqunfeng/SpringBootStudy</a></p>
<p>项目参考：<a href="https://github.com/abel533/MyBatis-Spring-Boot" target="_blank" rel="external">https://github.com/abel533/MyBatis-Spring-Boot</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;摘要&quot;&gt;&lt;a href=&quot;#摘要&quot; class=&quot;headerlink&quot; title=&quot;摘要&quot;&gt;&lt;/a&gt;摘要&lt;/h2&gt;&lt;p&gt;看完本文你将掌握如下知识点：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Spring Boot项目中，Mybatis+通用Mapper+分页插件的配置方法&lt;/li&gt;
&lt;/ol&gt;
    
    </summary>
    
      <category term="技术" scheme="http://blog.hanqunfeng.com/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="Spring Boot" scheme="http://blog.hanqunfeng.com/tags/Spring-Boot/"/>
    
  </entry>
  
  <entry>
    <title>Spring Boot学习笔记04--数据访问</title>
    <link href="http://blog.hanqunfeng.com/2016/12/17/spring-boot-study-data/"/>
    <id>http://blog.hanqunfeng.com/2016/12/17/spring-boot-study-data/</id>
    <published>2016-12-17T15:33:15.000Z</published>
    <updated>2016-12-20T02:25:02.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="摘要"><a href="#摘要" class="headerlink" title="摘要"></a>摘要</h2><p>看完本文你将掌握如下知识点：</p>
<ol>
<li>Spring Boot对JDBC的支持</li>
<li>Spring Boot项目多数据源的配置</li>
<li>Spring Boot的事务管理</li>
<li>Spring Boot项目多数据源的事务管理</li>
<li>Spring Boot项目中使用Hibernate4的方法</li>
<li>Spring Boot项目中使用Mybatis的方法</li>
</ol>
<a id="more"></a>
<hr>
<p><strong>SpringBoot系列</strong>：<a href="/tags/Spring-Boot/">Spring Boot学习笔记</a></p>
<hr>
<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>Spring Boot针对企业开发场景提供了各种『开箱即用』的<strong>spring-boot-starter-xxx</strong>自动配置依赖模块，这就使得我们开发Spring应用更加快速和高效。比如我们前面创建web项目时使用到的<strong>spring-boot-starter-web</strong>。</p>
<p>这些<strong>spring-boot-starter-xxx</strong>不但包含了对该功能的全部依赖包，同时也提供了该功能的自动配置类。我们本节要讨论的『数据访问』就是基于这些<strong>spring-boot-starter-xxx</strong>的自动配置依赖模块。</p>
<hr>
<h2 id="环境准备"><a href="#环境准备" class="headerlink" title="环境准备"></a>环境准备</h2><p><strong>jdk版本</strong>：java version “1.8.0_31”<br><strong>数据库</strong>：10.1.16-MariaDB<br><strong>脚本</strong><br><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"># 创建库1</div><div class="line">CREATE SCHEMA `springboot1` DEFAULT CHARACTER SET utf8 ;</div><div class="line">CREATE TABLE `springboot1`.`person` (</div><div class="line">  `p_id` INT NOT NULL AUTO_INCREMENT COMMENT '主键',</div><div class="line">  `p_name` VARCHAR(45) NULL COMMENT '姓名',</div><div class="line">  `p_age` INT NULL COMMENT '年龄',</div><div class="line">  PRIMARY KEY (`p_id`))</div><div class="line">ENGINE = InnoDB</div><div class="line">COMMENT = '人员信息表';</div><div class="line"></div><div class="line">INSERT INTO `springboot1`.`person` (`p_id`, `p_name`, `p_age`) VALUES ('1', '张三', '20');</div><div class="line">INSERT INTO `springboot1`.`person` (`p_id`, `p_name`, `p_age`) VALUES ('2', '李四', '25');</div><div class="line"></div><div class="line"></div><div class="line"># 创建库2</div><div class="line">CREATE SCHEMA `springboot2` DEFAULT CHARACTER SET utf8 ;</div><div class="line">CREATE TABLE `springboot2`.`person` (</div><div class="line">  `p_id` INT NOT NULL AUTO_INCREMENT COMMENT '主键',</div><div class="line">  `p_name` VARCHAR(45) NULL COMMENT '姓名',</div><div class="line">  `p_age` INT NULL COMMENT '年龄',</div><div class="line">  PRIMARY KEY (`p_id`))</div><div class="line">ENGINE = InnoDB</div><div class="line">COMMENT = '人员信息表';</div><div class="line"></div><div class="line">INSERT INTO `springboot2`.`person` (`p_id`, `p_name`, `p_age`) VALUES ('1', '张三', '20');</div><div class="line">INSERT INTO `springboot2`.`person` (`p_id`, `p_name`, `p_age`) VALUES ('2', '李四', '25');</div></pre></td></tr></table></figure></p>
<hr>
<h2 id="Spring-Boot对JDBC的支持"><a href="#Spring-Boot对JDBC的支持" class="headerlink" title="Spring Boot对JDBC的支持"></a>Spring Boot对JDBC的支持</h2><h3 id="创建项目"><a href="#创建项目" class="headerlink" title="创建项目"></a>创建项目</h3><p>新建一个springboot项目，依赖选择web和jdbc<br><img src="/images_glob/spring-boot-study-data/jdbc1.png" alt=""></p>
<p>项目创建成功后查看pom，会看到添加了<strong>spring-boot-starter-jdbc</strong>的依赖<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-jdbc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div></pre></td></tr></table></figure></p>
<h3 id="配置项目"><a href="#配置项目" class="headerlink" title="配置项目"></a>配置项目</h3><p>在pom中增加MySQL依赖<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.1.37<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p>在<em>application.properties</em>中添加数据源配置信息<br><figure class="highlight yml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#datasource</span></div><div class="line">spring.datasource.driver-class-name=com.mysql.jdbc.Driver</div><div class="line">spring.datasource.url=jdbc:mysql://localhost:<span class="number">3306</span>/springboot1?useUnicode=<span class="literal">true</span>&amp;characterEncoding=utf<span class="bullet">-8</span></div><div class="line">spring.datasource.username=root</div><div class="line">spring.datasource.password=newpwd</div></pre></td></tr></table></figure></p>
<h3 id="项目代码"><a href="#项目代码" class="headerlink" title="项目代码"></a>项目代码</h3><p>本例只做简单演示，所以只创建如下3个类，并用一个单元测试类进行测试<br>Model:<strong>Person</strong><br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span> <span class="keyword">implements</span> <span class="title">Serializable</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID = -<span class="number">1L</span>;</div><div class="line">    <span class="keyword">private</span> Long id;</div><div class="line">    <span class="keyword">private</span> String name;</div><div class="line">    <span class="keyword">private</span> Integer age;</div><div class="line"></div><div class="line">    <span class="comment">//getter and setter</span></div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="string">"Person&#123;"</span> +</div><div class="line">                <span class="string">"id="</span> + id +</div><div class="line">                <span class="string">", name='"</span> + name + <span class="string">'\''</span> +</div><div class="line">                <span class="string">", age="</span> + age +</div><div class="line">                <span class="string">'&#125;'</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>Dao:<strong>PersonDao</strong><br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Repository</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PersonDao</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="meta">@Autowired</span></div><div class="line">    <span class="keyword">private</span> JdbcTemplate jdbcTemplate;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">savePerson</span><span class="params">(Person person)</span></span>&#123;</div><div class="line">        String sql = <span class="string">"INSERT INTO `springboot1`.`person` (`p_name`, `p_age`) VALUES (?, ?)"</span>;</div><div class="line">        <span class="keyword">int</span> result = jdbcTemplate.update(sql,<span class="keyword">new</span> Object[]&#123;person.getName(),person.getAge()&#125;);</div><div class="line">        <span class="keyword">return</span> result;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> List&lt;Person&gt; <span class="title">getAllPersonList</span><span class="params">()</span></span>&#123;</div><div class="line">        String sql = <span class="string">"select * from person s"</span>;</div><div class="line">        List&lt;Person&gt; list = jdbcTemplate.query(sql,<span class="keyword">new</span> PersonMapper());</div><div class="line">        <span class="keyword">return</span> list;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="class"><span class="keyword">class</span> <span class="title">PersonMapper</span> <span class="keyword">implements</span> <span class="title">RowMapper</span>&lt;<span class="title">Person</span>&gt;</span>&#123;</div><div class="line">        <span class="meta">@Override</span></div><div class="line">        <span class="function"><span class="keyword">public</span> Person <span class="title">mapRow</span><span class="params">(ResultSet resultSet, <span class="keyword">int</span> i)</span> <span class="keyword">throws</span> SQLException </span>&#123;</div><div class="line">            Person person = <span class="keyword">new</span> Person();</div><div class="line">            person.setId(resultSet.getLong(<span class="string">"p_id"</span>));</div><div class="line">            person.setName(resultSet.getString(<span class="string">"p_name"</span>));</div><div class="line">            person.setAge(resultSet.getInt(<span class="string">"p_age"</span>));</div><div class="line">            <span class="keyword">return</span> person;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>Service:<strong>PersonService</strong><br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Service</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PersonService</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="meta">@Autowired</span></div><div class="line">    <span class="keyword">private</span> PersonDao personDao;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">savePserson</span><span class="params">(Person person)</span></span>&#123;</div><div class="line">       <span class="keyword">return</span> personDao.savePerson(person);</div><div class="line"></div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">public</span> List&lt;Person&gt; <span class="title">getAllPersonList</span><span class="params">()</span></span>&#123;</div><div class="line">        <span class="keyword">return</span> personDao.getAllPersonList();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>单元测试:<strong>SpringbootjdbcdemoApplicationTests</strong><br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@RunWith</span>(SpringRunner.class)</div><div class="line"><span class="meta">@SpringBootTest</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SpringbootjdbcdemoApplicationTests</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="meta">@Autowired</span></div><div class="line">    <span class="keyword">private</span> PersonService personService;</div><div class="line"></div><div class="line">    <span class="meta">@Test</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">savePerson</span><span class="params">()</span></span>&#123;</div><div class="line">        Person person = <span class="keyword">new</span> Person();</div><div class="line">        person.setName(<span class="string">"王五"</span>);</div><div class="line">        person.setAge(<span class="number">18</span>);</div><div class="line">        <span class="keyword">int</span> result = personService.savePserson(person);</div><div class="line">        Assert.assertEquals(<span class="number">1</span>,result);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Test</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">getAllPersonList</span><span class="params">()</span></span>&#123;</div><div class="line">        List&lt;Person&gt; list = personService.getAllPersonList();</div><div class="line">        System.out.println(list.size());</div><div class="line">        <span class="keyword">for</span>(Person person : list)&#123;</div><div class="line">            System.out.println(person);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<hr>
<p><strong>说明</strong><br>实际上，项目加入<strong>spring-boot-starter-jdbc</strong>的依赖后，即可在项目代码中通过@Autowired自动注入JdbcTemplate。而数据源的配置则在<em>application.properties</em>中进行配置。</p>
<p>如果不想使用<strong>spring-boot-starter-jdbc</strong>带来的默认依赖和自动配置，那么采用如下的方式，效果是一样的。</p>
<hr>
<h3 id="使用自定义的DataSourceConfig"><a href="#使用自定义的DataSourceConfig" class="headerlink" title="使用自定义的DataSourceConfig"></a>使用自定义的DataSourceConfig</h3><p>修改pom中的依赖，去掉对<strong>spring-boot-starter-jdbc</strong>的依赖，并加入对<strong>spring-jdbc</strong>的依赖，这样我们就失去了对JDBC的自动配置功能了。<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!--</span></div><div class="line">&lt;dependency&gt;</div><div class="line">    &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</div><div class="line">    &lt;artifactId&gt;spring-boot-starter-jdbc&lt;/artifactId&gt;</div><div class="line">&lt;/dependency&gt;</div><div class="line">--&gt;</div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-jdbc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.3.4.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p>启动类中去掉对<strong>DataSourceAutoConfiguration</strong>的自动配置支持<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@SpringBootApplication</span>(exclude=&#123;DataSourceAutoConfiguration.class&#125;)</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SpringbootjdbcdemoApplication</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">        SpringApplication.run(SpringbootjdbcdemoApplication.class, args);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>创建<strong>DataSourceConfig</strong>配置类<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Configuration</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DataSourceConfig</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="meta">@Value</span>(<span class="string">"$&#123;spring.datasource.driver-class-name&#125;"</span>)</div><div class="line">    String driverClass;</div><div class="line">    <span class="meta">@Value</span>(<span class="string">"$&#123;spring.datasource.url&#125;"</span>)</div><div class="line">    String url;</div><div class="line">    <span class="meta">@Value</span>(<span class="string">"$&#123;spring.datasource.username&#125;"</span>)</div><div class="line">    String userName;</div><div class="line">    <span class="meta">@Value</span>(<span class="string">"$&#123;spring.datasource.password&#125;"</span>)</div><div class="line">    String passWord;</div><div class="line"></div><div class="line">    <span class="meta">@Bean</span>(name = <span class="string">"dataSource"</span>)</div><div class="line">    <span class="function"><span class="keyword">public</span> DataSource <span class="title">dataSource</span><span class="params">()</span> </span>&#123;</div><div class="line">        DriverManagerDataSource dataSource = <span class="keyword">new</span> DriverManagerDataSource();</div><div class="line">        dataSource.setDriverClassName(driverClass);</div><div class="line">        dataSource.setUrl(url);</div><div class="line">        dataSource.setUsername(userName);</div><div class="line">        dataSource.setPassword(passWord);</div><div class="line">        <span class="keyword">return</span> dataSource;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Bean</span>(name = <span class="string">"jdbcTemplate"</span>)</div><div class="line">    <span class="function"><span class="keyword">public</span> JdbcTemplate <span class="title">jdbcTemplate</span><span class="params">()</span></span>&#123;</div><div class="line">        JdbcTemplate jdbcTemplate = <span class="keyword">new</span> JdbcTemplate(dataSource());</div><div class="line">        <span class="keyword">return</span> jdbcTemplate;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>其它代码不需要任何修改，运行效果一致。</p>
<hr>
<p><strong>说明</strong><br>为什么SpringBoot为我们提供了<strong>spring-boot-starter-jdbc</strong>的自动配置解决方案，我们还要自己配置呢，这是因为自动配置并不是那么的强大，<strong>spring-boot-starter-jdbc</strong>只能支持单一的数据源配置，如果项目中需要关联多个数据源，就需要我们自己处理了。</p>
<p>比如我们在环境准备中创建了两个数据库，接下来我们在项目中增加多数据源的配置。</p>
<hr>
<p>在<em>application.properties</em>中添加数据源配置信息<br><figure class="highlight yml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#datasource2</span></div><div class="line">spring.datasource.driver-class-name2=com.mysql.jdbc.Driver</div><div class="line">spring.datasource.url2=jdbc:mysql://localhost:<span class="number">3306</span>/springboot2?useUnicode=<span class="literal">true</span>&amp;characterEncoding=utf<span class="bullet">-8</span></div><div class="line">spring.datasource.username2=root</div><div class="line">spring.datasource.password2=newpwd</div></pre></td></tr></table></figure></p>
<p>然后在<strong>DataSourceConfig</strong>配置类中增加如下内容：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Value</span>(<span class="string">"$&#123;spring.datasource.driver-class-name2&#125;"</span>)</div><div class="line">String driverClass2;</div><div class="line"><span class="meta">@Value</span>(<span class="string">"$&#123;spring.datasource.url2&#125;"</span>)</div><div class="line">String url2;</div><div class="line"><span class="meta">@Value</span>(<span class="string">"$&#123;spring.datasource.username2&#125;"</span>)</div><div class="line">String userName2;</div><div class="line"><span class="meta">@Value</span>(<span class="string">"$&#123;spring.datasource.password2&#125;"</span>)</div><div class="line">String passWord2;</div><div class="line"></div><div class="line"><span class="meta">@Bean</span>(name = <span class="string">"dataSource2"</span>)</div><div class="line"><span class="function"><span class="keyword">public</span> DataSource <span class="title">dataSource2</span><span class="params">()</span> </span>&#123;</div><div class="line">    DriverManagerDataSource dataSource = <span class="keyword">new</span> DriverManagerDataSource();</div><div class="line">    dataSource.setDriverClassName(driverClass2);</div><div class="line">    dataSource.setUrl(url2);</div><div class="line">    dataSource.setUsername(userName2);</div><div class="line">    dataSource.setPassword(passWord2);</div><div class="line">    <span class="keyword">return</span> dataSource;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="meta">@Bean</span>(name = <span class="string">"jdbcTemplate2"</span>)</div><div class="line"><span class="function"><span class="keyword">public</span> JdbcTemplate <span class="title">jdbcTemplate2</span><span class="params">()</span></span>&#123;</div><div class="line">    JdbcTemplate jdbcTemplate = <span class="keyword">new</span> JdbcTemplate(dataSource2());</div><div class="line">    <span class="keyword">return</span> jdbcTemplate;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>此时需要在Dao中将@Autowired注解替换成<code>@Resource(name = &quot;jdbcTemplate&quot;)</code>，来明确指定要使用哪一个jdbcTemplate对象。</p>
<hr>
<p><strong>说明</strong><br>关于如何在项目中使用Hibernate4框架，可以参考:<a href="http://hanqunfeng.iteye.com/blog/2114975" target="_blank" rel="external">SpringMVC4零配置</a></p>
<hr>
<h2 id="Spring-Boot的事务管理"><a href="#Spring-Boot的事务管理" class="headerlink" title="Spring Boot的事务管理"></a>Spring Boot的事务管理</h2><h3 id="JDBC事务管理"><a href="#JDBC事务管理" class="headerlink" title="JDBC事务管理"></a>JDBC事务管理</h3><p>如果我们项目中使用的是JDBC的数据访问方案，并且容器中只注册了一个<strong>DataSource</strong>，那么SpringBoot就会为我们开启<strong>DataSourceTransactionManagerAutoConfiguration</strong>的自动配置类，其会在容器中注册一个<strong>DataSourceTransactionManager</strong>事务管理器，同时会开启对注解式事务<strong>@Transactional</strong>的支持。感兴趣的可以看一下<strong>DataSourceTransactionManagerAutoConfiguration</strong>的源码。</p>
<hr>
<p><strong>@Transactional</strong>是Spring框架提供的，配置方法参考下面的代码<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//一般我们会在业务实现类上声明事务注解</span></div><div class="line"><span class="comment">//当前表示需要在事务中运行，可以执行更新和删除操作，遇到异常则回滚</span></div><div class="line"><span class="meta">@Transactional</span>(propagation = Propagation.REQUIRED, readOnly = <span class="keyword">false</span>, rollbackFor = &#123; Exception.class &#125;)</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PersonService</span></span>&#123;</div><div class="line">    <span class="comment">//方法上也可以标注事务注解，方法上注解声明会覆盖类上的</span></div><div class="line">    <span class="comment">//一般查询操作readOnly设置为true，增删该操作设置为false</span></div><div class="line">    <span class="meta">@Transactional</span>(readOnly = <span class="keyword">true</span>)</div><div class="line">    <span class="function"><span class="keyword">public</span> List&lt;Person&gt; <span class="title">getAllPersonList</span><span class="params">()</span></span>&#123;</div><div class="line">        <span class="comment">//do something</span></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">//不加@Transactiona注解，则使用类上的设置</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">savePserson</span><span class="params">(Person person)</span></span>&#123;</div><div class="line">        <span class="comment">//do something</span></div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>如果在测试类上声明<strong>@Transactional</strong>，则会开启自动回滚，不会产生脏数据<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@RunWith</span>(SpringRunner.class)</div><div class="line"><span class="meta">@SpringBootTest</span></div><div class="line"><span class="meta">@Transactional</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SpringbootjdbcdemoApplicationTests</span> </span>&#123;…………&#125;</div></pre></td></tr></table></figure></p>
<hr>
<p>如果希望自己配置事务，可以在配置类中增加事务管理器的配置，比如，我们在<strong>DataSourceConfig</strong>中增加如下配置：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Configuration</span></div><div class="line"><span class="comment">//启用注解事务管理，使用CGLib代理</span></div><div class="line"><span class="meta">@EnableTransactionManagement</span>(proxyTargetClass = <span class="keyword">true</span>)</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DataSourceConfig</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="meta">@Value</span>(<span class="string">"$&#123;spring.datasource.driver-class-name&#125;"</span>)</div><div class="line">    String driverClass;</div><div class="line">    <span class="meta">@Value</span>(<span class="string">"$&#123;spring.datasource.url&#125;"</span>)</div><div class="line">    String url;</div><div class="line">    <span class="meta">@Value</span>(<span class="string">"$&#123;spring.datasource.username&#125;"</span>)</div><div class="line">    String userName;</div><div class="line">    <span class="meta">@Value</span>(<span class="string">"$&#123;spring.datasource.password&#125;"</span>)</div><div class="line">    String passWord;</div><div class="line"></div><div class="line">    <span class="meta">@Bean</span>(name = <span class="string">"dataSource"</span>)</div><div class="line">    <span class="function"><span class="keyword">public</span> DataSource <span class="title">dataSource</span><span class="params">()</span> </span>&#123;</div><div class="line">        DriverManagerDataSource dataSource = <span class="keyword">new</span> DriverManagerDataSource();</div><div class="line">        dataSource.setDriverClassName(driverClass);</div><div class="line">        dataSource.setUrl(url);</div><div class="line">        dataSource.setUsername(userName);</div><div class="line">        dataSource.setPassword(passWord);</div><div class="line">        <span class="keyword">return</span> dataSource;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Bean</span>(name = <span class="string">"jdbcTemplate"</span>)</div><div class="line">    <span class="function"><span class="keyword">public</span> JdbcTemplate <span class="title">jdbcTemplate</span><span class="params">()</span></span>&#123;</div><div class="line">        JdbcTemplate jdbcTemplate = <span class="keyword">new</span> JdbcTemplate(dataSource());</div><div class="line">        <span class="keyword">return</span> jdbcTemplate;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Bean</span></div><div class="line">    <span class="function"><span class="keyword">public</span> DataSourceTransactionManager <span class="title">transactionManager</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">new</span> DataSourceTransactionManager(dataSource());</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<hr>
<p><strong>说明</strong><br>上面的方法只是针对单一数据源进行事务管理的，但是项目中经常会用到多数据源的情况，那么要如何进行事务管理呢？</p>
<hr>
<p>我们上文讲到了可以在项目中通过配置类，自己配置多个数据源，并通过<strong>DataSourceConfig</strong>进行了演示，接下来我们添加多个事务管理器。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Configuration</span></div><div class="line"><span class="comment">//启用注解事务管理，使用CGLib代理</span></div><div class="line"><span class="meta">@EnableTransactionManagement</span>(proxyTargetClass = <span class="keyword">true</span>)</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DataSourceConfig</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="meta">@Value</span>(<span class="string">"$&#123;spring.datasource.driver-class-name&#125;"</span>)</div><div class="line">    String driverClass;</div><div class="line">    <span class="meta">@Value</span>(<span class="string">"$&#123;spring.datasource.url&#125;"</span>)</div><div class="line">    String url;</div><div class="line">    <span class="meta">@Value</span>(<span class="string">"$&#123;spring.datasource.username&#125;"</span>)</div><div class="line">    String userName;</div><div class="line">    <span class="meta">@Value</span>(<span class="string">"$&#123;spring.datasource.password&#125;"</span>)</div><div class="line">    String passWord;</div><div class="line"></div><div class="line"></div><div class="line">    <span class="meta">@Value</span>(<span class="string">"$&#123;spring.datasource.driver-class-name2&#125;"</span>)</div><div class="line">    String driverClass2;</div><div class="line">    <span class="meta">@Value</span>(<span class="string">"$&#123;spring.datasource.url2&#125;"</span>)</div><div class="line">    String url2;</div><div class="line">    <span class="meta">@Value</span>(<span class="string">"$&#123;spring.datasource.username2&#125;"</span>)</div><div class="line">    String userName2;</div><div class="line">    <span class="meta">@Value</span>(<span class="string">"$&#123;spring.datasource.password2&#125;"</span>)</div><div class="line">    String passWord2;</div><div class="line"></div><div class="line">    <span class="meta">@Bean</span>(name = <span class="string">"dataSource"</span>)</div><div class="line">    <span class="function"><span class="keyword">public</span> DataSource <span class="title">dataSource</span><span class="params">()</span> </span>&#123;</div><div class="line"></div><div class="line">        DriverManagerDataSource dataSource = <span class="keyword">new</span> DriverManagerDataSource();</div><div class="line">        dataSource.setDriverClassName(driverClass);</div><div class="line">        dataSource.setUrl(url);</div><div class="line">        dataSource.setUsername(userName);</div><div class="line">        dataSource.setPassword(passWord);</div><div class="line">        <span class="keyword">return</span> dataSource;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Bean</span>(name = <span class="string">"jdbcTemplate"</span>)</div><div class="line">    <span class="function"><span class="keyword">public</span> JdbcTemplate <span class="title">jdbcTemplate</span><span class="params">()</span></span>&#123;</div><div class="line">        JdbcTemplate jdbcTemplate = <span class="keyword">new</span> JdbcTemplate(dataSource());</div><div class="line">        <span class="keyword">return</span> jdbcTemplate;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Bean</span>(name = <span class="string">"transactionManager"</span>)</div><div class="line">    <span class="function"><span class="keyword">public</span> DataSourceTransactionManager <span class="title">transactionManager</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">new</span> DataSourceTransactionManager(dataSource());</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Bean</span>(name = <span class="string">"dataSource2"</span>)</div><div class="line">    <span class="function"><span class="keyword">public</span> DataSource <span class="title">dataSource2</span><span class="params">()</span> </span>&#123;</div><div class="line">        DriverManagerDataSource dataSource = <span class="keyword">new</span> DriverManagerDataSource();</div><div class="line">        dataSource.setDriverClassName(driverClass2);</div><div class="line">        dataSource.setUrl(url2);</div><div class="line">        dataSource.setUsername(userName2);</div><div class="line">        dataSource.setPassword(passWord2);</div><div class="line">        System.out.println(url2);</div><div class="line">        <span class="keyword">return</span> dataSource;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Bean</span>(name = <span class="string">"jdbcTemplate2"</span>)</div><div class="line">    <span class="function"><span class="keyword">public</span> JdbcTemplate <span class="title">jdbcTemplate2</span><span class="params">()</span></span>&#123;</div><div class="line">        JdbcTemplate jdbcTemplate = <span class="keyword">new</span> JdbcTemplate(dataSource2());</div><div class="line">        <span class="keyword">return</span> jdbcTemplate;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Bean</span>(name = <span class="string">"transactionManager2"</span>)</div><div class="line">    <span class="function"><span class="keyword">public</span> DataSourceTransactionManager <span class="title">transactionManager2</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">new</span> DataSourceTransactionManager(dataSource2());</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>这时，我们必须在<strong>@Transactional</strong>注解中指定要使用哪一个事务管理器<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Service</span></div><div class="line"><span class="meta">@Transactional</span>(transactionManager = <span class="string">"transactionManager"</span>,propagation = Propagation.REQUIRED, readOnly = <span class="keyword">false</span>, rollbackFor = &#123; Exception.class &#125;)</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PersonService</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="meta">@Autowired</span></div><div class="line">    <span class="keyword">private</span> PersonDao personDao;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">savePserson</span><span class="params">(Person person)</span></span>&#123;</div><div class="line">        <span class="keyword">return</span> personDao.savePerson(person);</div><div class="line">    &#125;</div><div class="line">    <span class="meta">@Transactional</span>(transactionManager = <span class="string">"transactionManager"</span>,readOnly = <span class="keyword">true</span>)</div><div class="line">    <span class="function"><span class="keyword">public</span> List&lt;Person&gt; <span class="title">getAllPersonList</span><span class="params">()</span></span>&#123;</div><div class="line">        <span class="keyword">return</span> personDao.getAllPersonList();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Transactional</span>(transactionManager = <span class="string">"transactionManager2"</span>,propagation = Propagation.REQUIRED, readOnly = <span class="keyword">false</span>, rollbackFor = &#123; Exception.class &#125;)</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">savePserson2</span><span class="params">(Person person)</span></span>&#123;</div><div class="line">        <span class="keyword">return</span> personDao.savePerson2(person);</div><div class="line">    &#125;</div><div class="line">    <span class="meta">@Transactional</span>(transactionManager = <span class="string">"transactionManager2"</span>,readOnly = <span class="keyword">true</span>)</div><div class="line">    <span class="function"><span class="keyword">public</span> List&lt;Person&gt; <span class="title">getAllPersonList2</span><span class="params">()</span></span>&#123;</div><div class="line">        <span class="keyword">return</span> personDao.getAllPersonList2();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<hr>
<p><strong>说明</strong><br>这样做并不美好，不能对多个数据源同时进行事务管理，比如，我们在一个业务方法里同时对两个数据源进行操作，我们希望只要有一个发生异常，则两个数据源的数据都进行回滚。</p>
<p>那要怎么做呢，我们接着往下看。</p>
<hr>
<h3 id="多数据源事务管理"><a href="#多数据源事务管理" class="headerlink" title="多数据源事务管理"></a>多数据源事务管理</h3><p>这里推荐使用<strong><a href="https://www.atomikos.com" target="_blank" rel="external">Atomikos</a></strong>，Atomikos支持Mysql、Oracle等多种数据库，可与多种ORM框架集成，如MyBatis、JPA、Hibernate等等，同时支持各种容器下JNDI的多数据源管理。Atomikos官网提供了各种情况下使用Atomikos的Example，本文只对使用JDBC时的情况进行说明。</p>
<p>目前maven中央仓库的最新版本是4.0.4，使用Atomikos，需要在项目中加入如下依赖：<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.atomikos<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>transactions-jdbc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.0.4<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.atomikos<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>transactions-jta<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.0.4<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.atomikos<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>transactions<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.0.4<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.atomikos<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>atomikos-util<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.0.4<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line"> <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javax.transaction<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jta<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p>对<strong>DataSourceConfig</strong>进行改造：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.example;</div><div class="line"></div><div class="line"><span class="keyword">import</span> com.atomikos.icatch.jta.UserTransactionImp;</div><div class="line"><span class="keyword">import</span> com.atomikos.icatch.jta.UserTransactionManager;</div><div class="line"><span class="keyword">import</span> com.atomikos.jdbc.AtomikosDataSourceBean;</div><div class="line"><span class="keyword">import</span> com.mysql.jdbc.jdbc2.optional.MysqlXADataSource;</div><div class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Value;</div><div class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</div><div class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</div><div class="line"><span class="keyword">import</span> org.springframework.context.annotation.DependsOn;</div><div class="line"><span class="keyword">import</span> org.springframework.jdbc.core.JdbcTemplate;</div><div class="line"><span class="keyword">import</span> org.springframework.transaction.PlatformTransactionManager;</div><div class="line"><span class="keyword">import</span> org.springframework.transaction.annotation.EnableTransactionManagement;</div><div class="line"><span class="keyword">import</span> org.springframework.transaction.jta.JtaTransactionManager;</div><div class="line"><span class="keyword">import</span> javax.sql.DataSource;</div><div class="line"><span class="keyword">import</span> javax.transaction.TransactionManager;</div><div class="line"><span class="keyword">import</span> javax.transaction.UserTransaction;</div><div class="line"></div><div class="line"><span class="meta">@Configuration</span></div><div class="line"><span class="comment">//启用注解事务管理，使用CGLib代理</span></div><div class="line"><span class="meta">@EnableTransactionManagement</span>(proxyTargetClass = <span class="keyword">true</span>)</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DataSourceConfig</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="meta">@Value</span>(<span class="string">"$&#123;spring.datasource.driver-class-name&#125;"</span>)</div><div class="line">    String driverClass;</div><div class="line">    <span class="meta">@Value</span>(<span class="string">"$&#123;spring.datasource.url&#125;"</span>)</div><div class="line">    String url;</div><div class="line">    <span class="meta">@Value</span>(<span class="string">"$&#123;spring.datasource.username&#125;"</span>)</div><div class="line">    String userName;</div><div class="line">    <span class="meta">@Value</span>(<span class="string">"$&#123;spring.datasource.password&#125;"</span>)</div><div class="line">    String passWord;</div><div class="line"></div><div class="line"></div><div class="line">    <span class="meta">@Value</span>(<span class="string">"$&#123;spring.datasource.driver-class-name2&#125;"</span>)</div><div class="line">    String driverClass2;</div><div class="line">    <span class="meta">@Value</span>(<span class="string">"$&#123;spring.datasource.url2&#125;"</span>)</div><div class="line">    String url2;</div><div class="line">    <span class="meta">@Value</span>(<span class="string">"$&#123;spring.datasource.username2&#125;"</span>)</div><div class="line">    String userName2;</div><div class="line">    <span class="meta">@Value</span>(<span class="string">"$&#123;spring.datasource.password2&#125;"</span>)</div><div class="line">    String passWord2;</div><div class="line"></div><div class="line"></div><div class="line">    <span class="meta">@Bean</span>(name = <span class="string">"userTransaction"</span>)</div><div class="line">    <span class="function"><span class="keyword">public</span> UserTransaction <span class="title">userTransaction</span><span class="params">()</span> <span class="keyword">throws</span> Throwable </span>&#123;</div><div class="line">        UserTransactionImp userTransactionImp = <span class="keyword">new</span> UserTransactionImp();</div><div class="line">        userTransactionImp.setTransactionTimeout(<span class="number">300</span>);</div><div class="line">        <span class="keyword">return</span> userTransactionImp;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Bean</span>(name = <span class="string">"atomikosTransactionManager"</span>, initMethod = <span class="string">"init"</span>, destroyMethod = <span class="string">"close"</span>)</div><div class="line">    <span class="function"><span class="keyword">public</span> TransactionManager <span class="title">atomikosTransactionManager</span><span class="params">()</span> <span class="keyword">throws</span> Throwable </span>&#123;</div><div class="line">        UserTransactionManager userTransactionManager = <span class="keyword">new</span> UserTransactionManager();</div><div class="line">        userTransactionManager.setForceShutdown(<span class="keyword">true</span>);</div><div class="line">        <span class="keyword">return</span> userTransactionManager;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Bean</span>(name = <span class="string">"transactionManager"</span>)</div><div class="line">    <span class="meta">@DependsOn</span>(&#123; <span class="string">"userTransaction"</span>, <span class="string">"atomikosTransactionManager"</span> &#125;)</div><div class="line">    <span class="function"><span class="keyword">public</span> PlatformTransactionManager <span class="title">transactionManager</span><span class="params">()</span> <span class="keyword">throws</span> Throwable </span>&#123;</div><div class="line">        UserTransaction userTransaction = userTransaction();</div><div class="line">        TransactionManager atomikosTransactionManager = atomikosTransactionManager();</div><div class="line">        JtaTransactionManager jtaTransactionManager = <span class="keyword">new</span> JtaTransactionManager(userTransaction, atomikosTransactionManager);</div><div class="line">        jtaTransactionManager.setAllowCustomIsolationLevels(<span class="keyword">true</span>);</div><div class="line">        <span class="keyword">return</span> jtaTransactionManager;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Bean</span>(name = <span class="string">"dataSource"</span>, initMethod = <span class="string">"init"</span>, destroyMethod = <span class="string">"close"</span>)</div><div class="line">    <span class="function"><span class="keyword">public</span> DataSource <span class="title">dataSource</span><span class="params">()</span> </span>&#123;</div><div class="line">        System.out.println(<span class="string">"dataSource init"</span>);</div><div class="line">        <span class="comment">//Oracle:oracle.jdbc.xa.client.OracleXADataSource</span></div><div class="line">        <span class="comment">//Druid:com.alibaba.druid.pool.xa.DruidXADataSource</span></div><div class="line">        <span class="comment">//Postgresql:org.postgresql.xa.PGXADataSource</span></div><div class="line">        MysqlXADataSource mysqlXaDataSource = <span class="keyword">new</span> MysqlXADataSource();</div><div class="line">        mysqlXaDataSource.setUrl(url);</div><div class="line">        mysqlXaDataSource.setPassword(passWord);</div><div class="line">        mysqlXaDataSource.setUser(userName);</div><div class="line">        mysqlXaDataSource.setPinGlobalTxToPhysicalConnection(<span class="keyword">true</span>);</div><div class="line"></div><div class="line">        AtomikosDataSourceBean xaDataSource = <span class="keyword">new</span> AtomikosDataSourceBean();</div><div class="line">        xaDataSource.setXaDataSource(mysqlXaDataSource);</div><div class="line">        xaDataSource.setUniqueResourceName(<span class="string">"dataSource"</span>);</div><div class="line">        xaDataSource.setMinPoolSize(<span class="number">10</span>);</div><div class="line">        xaDataSource.setPoolSize(<span class="number">10</span>);</div><div class="line">        xaDataSource.setMaxPoolSize(<span class="number">30</span>);</div><div class="line">        xaDataSource.setBorrowConnectionTimeout(<span class="number">60</span>);</div><div class="line">        xaDataSource.setReapTimeout(<span class="number">20</span>);</div><div class="line">        xaDataSource.setMaxIdleTime(<span class="number">60</span>);</div><div class="line">        xaDataSource.setMaintenanceInterval(<span class="number">60</span>);</div><div class="line">        <span class="keyword">return</span> xaDataSource;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Bean</span>(name = <span class="string">"dataSource2"</span>, initMethod = <span class="string">"init"</span>, destroyMethod = <span class="string">"close"</span>)</div><div class="line">    <span class="function"><span class="keyword">public</span> DataSource <span class="title">dataSource2</span><span class="params">()</span> </span>&#123;</div><div class="line">        System.out.println(<span class="string">"dataSource2 init"</span>);</div><div class="line">        MysqlXADataSource mysqlXaDataSource = <span class="keyword">new</span> MysqlXADataSource();</div><div class="line">        mysqlXaDataSource.setUrl(url2);</div><div class="line">        mysqlXaDataSource.setPassword(passWord2);</div><div class="line">        mysqlXaDataSource.setUser(userName2);</div><div class="line">        mysqlXaDataSource.setPinGlobalTxToPhysicalConnection(<span class="keyword">true</span>);</div><div class="line"></div><div class="line">        AtomikosDataSourceBean xaDataSource = <span class="keyword">new</span> AtomikosDataSourceBean();</div><div class="line">        xaDataSource.setXaDataSource(mysqlXaDataSource);</div><div class="line">        xaDataSource.setUniqueResourceName(<span class="string">"dataSource2"</span>);</div><div class="line">        xaDataSource.setMinPoolSize(<span class="number">10</span>);</div><div class="line">        xaDataSource.setPoolSize(<span class="number">10</span>);</div><div class="line">        xaDataSource.setMaxPoolSize(<span class="number">30</span>);</div><div class="line">        xaDataSource.setBorrowConnectionTimeout(<span class="number">60</span>);</div><div class="line">        xaDataSource.setReapTimeout(<span class="number">20</span>);</div><div class="line">        xaDataSource.setMaxIdleTime(<span class="number">60</span>);</div><div class="line">        xaDataSource.setMaintenanceInterval(<span class="number">60</span>);</div><div class="line">        <span class="keyword">return</span> xaDataSource;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Bean</span>(name = <span class="string">"jdbcTemplate"</span>)</div><div class="line">    <span class="function"><span class="keyword">public</span> JdbcTemplate <span class="title">jdbcTemplate</span><span class="params">()</span></span>&#123;</div><div class="line">        JdbcTemplate jdbcTemplate = <span class="keyword">new</span> JdbcTemplate(dataSource());</div><div class="line">        <span class="keyword">return</span> jdbcTemplate;</div><div class="line">    &#125;</div><div class="line"></div><div class="line"></div><div class="line">    <span class="meta">@Bean</span>(name = <span class="string">"jdbcTemplate2"</span>)</div><div class="line">    <span class="function"><span class="keyword">public</span> JdbcTemplate <span class="title">jdbcTemplate2</span><span class="params">()</span></span>&#123;</div><div class="line">        JdbcTemplate jdbcTemplate = <span class="keyword">new</span> JdbcTemplate(dataSource2());</div><div class="line">        <span class="keyword">return</span> jdbcTemplate;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>项目编译路径下可以创建一个<strong>jta.properties</strong>文件，用于对Atomikos的相关属性进行配置，不过也可以不加这个文件，因为所有的属性都有默认值。<br><figure class="highlight yml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line">com.atomikos.icatch.enable_logging=<span class="literal">true</span></div><div class="line">com.atomikos.icatch.force_shutdown_on_vm_exit=<span class="literal">false</span></div><div class="line">com.atomikos.icatch.automatic_resource_registration=<span class="literal">true</span></div><div class="line">com.atomikos.icatch.checkpoint_interval=<span class="number">500</span></div><div class="line">com.atomikos.icatch.serial_jta_transactions=<span class="literal">true</span></div><div class="line">com.atomikos.icatch.default_jta_timeout=<span class="number">10000</span></div><div class="line">com.atomikos.icatch.max_timeout=<span class="number">300000</span></div><div class="line">com.atomikos.icatch.log_base_dir=./</div><div class="line">com.atomikos.icatch.threaded_2pc=<span class="literal">false</span></div><div class="line">com.atomikos.icatch.max_actives=<span class="number">50</span></div><div class="line">com.atomikos.icatch.log_base_name=tmlog</div><div class="line">java.naming.factory.initial=com.sun.jndi.rmi.registry.RegistryContextFactory</div><div class="line">com.atomikos.icatch.client_demarcation=<span class="literal">false</span></div><div class="line">java.naming.provider.url=rmi://localhost:<span class="number">1099</span></div><div class="line">com.atomikos.icatch.rmi_export_class=none</div><div class="line">com.atomikos.icatch.trust_client_tm=<span class="literal">false</span></div><div class="line">com.atomikos.icatch.forget_orphaned_log_entries_delay=<span class="number">86400000</span></div><div class="line">com.atomikos.icatch.recovery_delay=$&#123;com.atomikos.icatch.default_jta_timeout&#125;</div><div class="line">com.atomikos.icatch.oltp_max_retries=<span class="number">5</span></div><div class="line">com.atomikos.icatch.oltp_retry_interval=<span class="number">10000</span></div><div class="line">com.atomikos.icatch.allow_subtransactions=<span class="literal">true</span></div></pre></td></tr></table></figure></p>
<hr>
<h2 id="Spring-Boot中Atomikos与Hibernate4多数据源集成方法"><a href="#Spring-Boot中Atomikos与Hibernate4多数据源集成方法" class="headerlink" title="Spring Boot中Atomikos与Hibernate4多数据源集成方法"></a>Spring Boot中Atomikos与Hibernate4多数据源集成方法</h2><p>Atomikos与Hibernate4集成方法与JDBC类似，我们在pom中加入hibernate的依赖，并对<strong>DataSourceConfig</strong>进行改造<br><strong>pom</strong><br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.hibernate<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>hibernate-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.3.5.Final<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p><strong>DataSourceConfig</strong><br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div><div class="line">155</div><div class="line">156</div><div class="line">157</div><div class="line">158</div><div class="line">159</div><div class="line">160</div><div class="line">161</div><div class="line">162</div><div class="line">163</div><div class="line">164</div><div class="line">165</div><div class="line">166</div><div class="line">167</div><div class="line">168</div><div class="line">169</div><div class="line">170</div><div class="line">171</div><div class="line">172</div><div class="line">173</div><div class="line">174</div><div class="line">175</div><div class="line">176</div><div class="line">177</div><div class="line">178</div><div class="line">179</div><div class="line">180</div><div class="line">181</div><div class="line">182</div><div class="line">183</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.example;</div><div class="line"></div><div class="line"><span class="keyword">import</span> com.atomikos.icatch.jta.UserTransactionImp;</div><div class="line"><span class="keyword">import</span> com.atomikos.icatch.jta.UserTransactionManager;</div><div class="line"><span class="keyword">import</span> com.atomikos.jdbc.AtomikosDataSourceBean;</div><div class="line"><span class="keyword">import</span> com.example.hibernate.CP_HibernateDAO;</div><div class="line"><span class="keyword">import</span> com.example.hibernate.impl.CP_Hibernate4DAOImpl;</div><div class="line"><span class="keyword">import</span> com.mysql.jdbc.jdbc2.optional.MysqlXADataSource;</div><div class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Value;</div><div class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</div><div class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</div><div class="line"><span class="keyword">import</span> org.springframework.context.annotation.DependsOn;</div><div class="line"><span class="keyword">import</span> org.springframework.orm.hibernate4.LocalSessionFactoryBean;</div><div class="line"><span class="keyword">import</span> org.springframework.transaction.PlatformTransactionManager;</div><div class="line"><span class="keyword">import</span> org.springframework.transaction.annotation.EnableTransactionManagement;</div><div class="line"><span class="keyword">import</span> org.springframework.transaction.jta.JtaTransactionManager;</div><div class="line"></div><div class="line"><span class="keyword">import</span> javax.sql.DataSource;</div><div class="line"><span class="keyword">import</span> javax.transaction.TransactionManager;</div><div class="line"><span class="keyword">import</span> javax.transaction.UserTransaction;</div><div class="line"><span class="keyword">import</span> java.util.Properties;</div><div class="line"></div><div class="line"><span class="meta">@Configuration</span></div><div class="line"><span class="meta">@EnableTransactionManagement</span>(proxyTargetClass = <span class="keyword">true</span>)</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DataSourceConfig</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="meta">@Value</span>(<span class="string">"$&#123;spring.datasource.driver-class-name&#125;"</span>)</div><div class="line">    String driverClass;</div><div class="line">    <span class="meta">@Value</span>(<span class="string">"$&#123;spring.datasource.url&#125;"</span>)</div><div class="line">    String url;</div><div class="line">    <span class="meta">@Value</span>(<span class="string">"$&#123;spring.datasource.username&#125;"</span>)</div><div class="line">    String userName;</div><div class="line">    <span class="meta">@Value</span>(<span class="string">"$&#123;spring.datasource.password&#125;"</span>)</div><div class="line">    String passWord;</div><div class="line"></div><div class="line"></div><div class="line">    <span class="meta">@Value</span>(<span class="string">"$&#123;spring.datasource.driver-class-name2&#125;"</span>)</div><div class="line">    String driverClass2;</div><div class="line">    <span class="meta">@Value</span>(<span class="string">"$&#123;spring.datasource.url2&#125;"</span>)</div><div class="line">    String url2;</div><div class="line">    <span class="meta">@Value</span>(<span class="string">"$&#123;spring.datasource.username2&#125;"</span>)</div><div class="line">    String userName2;</div><div class="line">    <span class="meta">@Value</span>(<span class="string">"$&#123;spring.datasource.password2&#125;"</span>)</div><div class="line">    String passWord2;</div><div class="line"></div><div class="line"></div><div class="line">    <span class="meta">@Bean</span>(name = <span class="string">"userTransaction"</span>)</div><div class="line">    <span class="function"><span class="keyword">public</span> UserTransaction <span class="title">userTransaction</span><span class="params">()</span> <span class="keyword">throws</span> Throwable </span>&#123;</div><div class="line">        UserTransactionImp userTransactionImp = <span class="keyword">new</span> UserTransactionImp();</div><div class="line">        userTransactionImp.setTransactionTimeout(<span class="number">10000</span>);</div><div class="line">        <span class="keyword">return</span> userTransactionImp;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Bean</span>(name = <span class="string">"atomikosTransactionManager"</span>, initMethod = <span class="string">"init"</span>, destroyMethod = <span class="string">"close"</span>)</div><div class="line">    <span class="function"><span class="keyword">public</span> TransactionManager <span class="title">atomikosTransactionManager</span><span class="params">()</span> <span class="keyword">throws</span> Throwable </span>&#123;</div><div class="line">        UserTransactionManager userTransactionManager = <span class="keyword">new</span> UserTransactionManager();</div><div class="line">        userTransactionManager.setForceShutdown(<span class="keyword">true</span>);</div><div class="line">        <span class="keyword">return</span> userTransactionManager;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Bean</span>(name = <span class="string">"transactionManager"</span>)</div><div class="line">    <span class="meta">@DependsOn</span>(&#123; <span class="string">"userTransaction"</span>, <span class="string">"atomikosTransactionManager"</span> &#125;)</div><div class="line">    <span class="function"><span class="keyword">public</span> PlatformTransactionManager <span class="title">transactionManager</span><span class="params">()</span> <span class="keyword">throws</span> Throwable </span>&#123;</div><div class="line">        System.out.println();</div><div class="line">        UserTransaction userTransaction = userTransaction();</div><div class="line">        TransactionManager atomikosTransactionManager = atomikosTransactionManager();</div><div class="line">        JtaTransactionManager jtaTransactionManager = <span class="keyword">new</span> JtaTransactionManager(userTransaction, atomikosTransactionManager);</div><div class="line">        jtaTransactionManager.setAllowCustomIsolationLevels(<span class="keyword">true</span>);</div><div class="line"></div><div class="line">        <span class="keyword">return</span> jtaTransactionManager;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Bean</span>(name = <span class="string">"dataSource"</span>, initMethod = <span class="string">"init"</span>, destroyMethod = <span class="string">"close"</span>)</div><div class="line">    <span class="function"><span class="keyword">public</span> DataSource <span class="title">dataSource</span><span class="params">()</span> </span>&#123;</div><div class="line">        System.out.println();</div><div class="line"></div><div class="line">        MysqlXADataSource mysqlXaDataSource = <span class="keyword">new</span> MysqlXADataSource();</div><div class="line">        mysqlXaDataSource.setUrl(url);</div><div class="line">        mysqlXaDataSource.setPassword(passWord);</div><div class="line">        mysqlXaDataSource.setUser(userName);</div><div class="line">        mysqlXaDataSource.setPinGlobalTxToPhysicalConnection(<span class="keyword">true</span>);</div><div class="line"></div><div class="line">        AtomikosDataSourceBean xaDataSource = <span class="keyword">new</span> AtomikosDataSourceBean();</div><div class="line">        xaDataSource.setXaDataSource(mysqlXaDataSource);</div><div class="line">        xaDataSource.setUniqueResourceName(<span class="string">"dataSource"</span>);</div><div class="line">        xaDataSource.setMinPoolSize(<span class="number">10</span>);</div><div class="line">        xaDataSource.setPoolSize(<span class="number">10</span>);</div><div class="line">        xaDataSource.setMaxPoolSize(<span class="number">30</span>);</div><div class="line">        xaDataSource.setBorrowConnectionTimeout(<span class="number">60</span>);</div><div class="line">        xaDataSource.setReapTimeout(<span class="number">20</span>);</div><div class="line">        xaDataSource.setMaxIdleTime(<span class="number">60</span>);</div><div class="line">        xaDataSource.setMaintenanceInterval(<span class="number">60</span>);</div><div class="line"></div><div class="line">        <span class="keyword">return</span> xaDataSource;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Bean</span>(name = <span class="string">"dataSource2"</span>, initMethod = <span class="string">"init"</span>, destroyMethod = <span class="string">"close"</span>)</div><div class="line">    <span class="function"><span class="keyword">public</span> DataSource <span class="title">dataSource2</span><span class="params">()</span> </span>&#123;</div><div class="line">        System.out.println();</div><div class="line">        MysqlXADataSource mysqlXaDataSource = <span class="keyword">new</span> MysqlXADataSource();</div><div class="line">        mysqlXaDataSource.setUrl(url2);</div><div class="line">        mysqlXaDataSource.setPassword(passWord2);</div><div class="line">        mysqlXaDataSource.setUser(userName2);</div><div class="line">        mysqlXaDataSource.setPinGlobalTxToPhysicalConnection(<span class="keyword">true</span>);</div><div class="line"></div><div class="line">        AtomikosDataSourceBean xaDataSource = <span class="keyword">new</span> AtomikosDataSourceBean();</div><div class="line">        xaDataSource.setXaDataSource(mysqlXaDataSource);</div><div class="line">        xaDataSource.setUniqueResourceName(<span class="string">"dataSource2"</span>);</div><div class="line">        xaDataSource.setMinPoolSize(<span class="number">10</span>);</div><div class="line">        xaDataSource.setPoolSize(<span class="number">10</span>);</div><div class="line">        xaDataSource.setMaxPoolSize(<span class="number">30</span>);</div><div class="line">        xaDataSource.setBorrowConnectionTimeout(<span class="number">60</span>);</div><div class="line">        xaDataSource.setReapTimeout(<span class="number">20</span>);</div><div class="line">        xaDataSource.setMaxIdleTime(<span class="number">60</span>);</div><div class="line">        xaDataSource.setMaintenanceInterval(<span class="number">60</span>);</div><div class="line">        <span class="keyword">return</span> xaDataSource;</div><div class="line">    &#125;</div><div class="line"></div><div class="line"></div><div class="line">    <span class="meta">@Bean</span>(name = <span class="string">"sessionFactory"</span>)</div><div class="line">    <span class="function"><span class="keyword">public</span> LocalSessionFactoryBean <span class="title">localSessionFactoryBean</span><span class="params">()</span> </span>&#123;</div><div class="line">        System.out.println(<span class="string">"sessionFactory"</span>);</div><div class="line">        LocalSessionFactoryBean sessionFactory = <span class="keyword">new</span> LocalSessionFactoryBean();</div><div class="line">        sessionFactory.setDataSource(dataSource());</div><div class="line">        <span class="comment">//扫描实体对象的目录，不同的数据源，实体要存放不同的目录</span></div><div class="line">        String[] packagesToScan = <span class="keyword">new</span> String[] &#123; <span class="string">"com.example.model.ds1"</span> &#125;;</div><div class="line">        sessionFactory.setPackagesToScan(packagesToScan);</div><div class="line"></div><div class="line">        Properties hibernateProperties = <span class="keyword">new</span> Properties();</div><div class="line">        hibernateProperties.setProperty(<span class="string">"hibernate.dialect"</span>, <span class="string">"org.hibernate.dialect.MySQLDialect"</span>);</div><div class="line">        hibernateProperties.setProperty(<span class="string">"hibernate.show_sql"</span>, <span class="string">"true"</span>);</div><div class="line"></div><div class="line">        <span class="comment">//开启Hibernate对JTA的支持</span></div><div class="line">        hibernateProperties.setProperty(<span class="string">"hibernate.current_session_context_class"</span>, <span class="string">"jta"</span>);</div><div class="line">        hibernateProperties.setProperty(<span class="string">"hibernate.transaction.factory_class"</span>, <span class="string">"org.hibernate.transaction.JTATransactionFactory"</span>);</div><div class="line"></div><div class="line">        sessionFactory.setHibernateProperties(hibernateProperties);</div><div class="line"></div><div class="line">        <span class="keyword">return</span> sessionFactory;</div><div class="line"></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Bean</span>(name = <span class="string">"sessionFactory2"</span>)</div><div class="line">    <span class="function"><span class="keyword">public</span> LocalSessionFactoryBean <span class="title">localSessionFactoryBean2</span><span class="params">()</span> </span>&#123;</div><div class="line">        System.out.println(<span class="string">"sessionFactory2"</span>);</div><div class="line">        LocalSessionFactoryBean sessionFactory = <span class="keyword">new</span> LocalSessionFactoryBean();</div><div class="line">        sessionFactory.setDataSource(dataSource2());</div><div class="line">        <span class="comment">//扫描实体对象的目录，不同的数据源，实体要存放不同的目录</span></div><div class="line">        String[] packagesToScan = <span class="keyword">new</span> String[] &#123; <span class="string">"com.example.model.ds2"</span> &#125;;</div><div class="line">        sessionFactory.setPackagesToScan(packagesToScan);</div><div class="line"></div><div class="line">        Properties hibernateProperties = <span class="keyword">new</span> Properties();</div><div class="line">        hibernateProperties.setProperty(<span class="string">"hibernate.dialect"</span>, <span class="string">"org.hibernate.dialect.MySQLDialect"</span>);</div><div class="line">        hibernateProperties.setProperty(<span class="string">"hibernate.show_sql"</span>, <span class="string">"true"</span>);</div><div class="line"></div><div class="line">        <span class="comment">//开启Hibernate对JTA的支持</span></div><div class="line">        hibernateProperties.setProperty(<span class="string">"hibernate.current_session_context_class"</span>, <span class="string">"jta"</span>);</div><div class="line">        hibernateProperties.setProperty(<span class="string">"hibernate.transaction.factory_class"</span>, <span class="string">"org.hibernate.transaction.JTATransactionFactory"</span>);</div><div class="line"></div><div class="line">        sessionFactory.setHibernateProperties(hibernateProperties);</div><div class="line"></div><div class="line">        <span class="keyword">return</span> sessionFactory;</div><div class="line"></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Bean</span>(name = <span class="string">"hibernateDAO"</span>)</div><div class="line">    <span class="function"><span class="keyword">public</span> CP_HibernateDAO <span class="title">hibernate4Dao</span><span class="params">()</span> </span>&#123;</div><div class="line">        System.out.println(<span class="string">"hibernateDAO"</span>);</div><div class="line">        CP_Hibernate4DAOImpl dao = <span class="keyword">new</span> CP_Hibernate4DAOImpl();</div><div class="line">        <span class="comment">//绑定SessionFactory</span></div><div class="line">        dao.setSessionFactory(localSessionFactoryBean().getObject());</div><div class="line">        <span class="keyword">return</span> dao;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Bean</span>(name = <span class="string">"hibernateDAO2"</span>)</div><div class="line">    <span class="function"><span class="keyword">public</span> CP_HibernateDAO <span class="title">hibernate4Dao2</span><span class="params">()</span> </span>&#123;</div><div class="line">        System.out.println(<span class="string">"hibernateDAO2"</span>);</div><div class="line">        CP_Hibernate4DAOImpl dao = <span class="keyword">new</span> CP_Hibernate4DAOImpl();</div><div class="line">        <span class="comment">//绑定SessionFactory2</span></div><div class="line">        dao.setSessionFactory(localSessionFactoryBean2().getObject());</div><div class="line">        <span class="keyword">return</span> dao;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Entity</span></div><div class="line"><span class="meta">@Table</span>(name = <span class="string">"person"</span>)</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span> <span class="keyword">implements</span> <span class="title">Serializable</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID = -<span class="number">1L</span>;</div><div class="line"></div><div class="line">    <span class="meta">@Id</span></div><div class="line">    <span class="meta">@GeneratedValue</span>(strategy = GenerationType.AUTO)</div><div class="line">    <span class="meta">@Column</span>(name = <span class="string">"p_id"</span>)</div><div class="line">    <span class="keyword">private</span> Long id;</div><div class="line">    <span class="meta">@Column</span>(name = <span class="string">"p_name"</span>)</div><div class="line">    <span class="keyword">private</span> String name;</div><div class="line">    <span class="meta">@Column</span>(name = <span class="string">"p_age"</span>)</div><div class="line">    <span class="keyword">private</span> Integer age;</div><div class="line">    <span class="comment">//setter and getter</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><strong>CP_HibernateDAO</strong>是我们自定义的Hibernate的通用Dao接口，其定义的方法和和实现类<strong>CP_Hibernate4DAOImpl</strong>代码如下：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.example.hibernate;</div><div class="line"></div><div class="line"><span class="keyword">import</span> java.util.List;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">CP_HibernateDAO</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">public</span> List&lt;?&gt; findAll(Class&lt;?&gt; entityClazz, String... str);</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">save</span><span class="params">(Object entity)</span></span>;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.example.hibernate.impl;</div><div class="line"></div><div class="line"><span class="keyword">import</span> com.example.hibernate.CP_HibernateDAO;</div><div class="line"><span class="keyword">import</span> org.hibernate.Criteria;</div><div class="line"><span class="keyword">import</span> org.hibernate.Session;</div><div class="line"><span class="keyword">import</span> org.hibernate.SessionFactory;</div><div class="line"><span class="keyword">import</span> org.hibernate.criterion.DetachedCriteria;</div><div class="line"></div><div class="line"><span class="keyword">import</span> java.util.List;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CP_Hibernate4DAOImpl</span> <span class="keyword">implements</span> <span class="title">CP_HibernateDAO</span> </span>&#123;</div><div class="line"></div><div class="line"></div><div class="line">    <span class="keyword">private</span> SessionFactory sessionFactory;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> SessionFactory <span class="title">getSessionFactory</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> sessionFactory;</div><div class="line">    &#125;</div><div class="line">    <span class="comment">//绑定SessionFactory</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setSessionFactory</span><span class="params">(SessionFactory sessionFactory)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.sessionFactory = sessionFactory;</div><div class="line">    &#125;</div><div class="line"></div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">private</span> Session <span class="title">getHibernateSession</span><span class="params">()</span> </span>&#123;</div><div class="line">        Session session = sessionFactory.openSession();</div><div class="line">        <span class="keyword">return</span> session;</div><div class="line">    &#125;</div><div class="line"></div><div class="line"></div><div class="line">    <span class="comment">/*</span></div><div class="line">     * @see com.example.hibernate.CP_HibernateDAO#findAll()</div><div class="line">     */</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="keyword">public</span> List&lt;?&gt; findAll(Class&lt;?&gt; entityClazz, String... str) &#123;</div><div class="line">        DetachedCriteria dc = DetachedCriteria.forClass(entityClazz);</div><div class="line">        List&lt;?&gt; list = findAllByCriteria(dc);</div><div class="line">        <span class="keyword">return</span> list;</div><div class="line">    &#125;</div><div class="line"></div><div class="line"></div><div class="line">    <span class="comment">/*</span></div><div class="line">     * @see com.example.hibernate.CP_HibernateDAO#save(java.lang.Object)</div><div class="line">     */</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">save</span><span class="params">(Object entity)</span> </span>&#123;</div><div class="line"></div><div class="line">        getHibernateSession().save(entity);</div><div class="line">        <span class="comment">//注意这里一定要执行flush方法</span></div><div class="line">        getHibernateSession().flush();</div><div class="line">    &#125;</div><div class="line"></div><div class="line"></div><div class="line">    <span class="keyword">public</span> List&lt;?&gt; findAllByCriteria(DetachedCriteria detachedCriteria) &#123;</div><div class="line">        <span class="comment">// TODO Auto-generated method stub</span></div><div class="line">        Criteria criteria = detachedCriteria</div><div class="line">                .getExecutableCriteria(getHibernateSession());</div><div class="line">        <span class="keyword">return</span> criteria.list();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<hr>
<p><strong>说明</strong><br>需要注意两点：</p>
<ol>
<li>session必须使用sessionFactory.openSession()的方式获得，不能使用sessionFactory.getCurrentSession()。</li>
<li>更新操作必须调用session.flush()方法。</li>
</ol>
<p>Spring配置文件的方式，可以参考：<a href="http://hanqunfeng.iteye.com/blog/2121427" target="_blank" rel="external">Spring4+Hibernate4+Atomikos3.3多数据源事务管理</a></p>
<hr>
<h2 id="Spring-Boot中Mybitas的使用"><a href="#Spring-Boot中Mybitas的使用" class="headerlink" title="Spring Boot中Mybitas的使用"></a>Spring Boot中Mybitas的使用</h2><p>创建项目时，我们可以选择<strong>mybatis-spring-boot-starter</strong>依赖，这样可以激活SpringBoot对Mybatis的自动配置类。</p>
<p><strong>pom</strong>中添加依赖<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis.spring.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.1.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p><strong>application.properties</strong>中添加mybaits的自动配置属性，可以查看<strong>MybatisProperties</strong>了解可以配置哪些属性<br><figure class="highlight yml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#mapper配置文件路径，如果是基于注解的形式可以不需要配置该属性</span></div><div class="line">mybatis.mapper-locations=classpath:mapper/*.xml</div></pre></td></tr></table></figure></p>
<p>Mapper接口上要配置<strong>@Mapper</strong>注解，因为<strong>mybatis-spring-boot-starter</strong>的自动配置会扫描<strong>@Mapper</strong>注解来注册Mapper接口。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Mapper</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">PersonMapper</span> </span>&#123;</div><div class="line">    <span class="comment">//………………</span></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>此时同样可以使用<strong>@Transactional</strong>注解</p>
<hr>
<p><strong>说明</strong><br>可以使用maven的mybatis-generator插件自动生成代码，参考<a href="http://hanqunfeng.iteye.com/admin/blogs/2328749" target="_blank" rel="external">maven插件–MyBatis自动生成代码</a></p>
<hr>
<p><strong>mybatis-spring-boot-starter</strong>不利于扩展，所以还是我们自己实现个mybitas的配置类吧。</p>
<p><strong>pom</strong>中去掉<strong>mybatis-spring-boot-starter</strong>的依赖，增加mybatis的依赖<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!--</span></div><div class="line">&lt;dependency&gt;</div><div class="line">    &lt;groupId&gt;org.mybatis.spring.boot&lt;/groupId&gt;</div><div class="line">    &lt;artifactId&gt;mybatis-spring-boot-starter&lt;/artifactId&gt;</div><div class="line">    &lt;version&gt;1.1.1&lt;/version&gt;</div><div class="line">&lt;/dependency&gt;--&gt;</div><div class="line"></div><div class="line"><span class="comment">&lt;!--Mybatis--&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.4.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-spring<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.3.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-jdbc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.3.4.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p>创建<strong>MyBatisConfig</strong><br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Configuration</span></div><div class="line"><span class="meta">@EnableTransactionManagement</span>(proxyTargetClass = <span class="keyword">true</span>)</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyBatisConfig</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="meta">@Value</span>(<span class="string">"$&#123;spring.datasource.driver-class-name&#125;"</span>)</div><div class="line">    String driverClass;</div><div class="line">    <span class="meta">@Value</span>(<span class="string">"$&#123;spring.datasource.url&#125;"</span>)</div><div class="line">    String url;</div><div class="line">    <span class="meta">@Value</span>(<span class="string">"$&#123;spring.datasource.username&#125;"</span>)</div><div class="line">    String userName;</div><div class="line">    <span class="meta">@Value</span>(<span class="string">"$&#123;spring.datasource.password&#125;"</span>)</div><div class="line">    String passWord;</div><div class="line"></div><div class="line">    <span class="meta">@Bean</span>(name = <span class="string">"dataSource"</span>)</div><div class="line">    <span class="function"><span class="keyword">public</span> DataSource <span class="title">dataSource</span><span class="params">()</span> </span>&#123;</div><div class="line">        DriverManagerDataSource dataSource = <span class="keyword">new</span> DriverManagerDataSource();</div><div class="line">        dataSource.setDriverClassName(driverClass);</div><div class="line">        dataSource.setUrl(url);</div><div class="line">        dataSource.setUsername(userName);</div><div class="line">        dataSource.setPassword(passWord);</div><div class="line">        <span class="keyword">return</span> dataSource;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Bean</span>(name = <span class="string">"sqlSessionFactory"</span>)</div><div class="line">    <span class="function"><span class="keyword">public</span> SqlSessionFactory <span class="title">sqlSessionFactoryBean</span><span class="params">()</span> </span>&#123;</div><div class="line">        SqlSessionFactoryBean bean = <span class="keyword">new</span> SqlSessionFactoryBean();</div><div class="line">        bean.setDataSource(dataSource());</div><div class="line"></div><div class="line">        <span class="comment">//添加XML目录</span></div><div class="line">        ResourcePatternResolver resolver = <span class="keyword">new</span> PathMatchingResourcePatternResolver();</div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            bean.setMapperLocations(resolver.getResources(<span class="string">"classpath:mapper/*.xml"</span>));</div><div class="line">            <span class="keyword">return</span> bean.getObject();</div><div class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</div><div class="line">            e.printStackTrace();</div><div class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(e);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Bean</span></div><div class="line">    <span class="function"><span class="keyword">public</span> SqlSessionTemplate <span class="title">sqlSessionTemplate</span><span class="params">(SqlSessionFactory sqlSessionFactory)</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">new</span> SqlSessionTemplate(sqlSessionFactory);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Bean</span></div><div class="line">    <span class="function"><span class="keyword">public</span> PlatformTransactionManager <span class="title">annotationDrivenTransactionManager</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">new</span> DataSourceTransactionManager(dataSource());</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p><strong>MyBatisMapperScannerConfig</strong>，基于包扫描Mapper，此时不需要配置<strong>@Mapper</strong>注解<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Configuration</span></div><div class="line"><span class="comment">//必须在MyBatisConfig注册后再加载MapperScannerConfigurer，否则会报错</span></div><div class="line"><span class="meta">@AutoConfigureAfter</span>(MyBatisConfig.class)</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyBatisMapperScannerConfig</span> </span>&#123;</div><div class="line">    <span class="meta">@Bean</span></div><div class="line">    <span class="function"><span class="keyword">public</span> MapperScannerConfigurer <span class="title">mapperScannerConfigurer</span><span class="params">()</span> </span>&#123;</div><div class="line">        MapperScannerConfigurer mapperScannerConfigurer = <span class="keyword">new</span> MapperScannerConfigurer();</div><div class="line">        mapperScannerConfigurer.setSqlSessionFactoryBeanName(<span class="string">"sqlSessionFactory"</span>);</div><div class="line">        mapperScannerConfigurer.setBasePackage(<span class="string">"com.example.mapper"</span>);</div><div class="line">        <span class="keyword">return</span> mapperScannerConfigurer;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>关闭<strong>DataSourceAutoConfiguration</strong>，因为这里我们配置了数据源，所以需要关闭该自动配置，另外，<strong>MybatisAutoConfiguration</strong>也是基于<strong>DataSourceAutoConfiguration</strong>的，所以关闭了<strong>DataSourceAutoConfiguration</strong>也就同时关闭了<strong>MybatisAutoConfiguration</strong>。</p>
<hr>
<h2 id="Spring-Boot中Atomikos与Mybatis多数据源集成方法"><a href="#Spring-Boot中Atomikos与Mybatis多数据源集成方法" class="headerlink" title="Spring Boot中Atomikos与Mybatis多数据源集成方法"></a>Spring Boot中Atomikos与Mybatis多数据源集成方法</h2><p><strong>pom</strong><br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-jdbc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.3.4.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line"></div><div class="line"><span class="comment">&lt;!--Mybatis--&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.4.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-spring<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.3.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.atomikos<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>transactions-jdbc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.0.4<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.atomikos<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>transactions-jta<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.0.4<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.atomikos<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>transactions<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.0.4<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.atomikos<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>atomikos-util<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.0.4<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javax.transaction<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jta<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.1.37<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p><strong>MyBatisConfig</strong><br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Configuration</span></div><div class="line"><span class="meta">@EnableTransactionManagement</span>(proxyTargetClass = <span class="keyword">true</span>)</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyBatisConfig</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="meta">@Value</span>(<span class="string">"$&#123;spring.datasource.driver-class-name&#125;"</span>)</div><div class="line">    String driverClass;</div><div class="line">    <span class="meta">@Value</span>(<span class="string">"$&#123;spring.datasource.url&#125;"</span>)</div><div class="line">    String url;</div><div class="line">    <span class="meta">@Value</span>(<span class="string">"$&#123;spring.datasource.username&#125;"</span>)</div><div class="line">    String userName;</div><div class="line">    <span class="meta">@Value</span>(<span class="string">"$&#123;spring.datasource.password&#125;"</span>)</div><div class="line">    String passWord;</div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line">    <span class="meta">@Value</span>(<span class="string">"$&#123;spring.datasource.driver-class-name2&#125;"</span>)</div><div class="line">    String driverClass2;</div><div class="line">    <span class="meta">@Value</span>(<span class="string">"$&#123;spring.datasource.url2&#125;"</span>)</div><div class="line">    String url2;</div><div class="line">    <span class="meta">@Value</span>(<span class="string">"$&#123;spring.datasource.username2&#125;"</span>)</div><div class="line">    String userName2;</div><div class="line">    <span class="meta">@Value</span>(<span class="string">"$&#123;spring.datasource.password2&#125;"</span>)</div><div class="line">    String passWord2;</div><div class="line"></div><div class="line"></div><div class="line">    <span class="meta">@Bean</span>(name = <span class="string">"userTransaction"</span>)</div><div class="line">    <span class="function"><span class="keyword">public</span> UserTransaction <span class="title">userTransaction</span><span class="params">()</span> <span class="keyword">throws</span> Throwable </span>&#123;</div><div class="line">        UserTransactionImp userTransactionImp = <span class="keyword">new</span> UserTransactionImp();</div><div class="line">        userTransactionImp.setTransactionTimeout(<span class="number">10000</span>);</div><div class="line">        <span class="keyword">return</span> userTransactionImp;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Bean</span>(name = <span class="string">"atomikosTransactionManager"</span>, initMethod = <span class="string">"init"</span>, destroyMethod = <span class="string">"close"</span>)</div><div class="line">    <span class="function"><span class="keyword">public</span> TransactionManager <span class="title">atomikosTransactionManager</span><span class="params">()</span> <span class="keyword">throws</span> Throwable </span>&#123;</div><div class="line">        UserTransactionManager userTransactionManager = <span class="keyword">new</span> UserTransactionManager();</div><div class="line">        userTransactionManager.setForceShutdown(<span class="keyword">true</span>);</div><div class="line">        <span class="keyword">return</span> userTransactionManager;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Bean</span>(name = <span class="string">"transactionManager"</span>)</div><div class="line">    <span class="meta">@DependsOn</span>(&#123; <span class="string">"userTransaction"</span>, <span class="string">"atomikosTransactionManager"</span> &#125;)</div><div class="line">    <span class="function"><span class="keyword">public</span> PlatformTransactionManager <span class="title">transactionManager</span><span class="params">()</span> <span class="keyword">throws</span> Throwable </span>&#123;</div><div class="line">        UserTransaction userTransaction = userTransaction();</div><div class="line">        TransactionManager atomikosTransactionManager = atomikosTransactionManager();</div><div class="line">        JtaTransactionManager jtaTransactionManager = <span class="keyword">new</span> JtaTransactionManager(userTransaction, atomikosTransactionManager);</div><div class="line">        jtaTransactionManager.setAllowCustomIsolationLevels(<span class="keyword">true</span>);</div><div class="line">        <span class="keyword">return</span> jtaTransactionManager;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Bean</span>(name = <span class="string">"dataSource"</span>, initMethod = <span class="string">"init"</span>, destroyMethod = <span class="string">"close"</span>)</div><div class="line">    <span class="function"><span class="keyword">public</span> DataSource <span class="title">dataSource</span><span class="params">()</span> </span>&#123;</div><div class="line">        System.out.println(<span class="string">"dataSource init"</span>);</div><div class="line">        MysqlXADataSource mysqlXaDataSource = <span class="keyword">new</span> MysqlXADataSource();</div><div class="line">        mysqlXaDataSource.setUrl(url);</div><div class="line">        mysqlXaDataSource.setPassword(passWord);</div><div class="line">        mysqlXaDataSource.setUser(userName);</div><div class="line">        mysqlXaDataSource.setPinGlobalTxToPhysicalConnection(<span class="keyword">true</span>);</div><div class="line"></div><div class="line">        AtomikosDataSourceBean xaDataSource = <span class="keyword">new</span> AtomikosDataSourceBean();</div><div class="line">        xaDataSource.setXaDataSource(mysqlXaDataSource);</div><div class="line">        xaDataSource.setUniqueResourceName(<span class="string">"dataSource"</span>);</div><div class="line">        xaDataSource.setMinPoolSize(<span class="number">10</span>);</div><div class="line">        xaDataSource.setPoolSize(<span class="number">10</span>);</div><div class="line">        xaDataSource.setMaxPoolSize(<span class="number">30</span>);</div><div class="line">        xaDataSource.setBorrowConnectionTimeout(<span class="number">60</span>);</div><div class="line">        xaDataSource.setReapTimeout(<span class="number">20</span>);</div><div class="line">        xaDataSource.setMaxIdleTime(<span class="number">60</span>);</div><div class="line">        xaDataSource.setMaintenanceInterval(<span class="number">60</span>);</div><div class="line"></div><div class="line">        <span class="keyword">return</span> xaDataSource;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Bean</span>(name = <span class="string">"dataSource2"</span>, initMethod = <span class="string">"init"</span>, destroyMethod = <span class="string">"close"</span>)</div><div class="line">    <span class="function"><span class="keyword">public</span> DataSource <span class="title">dataSource2</span><span class="params">()</span> </span>&#123;</div><div class="line">        System.out.println(<span class="string">"dataSource2 init"</span>);</div><div class="line">        MysqlXADataSource mysqlXaDataSource = <span class="keyword">new</span> MysqlXADataSource();</div><div class="line">        mysqlXaDataSource.setUrl(url2);</div><div class="line">        mysqlXaDataSource.setPassword(passWord2);</div><div class="line">        mysqlXaDataSource.setUser(userName2);</div><div class="line">        mysqlXaDataSource.setPinGlobalTxToPhysicalConnection(<span class="keyword">true</span>);</div><div class="line"></div><div class="line">        AtomikosDataSourceBean xaDataSource = <span class="keyword">new</span> AtomikosDataSourceBean();</div><div class="line">        xaDataSource.setXaDataSource(mysqlXaDataSource);</div><div class="line">        xaDataSource.setUniqueResourceName(<span class="string">"dataSource2"</span>);</div><div class="line">        xaDataSource.setMinPoolSize(<span class="number">10</span>);</div><div class="line">        xaDataSource.setPoolSize(<span class="number">10</span>);</div><div class="line">        xaDataSource.setMaxPoolSize(<span class="number">30</span>);</div><div class="line">        xaDataSource.setBorrowConnectionTimeout(<span class="number">60</span>);</div><div class="line">        xaDataSource.setReapTimeout(<span class="number">20</span>);</div><div class="line">        xaDataSource.setMaxIdleTime(<span class="number">60</span>);</div><div class="line">        xaDataSource.setMaintenanceInterval(<span class="number">60</span>);</div><div class="line">        <span class="keyword">return</span> xaDataSource;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">//基于xml式Mapper</span></div><div class="line">    <span class="meta">@Bean</span>(name = <span class="string">"sqlSessionFactory"</span>)</div><div class="line">    <span class="function"><span class="keyword">public</span> SqlSessionFactory <span class="title">sqlSessionFactoryBean</span><span class="params">()</span> </span>&#123;</div><div class="line">        SqlSessionFactoryBean bean = <span class="keyword">new</span> SqlSessionFactoryBean();</div><div class="line">        bean.setDataSource(dataSource());</div><div class="line"></div><div class="line">        <span class="comment">//添加Mapper配置文件的目录</span></div><div class="line">        ResourcePatternResolver resolver = <span class="keyword">new</span> PathMatchingResourcePatternResolver();</div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            bean.setMapperLocations(resolver.getResources(<span class="string">"classpath:mapper/ds1/*.xml"</span>));</div><div class="line">            <span class="keyword">return</span> bean.getObject();</div><div class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</div><div class="line">            e.printStackTrace();</div><div class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(e);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Bean</span>(name = <span class="string">"sqlSessionTemplate"</span>)</div><div class="line">    <span class="function"><span class="keyword">public</span> SqlSessionTemplate <span class="title">sqlSessionTemplate</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">new</span> SqlSessionTemplate(sqlSessionFactoryBean());</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">//基于注解式Mapper</span></div><div class="line">    <span class="meta">@Bean</span>(name = <span class="string">"sqlSessionFactory2"</span>)</div><div class="line">    <span class="function"><span class="keyword">public</span> SqlSessionFactory <span class="title">sqlSessionFactoryBean2</span><span class="params">()</span> </span>&#123;</div><div class="line">        SqlSessionFactoryBean bean = <span class="keyword">new</span> SqlSessionFactoryBean();</div><div class="line">        bean.setDataSource(dataSource2());</div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            <span class="keyword">return</span> bean.getObject();</div><div class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</div><div class="line">            e.printStackTrace();</div><div class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(e);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Bean</span>(name = <span class="string">"sqlSessionTemplate2"</span>)</div><div class="line">    <span class="function"><span class="keyword">public</span> SqlSessionTemplate <span class="title">sqlSessionTemplate2</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">new</span> SqlSessionTemplate(sqlSessionFactoryBean2());</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p><strong>MyBatisMapperScannerConfig</strong><br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Configuration</span></div><div class="line"><span class="comment">//必须在MyBatisConfig注册后再加载MapperScannerConfigurer，否则会报错</span></div><div class="line"><span class="meta">@AutoConfigureAfter</span>(MyBatisConfig.class)</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyBatisMapperScannerConfig</span> </span>&#123;</div><div class="line">    <span class="meta">@Bean</span></div><div class="line">    <span class="function"><span class="keyword">public</span> MapperScannerConfigurer <span class="title">mapperScannerConfigurer</span><span class="params">()</span> </span>&#123;</div><div class="line">        MapperScannerConfigurer mapperScannerConfigurer = <span class="keyword">new</span> MapperScannerConfigurer();</div><div class="line">        <span class="comment">//绑定datasorce的sqlSessionFactory</span></div><div class="line">        mapperScannerConfigurer.setSqlSessionFactoryBeanName(<span class="string">"sqlSessionFactory"</span>);</div><div class="line">        <span class="comment">//扫描ds1目录来注册Mapper接口</span></div><div class="line">        mapperScannerConfigurer.setBasePackage(<span class="string">"com.example.mapper.ds1"</span>);</div><div class="line">        <span class="keyword">return</span> mapperScannerConfigurer;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Bean</span></div><div class="line">    <span class="function"><span class="keyword">public</span> MapperScannerConfigurer <span class="title">mapperScannerConfigurer2</span><span class="params">()</span> </span>&#123;</div><div class="line">        MapperScannerConfigurer mapperScannerConfigurer = <span class="keyword">new</span> MapperScannerConfigurer();</div><div class="line">        <span class="comment">//绑定datasorce2的sqlSessionFactory</span></div><div class="line">        mapperScannerConfigurer.setSqlSessionFactoryBeanName(<span class="string">"sqlSessionFactory2"</span>);</div><div class="line">        <span class="comment">//扫描ds2目录来注册Mapper接口</span></div><div class="line">        mapperScannerConfigurer.setBasePackage(<span class="string">"com.example.mapper.ds2"</span>);</div><div class="line">        <span class="keyword">return</span> mapperScannerConfigurer;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>这里要说明的是，如果两个数据源下的Mapper起了相同的类名，虽然他们在不同的包路径下，启动也会报错了，因为默认注册Mapper时使用的是类名称（不含包名），此时可以在Mapper上加上<strong>@Component(“personMapper”)</strong>注解</p>
<hr>
<h2 id="写在后面的话"><a href="#写在后面的话" class="headerlink" title="写在后面的话"></a>写在后面的话</h2><p>Spring Boot为我们提供了大量的<strong>spring-boot-starter-xxx</strong>来加快我们的开发流程，创建项目时就可以看到可供选择的各种<strong>spring-boot-starter-xxx</strong>，那么这么多的<strong>spring-boot-starter-xxx</strong>，我们是否都需要了解呢，如果项目中需要用到某一个功能，是否就应该加入这个<strong>spring-boot-starter-xxx</strong>呢？</p>
<p>笔者人为，<strong>spring-boot-starter-xxx</strong>提供的完整jar包依赖和自动配置固然很好，但是当我们要在项目中加入某一个功能时，作为开发人员，是应该清楚的知道该功能的依赖关系和配置逻辑的，所以并不一定需要引入SpringBoot的<strong>spring-boot-starter-xxx</strong>，而且SpringBoot对这些<strong>spring-boot-starter-xxx</strong>做的自动配置，如果我们并不熟悉和十分清楚，往往会给我们开发人员造成不明所以的困扰，所以，笔者建议，在对SpringBoot提供的某一个<strong>spring-boot-starter-xxx</strong>所提供的功能并不十分清楚时，还是使用配置类的方式吧。</p>
<p>还有，由于某些自动配置类的激活是根据项目中是否包含某个class或容器中是否注册了某个bean，所以笔者建议，如果项目中引入了新的jar包，或者手工注册了某个bean，都要通过debug的方式查看是否开启了某个自动配置。</p>
<p>另外，本文代码只是为了辅助说明，比如<strong>DriverManagerDataSource</strong>正式环境不建议使用，请更换为其它数据源，比如<strong>BasicDataSource</strong>。</p>
<p>本文示例代码下载地址：<a href="https://github.com/hanqunfeng/SpringBootStudy" target="_blank" rel="external">https://github.com/hanqunfeng/SpringBootStudy</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;摘要&quot;&gt;&lt;a href=&quot;#摘要&quot; class=&quot;headerlink&quot; title=&quot;摘要&quot;&gt;&lt;/a&gt;摘要&lt;/h2&gt;&lt;p&gt;看完本文你将掌握如下知识点：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Spring Boot对JDBC的支持&lt;/li&gt;
&lt;li&gt;Spring Boot项目多数据源的配置&lt;/li&gt;
&lt;li&gt;Spring Boot的事务管理&lt;/li&gt;
&lt;li&gt;Spring Boot项目多数据源的事务管理&lt;/li&gt;
&lt;li&gt;Spring Boot项目中使用Hibernate4的方法&lt;/li&gt;
&lt;li&gt;Spring Boot项目中使用Mybatis的方法&lt;/li&gt;
&lt;/ol&gt;
    
    </summary>
    
      <category term="技术" scheme="http://blog.hanqunfeng.com/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="Spring Boot" scheme="http://blog.hanqunfeng.com/tags/Spring-Boot/"/>
    
  </entry>
  
  <entry>
    <title>Spring Boot学习笔记03--深入了解SpringBoot的启动过程</title>
    <link href="http://blog.hanqunfeng.com/2016/12/13/spring-boot-study-springapplication/"/>
    <id>http://blog.hanqunfeng.com/2016/12/13/spring-boot-study-springapplication/</id>
    <published>2016-12-13T15:33:15.000Z</published>
    <updated>2016-12-13T06:50:49.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="摘要"><a href="#摘要" class="headerlink" title="摘要"></a>摘要</h2><p>看完本文你将掌握如下知识点：</p>
<ol>
<li>SpringApplication的作用及运行过程</li>
<li>SpringBootServletInitializer的作用及运行过程</li>
</ol>
<p><strong>PS:本节内容略显枯燥，如果对SpringBoot的启动过程不感兴趣，可以略过。</strong></p>
<a id="more"></a>
<hr>
<p><strong>SpringBoot系列</strong>：<a href="/tags/Spring-Boot/">Spring Boot学习笔记</a></p>
<hr>
<h2 id="深入了解SpringApplication"><a href="#深入了解SpringApplication" class="headerlink" title="深入了解SpringApplication"></a>深入了解SpringApplication</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@SpringBootApplication</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SpringBootWebDemoApplication</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">        SpringApplication.run(SpringBootWebDemoApplication.class, args);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>这就是SpringBoot的启动入口，通过前面的学习我们大体上了解了<strong>@SpringBootApplication</strong>的作用，接下来我们来认识一下<strong>SpringApplication</strong>。<br><a href="http://docs.spring.io/spring-boot/docs/current/api/org/springframework/boot/SpringApplication.html" target="_blank" rel="external">SpringApplication (Spring Boot Docs 1.4.2.RELEASE API)</a>。</p>
<h3 id="SpringApplication-run-SpringBootWebDemoApplication-class-args"><a href="#SpringApplication-run-SpringBootWebDemoApplication-class-args" class="headerlink" title="SpringApplication.run(SpringBootWebDemoApplication.class, args);"></a>SpringApplication.run(SpringBootWebDemoApplication.class, args);</h3><p>通过源码我们来看一下<strong>SpringApplication.run()</strong>方法的执行过程<br>1.调用static方法<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//1</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> ConfigurableApplicationContext <span class="title">run</span><span class="params">(Object source, String... args)</span> </span>&#123;<span class="keyword">return</span> run(<span class="keyword">new</span> Object[]&#123;source&#125;, args);&#125;</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> ConfigurableApplicationContext <span class="title">run</span><span class="params">(Object[] sources, String[] args)</span> </span></div><div class="line">&#123;<span class="keyword">return</span> (<span class="keyword">new</span> SpringApplication(sources)).run(args);&#125;</div></pre></td></tr></table></figure></p>
<p>2.创建SpringApplication对象<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//2</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="title">SpringApplication</span><span class="params">(Object... sources)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.bannerMode = Mode.CONSOLE; <span class="comment">//banner的打印模式，此时是控制台模式</span></div><div class="line">        <span class="keyword">this</span>.logStartupInfo = <span class="keyword">true</span>; <span class="comment">//开启日志</span></div><div class="line">        <span class="keyword">this</span>.addCommandLineProperties = <span class="keyword">true</span>;<span class="comment">//启用CommandLineProperties</span></div><div class="line">        <span class="keyword">this</span>.headless = <span class="keyword">true</span>;<span class="comment">//开启headless模式支持</span></div><div class="line">        <span class="keyword">this</span>.registerShutdownHook = <span class="keyword">true</span>;<span class="comment">//启用注册ShutdownHook，用于在非Web应用中关闭IoC容器和资源</span></div><div class="line">        <span class="keyword">this</span>.additionalProfiles = <span class="keyword">new</span> HashSet();</div><div class="line">        <span class="keyword">this</span>.initialize(sources);<span class="comment">//初始化</span></div><div class="line">    &#125;</div></pre></td></tr></table></figure></p>
<p>PS：Headless参考资料：<a href="https://www.oschina.net/translate/using-headless-mode-in-java-se" target="_blank" rel="external">在 Java SE 平台上使用 Headless 模式</a></p>
<p>3.初始化相关对象和属性<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//3</span></div><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">initialize</span><span class="params">(Object[] sources)</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span>(sources != <span class="keyword">null</span> &amp;&amp; sources.length &gt; <span class="number">0</span>) &#123;</div><div class="line">            <span class="keyword">this</span>.sources.addAll(Arrays.asList(sources));</div><div class="line">        &#125;</div><div class="line">        <span class="comment">//3.1判断是否是web运行环境，如果classpath中是否含有**WEB_ENVIRONMENT_CLASSES**指定的全部类，则返回true</span></div><div class="line">        <span class="keyword">this</span>.webEnvironment = <span class="keyword">this</span>.deduceWebEnvironment();</div><div class="line">        <span class="comment">//3.2找到*META-INF/spring.factories*中声明的所有ApplicationContextInitializer的实现类并将其实例化</span></div><div class="line">        <span class="keyword">this</span>.setInitializers(<span class="keyword">this</span>.getSpringFactoriesInstances(ApplicationContextInitializer.class));</div><div class="line">        <span class="comment">//3.3找到*META-INF/spring.factories*中声明的所有ApplicationListener的实现类并将其实例化</span></div><div class="line">        <span class="keyword">this</span>.setListeners(<span class="keyword">this</span>.getSpringFactoriesInstances(ApplicationListener.class));</div><div class="line">        <span class="comment">//3.4获得当前执行main方法的类对象，这里就是SpringBootWebDemoApplication的实例</span></div><div class="line">        <span class="keyword">this</span>.mainApplicationClass = <span class="keyword">this</span>.deduceMainApplicationClass();</div><div class="line">    &#125;</div></pre></td></tr></table></figure></p>
<p>3.1 判断是否是web运行环境<br>如果classpath中是否含有<strong>WEB_ENVIRONMENT_CLASSES</strong>指定的全部类，则返回true，用于创建指定类型的ApplicationContext对象。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//3.1</span></div><div class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String[] WEB_ENVIRONMENT_CLASSES = <span class="keyword">new</span> String[]&#123;<span class="string">"javax.servlet.Servlet"</span>, <span class="string">"org.springframework.web.context.ConfigurableWebApplicationContext"</span>&#125;;</div></pre></td></tr></table></figure></p>
<p>3.2 大体的过程就是通过<em>SpringFactoriesLoader</em>检索<em>META-INF/spring.factories</em>，找到声明的所有ApplicationContextInitializer的实现类并将其实例化。<br><strong>ApplicationContextInitializer</strong>是Spring框架中的接口，其作用可以理解为在ApplicationContext执行refresh之前，调用<em>ApplicationContextInitializer</em>的initialize()方法，对ApplicationContext做进一步的设置和处理。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">ApplicationContextInitializer</span>&lt;<span class="title">C</span> <span class="keyword">extends</span> <span class="title">ConfigurableApplicationContext</span>&gt; </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">initialize</span><span class="params">(C var1)</span></span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p><em>spring-boot-1.4.2.RELEASE.jar</em>中的<em>META-INF/spring.factories</em>包含的<strong>ApplicationContextInitializer</strong><br><figure class="highlight yml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># Application Context Initializers</span></div><div class="line">org.springframework.context.ApplicationContextInitializer=\</div><div class="line">org.springframework.boot.context.ConfigurationWarningsApplicationContextInitializer,\</div><div class="line">org.springframework.boot.context.ContextIdApplicationContextInitializer,\</div><div class="line">org.springframework.boot.context.config.DelegatingApplicationContextInitializer,\</div><div class="line">org.springframework.boot.context.web.ServerPortInfoApplicationContextInitializer</div></pre></td></tr></table></figure></p>
<p><em>spring-boot-autoconfigure-1.4.2.RELEASE.jar</em>中的<em>META-INF/spring.factories</em>包含的<strong>ApplicationContextInitializer</strong><br><figure class="highlight yml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># Initializers</span></div><div class="line">org.springframework.context.ApplicationContextInitializer=\</div><div class="line">org.springframework.boot.autoconfigure.SharedMetadataReaderFactoryContextInitializer,\</div><div class="line">org.springframework.boot.autoconfigure.logging.AutoConfigurationReportLoggingInitializer</div></pre></td></tr></table></figure></p>
<p>3.3 大体的过程就是通过<em>SpringFactoriesLoader</em>检索<em>META-INF/spring.factories</em>，找到声明的所有ApplicationListener的实现类并将其实例化。<br><strong>ApplicationListener</strong>是Spring框架中的接口，就是事件监听器，其作用可以理解为在<strong>SpringApplicationRunListener</strong>发布通知事件时，由<strong>ApplicationListener</strong>负责接收。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">ApplicationListener</span>&lt;<span class="title">E</span> <span class="keyword">extends</span> <span class="title">ApplicationEvent</span>&gt; <span class="keyword">extends</span> <span class="title">EventListener</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">onApplicationEvent</span><span class="params">(E var1)</span></span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>SpringBoot只提供了一个<strong>SpringApplicationRunListener</strong>的实现类，就是<strong>EventPublishingRunListener</strong>，起作用就是在SpringBoot启动过程中，负责注册<em>ApplicationListener</em>监听器，在不同的时点发布不同的事件类型，如果有哪些<strong>ApplicationListener</strong>的实现类监听了这些事件，则可以接收并处理。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">SpringApplicationRunListener</span> </span>&#123;</div><div class="line">    <span class="comment">//通知监听器，SpringBoot开始执行</span></div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">started</span><span class="params">()</span></span>;</div><div class="line">    <span class="comment">//通知监听器，Environment准备完成</span></div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">environmentPrepared</span><span class="params">(ConfigurableEnvironment var1)</span></span>;</div><div class="line">    <span class="comment">//通知监听器，ApplicationContext已经创建并初始化完成</span></div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">contextPrepared</span><span class="params">(ConfigurableApplicationContext var1)</span></span>;</div><div class="line">    <span class="comment">//通知监听器，ApplicationContext已经完成IoC配置加载</span></div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">contextLoaded</span><span class="params">(ConfigurableApplicationContext var1)</span></span>;</div><div class="line">    <span class="comment">//通知监听器，SpringBoot启动完成</span></div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">finished</span><span class="params">(ConfigurableApplicationContext var1, Throwable var2)</span></span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p><em>spring-boot-1.4.2.RELEASE.jar</em>中的<em>META-INF/spring.factories</em>包含的<strong>ApplicationListener</strong><br><figure class="highlight yml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># Application Listeners</span></div><div class="line">org.springframework.context.ApplicationListener=\</div><div class="line">org.springframework.boot.ClearCachesApplicationListener,\</div><div class="line">org.springframework.boot.builder.ParentContextCloserApplicationListener,\</div><div class="line">org.springframework.boot.context.FileEncodingApplicationListener,\</div><div class="line">org.springframework.boot.context.config.AnsiOutputApplicationListener,\</div><div class="line">org.springframework.boot.context.config.ConfigFileApplicationListener,\</div><div class="line">org.springframework.boot.context.config.DelegatingApplicationListener,\</div><div class="line">org.springframework.boot.liquibase.LiquibaseServiceLocatorApplicationListener,\</div><div class="line">org.springframework.boot.logging.ClasspathLoggingApplicationListener,\</div><div class="line">org.springframework.boot.logging.LoggingApplicationListener</div></pre></td></tr></table></figure></p>
<p><em>spring-boot-autoconfigure-1.4.2.RELEASE.jar</em>中的<em>META-INF/spring.factories</em>包含的<strong>ApplicationListener</strong><br><figure class="highlight yml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># Application Listeners</span></div><div class="line">org.springframework.context.ApplicationListener=\</div><div class="line">org.springframework.boot.autoconfigure.BackgroundPreinitializer</div></pre></td></tr></table></figure></p>
<p><em>spring-boot-1.4.2.RELEASE.jar</em>中的<em>META-INF/spring.factories</em>包含的<strong>SpringApplicationRunListener</strong><br><figure class="highlight yml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># Run Listeners</span></div><div class="line">org.springframework.boot.SpringApplicationRunListener=\</div><div class="line">org.springframework.boot.context.event.EventPublishingRunListener</div></pre></td></tr></table></figure></p>
<p>3.4 获得当前执行main方法的类对象，这里就是SpringBootWebDemoApplication的实例。</p>
<p>4.核心方法<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//4</span></div><div class="line"><span class="function"><span class="keyword">public</span> ConfigurableApplicationContext <span class="title">run</span><span class="params">(String... args)</span> </span>&#123;</div><div class="line">        <span class="comment">//开启任务执行时间监听器</span></div><div class="line">        StopWatch stopWatch = <span class="keyword">new</span> StopWatch();</div><div class="line">        stopWatch.start();</div><div class="line"></div><div class="line">        ConfigurableApplicationContext context = <span class="keyword">null</span>;</div><div class="line">        Object analyzers = <span class="keyword">null</span>;</div><div class="line"></div><div class="line">        <span class="comment">//设置系统属性『java.awt.headless』，为true则启用headless模式支持</span></div><div class="line">        <span class="keyword">this</span>.configureHeadlessProperty();</div><div class="line"></div><div class="line">        <span class="comment">//通过*SpringFactoriesLoader*检索*META-INF/spring.factories*，</span></div><div class="line">        <span class="comment">//找到声明的所有SpringApplicationRunListener的实现类并将其实例化，</span></div><div class="line">        <span class="comment">//之后逐个调用其started()方法，广播SpringBoot要开始执行了。</span></div><div class="line">        SpringApplicationRunListeners listeners = <span class="keyword">this</span>.getRunListeners(args);</div><div class="line">        listeners.started();</div><div class="line"></div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            DefaultApplicationArguments ex = <span class="keyword">new</span> DefaultApplicationArguments(args);</div><div class="line"></div><div class="line">            <span class="comment">//创建并配置当前SpringBoot应用将要使用的Environment（包括配置要使用的PropertySource以及Profile）,</span></div><div class="line">            <span class="comment">//并遍历调用所有的SpringApplicationRunListener的environmentPrepared()方法，广播Environment准备完毕。</span></div><div class="line">            ConfigurableEnvironment environment = <span class="keyword">this</span>.prepareEnvironment(listeners, ex);</div><div class="line"></div><div class="line">            <span class="comment">//决定是否打印Banner</span></div><div class="line">            Banner printedBanner = <span class="keyword">this</span>.printBanner(environment);</div><div class="line"></div><div class="line">            <span class="comment">//根据webEnvironment的值来决定创建何种类型的ApplicationContext对象</span></div><div class="line">            <span class="comment">//如果是web环境，则创建org.springframework.boot.context.embedded.AnnotationConfigEmbeddedWebApplicationContext</span></div><div class="line">            <span class="comment">//否则创建org.springframework.context.annotation.AnnotationConfigApplicationContext</span></div><div class="line">            context = <span class="keyword">this</span>.createApplicationContext();</div><div class="line"></div><div class="line">            <span class="comment">//注册异常分析器</span></div><div class="line">            <span class="keyword">new</span> FailureAnalyzers(context);</div><div class="line"></div><div class="line">            <span class="comment">//为ApplicationContext加载environment，之后逐个执行ApplicationContextInitializer的initialize()方法来进一步封装ApplicationContext，</span></div><div class="line">            <span class="comment">//并调用所有的SpringApplicationRunListener的contextPrepared()方法，【EventPublishingRunListener只提供了一个空的contextPrepared()方法】，</span></div><div class="line">            <span class="comment">//之后初始化IoC容器，并调用SpringApplicationRunListener的contextLoaded()方法，广播ApplicationContext的IoC加载完成，</span></div><div class="line">            <span class="comment">//这里就包括通过**@EnableAutoConfiguration**导入的各种自动配置类。</span></div><div class="line">            <span class="keyword">this</span>.prepareContext(context, environment, listeners, ex, printedBanner);</div><div class="line"></div><div class="line">            <span class="comment">//初始化所有自动配置类，调用ApplicationContext的refresh()方法</span></div><div class="line">            <span class="keyword">this</span>.refreshContext(context);</div><div class="line"></div><div class="line">            <span class="comment">//遍历所有注册的ApplicationRunner和CommandLineRunner，并执行其run()方法。</span></div><div class="line">            <span class="comment">//该过程可以理解为是SpringBoot完成ApplicationContext初始化前的最后一步工作，</span></div><div class="line">            <span class="comment">//我们可以实现自己的ApplicationRunner或者CommandLineRunner，来对SpringBoot的启动过程进行扩展。</span></div><div class="line">            <span class="keyword">this</span>.afterRefresh(context, ex);</div><div class="line"></div><div class="line">            <span class="comment">//调用所有的SpringApplicationRunListener的finished()方法，广播SpringBoot已经完成了ApplicationContext初始化的全部过程。</span></div><div class="line">            listeners.finished(context, (Throwable)<span class="keyword">null</span>);</div><div class="line"></div><div class="line">            <span class="comment">//关闭任务执行时间监听器</span></div><div class="line">            stopWatch.stop();</div><div class="line">            <span class="comment">//如果开启日志，则答应执行是时间</span></div><div class="line">            <span class="keyword">if</span>(<span class="keyword">this</span>.logStartupInfo) &#123;</div><div class="line">                (<span class="keyword">new</span> StartupInfoLogger(<span class="keyword">this</span>.mainApplicationClass)).logStarted(<span class="keyword">this</span>.getApplicationLog(), stopWatch);</div><div class="line">            &#125;</div><div class="line"></div><div class="line">            <span class="keyword">return</span> context;</div><div class="line">        &#125; <span class="keyword">catch</span> (Throwable var9) &#123;</div><div class="line">            <span class="comment">//调用异常分析器打印报告，调用所有的SpringApplicationRunListener的finished()方法将异常信息发布出去</span></div><div class="line">            <span class="keyword">this</span>.handleRunFailure(context, listeners, (FailureAnalyzers)analyzers, var9);</div><div class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException(var9);</div><div class="line">        &#125;</div><div class="line">    &#125;</div></pre></td></tr></table></figure></p>
<p><em>spring-boot-1.4.2.RELEASE.jar</em>中的<em>META-INF/spring.factories</em>包含的<strong>FailureAnalyzer</strong>和<strong>FailureAnalysisReporters</strong><br><figure class="highlight yml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># Failure Analyzers</span></div><div class="line">org.springframework.boot.diagnostics.FailureAnalyzer=\</div><div class="line">org.springframework.boot.diagnostics.analyzer.BeanCurrentlyInCreationFailureAnalyzer,\</div><div class="line">org.springframework.boot.diagnostics.analyzer.BeanNotOfRequiredTypeFailureAnalyzer,\</div><div class="line">org.springframework.boot.diagnostics.analyzer.BindFailureAnalyzer,\</div><div class="line">org.springframework.boot.diagnostics.analyzer.ConnectorStartFailureAnalyzer,\</div><div class="line">org.springframework.boot.diagnostics.analyzer.NoUniqueBeanDefinitionFailureAnalyzer,\</div><div class="line">org.springframework.boot.diagnostics.analyzer.PortInUseFailureAnalyzer,\</div><div class="line">org.springframework.boot.diagnostics.analyzer.ValidationExceptionFailureAnalyzer</div><div class="line"></div><div class="line"><span class="comment"># FailureAnalysisReporters</span></div><div class="line">org.springframework.boot.diagnostics.FailureAnalysisReporter=\</div><div class="line">org.springframework.boot.diagnostics.LoggingFailureAnalysisReporter</div></pre></td></tr></table></figure></p>
<hr>
<p><strong>说明</strong></p>
<ul>
<li>SpringBoot的启动过程，实际上就是对ApplicationContext的初始化过程。</li>
<li>ApplicationContext创建后立刻为其设置Environmen，并由<strong>ApplicationContextInitializer</strong>对其进一步封装。</li>
<li>通过<em>SpringApplicationRunListener</em>在ApplicationContext初始化过程中各个时点发布各种广播事件，并由<em>ApplicationListener</em>负责接收广播事件。</li>
<li>初始化过程中完成IoC的注入，包括通过<strong>@EnableAutoConfiguration</strong>导入的各种自动配置类。</li>
<li>初始化完成前调用ApplicationRunner和CommandLineRunner的实现类。</li>
</ul>
<hr>
<h3 id="扩展SpringApplication"><a href="#扩展SpringApplication" class="headerlink" title="扩展SpringApplication"></a>扩展SpringApplication</h3><p>通过上面的学习，我们基本上了解了，如果要对SpringApplication进行扩展，我们可以选择如下三种方案：</p>
<ul>
<li>创建ApplicationContextInitializer的实现类</li>
<li>创建ApplicationListener的实现类</li>
<li>创建ApplicationRunner和CommandLineRunner的实现类</li>
</ul>
<p>1.可以通过如下方式加载自定义的<em>ApplicationContextInitializer</em>和<em>ApplicationListener</em><br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@SpringBootApplication</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SpringBootWebDemoApplication</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">        <span class="comment">//SpringApplication.run(SpringBootWebDemoApplication.class, args);</span></div><div class="line">        SpringApplication springApplication = <span class="keyword">new</span> SpringApplication(SpringBootWebDemoApplication.class);</div><div class="line"></div><div class="line">        springApplication.addInitializers(MyApplicationContextInitializer1,MyApplicationContextInitializer2);</div><div class="line"></div><div class="line">        springApplication.addListeners(MyApplicationListener1,MyApplicationListener2);</div><div class="line"></div><div class="line">        springApplication.run(args);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>2.也可以在当前项目的类路径下创建<em>META-INF/spring.factories</em>文件，并声明相应的<em>ApplicationContextInitializer</em>和<em>ApplicationListener</em><br><figure class="highlight yml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">org.springframework.context.ApplicationContextInitializer=\</div><div class="line">xxx.xxx.MyApplicationContextInitializer1,\</div><div class="line">xxx.xxx.MyApplicationContextInitializer2</div><div class="line"></div><div class="line"><span class="comment"># Application Listeners</span></div><div class="line">org.springframework.context.ApplicationListener=\</div><div class="line">xxx.xxx.MyApplicationListener1,\</div><div class="line">xxx.xxx.MyApplicationListener2</div></pre></td></tr></table></figure></p>
<p>3.至于ApplicationRunner和CommandLineRunner，只需要在其实现类上加上<strong>@Component</strong>注解或者在@Configuration配置类中通过@Bean注解注入。</p>
<hr>
<h2 id="深入了解SpringBootServletInitializer"><a href="#深入了解SpringBootServletInitializer" class="headerlink" title="深入了解SpringBootServletInitializer"></a>深入了解SpringBootServletInitializer</h2><p>熟悉了<strong>SpringApplication</strong>的原理之后，我们再来了解<strong>SpringBootServletInitializer</strong>的原理就比较容易了。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ServletInitializer</span> <span class="keyword">extends</span> <span class="title">SpringBootServletInitializer</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">protected</span> SpringApplicationBuilder <span class="title">configure</span><span class="params">(SpringApplicationBuilder application)</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> application.sources(DemoWarApplication.class);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>SpringBootServletInitializer就是一个<em>org.springframework.web.context.WebApplicationContext</em>，容器启动时会调用其onStartup(ServletContext servletContext)方法，接下来我么就来看一下这个方法:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onStartup</span><span class="params">(ServletContext servletContext)</span> <span class="keyword">throws</span> ServletException </span>&#123;</div><div class="line">        <span class="keyword">this</span>.logger = LogFactory.getLog(<span class="keyword">this</span>.getClass());</div><div class="line">        <span class="keyword">final</span> WebApplicationContext rootAppContext = <span class="keyword">this</span>.createRootApplicationContext(servletContext);</div><div class="line">        <span class="keyword">if</span>(rootAppContext != <span class="keyword">null</span>) &#123;</div><div class="line">            servletContext.addListener(<span class="keyword">new</span> ContextLoaderListener(rootAppContext) &#123;</div><div class="line">                <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">contextInitialized</span><span class="params">(ServletContextEvent event)</span> </span>&#123;</div><div class="line">                &#125;</div><div class="line">            &#125;);</div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">            <span class="keyword">this</span>.logger.debug(<span class="string">"No ContextLoaderListener registered, as createRootApplicationContext() did not return an application context"</span>);</div><div class="line">        &#125;</div><div class="line"></div><div class="line">    &#125;</div></pre></td></tr></table></figure></p>
<p>这里的核心方法就是createRootApplicationContext(servletContext)：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">protected</span> WebApplicationContext <span class="title">createRootApplicationContext</span><span class="params">(ServletContext servletContext)</span> </span>&#123;</div><div class="line"></div><div class="line">        <span class="comment">//创建SpringApplicationBuilder，并用其生产出SpringApplication对象</span></div><div class="line">        SpringApplicationBuilder builder = <span class="keyword">this</span>.createSpringApplicationBuilder();</div><div class="line">        builder.main(<span class="keyword">this</span>.getClass());</div><div class="line"></div><div class="line">        ApplicationContext parent = <span class="keyword">this</span>.getExistingRootWebApplicationContext(servletContext);</div><div class="line">        <span class="keyword">if</span>(parent != <span class="keyword">null</span>) &#123;</div><div class="line">            <span class="keyword">this</span>.logger.info(<span class="string">"Root context already created (using as parent)."</span>);</div><div class="line">            servletContext.setAttribute(WebApplicationContext.ROOT_WEB_APPLICATION_CONTEXT_ATTRIBUTE, (Object)<span class="keyword">null</span>);</div><div class="line">            builder.initializers(<span class="keyword">new</span> ApplicationContextInitializer[]&#123;<span class="keyword">new</span> ParentContextApplicationContextInitializer(parent)&#125;);</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="comment">//初始化并封装SpringApplicationBuilder对象，为SpringApplication对象增加ApplicationContextInitializer和ApplicationListener做准备</span></div><div class="line">        builder.initializers(<span class="keyword">new</span> ApplicationContextInitializer[]&#123;<span class="keyword">new</span> ServletContextApplicationContextInitializer(servletContext)&#125;);</div><div class="line">        builder.listeners(<span class="keyword">new</span> ApplicationListener[]&#123;<span class="keyword">new</span> ServletContextApplicationListener(servletContext)&#125;);</div><div class="line">        <span class="comment">//指定创建的ApplicationContext类型</span></div><div class="line">        builder.contextClass(AnnotationConfigEmbeddedWebApplicationContext.class);</div><div class="line"></div><div class="line">        <span class="comment">//传递入口类，并构建SpringApplication对象</span></div><div class="line">        <span class="comment">//可以通过configure()方法对SpringBootServletInitializer进行扩展</span></div><div class="line">        builder = <span class="keyword">this</span>.configure(builder);</div><div class="line">        SpringApplication application = builder.build();</div><div class="line"></div><div class="line">        <span class="keyword">if</span>(application.getSources().isEmpty() &amp;&amp; AnnotationUtils.findAnnotation(<span class="keyword">this</span>.getClass(), Configuration.class) != <span class="keyword">null</span>) &#123;</div><div class="line">            application.getSources().add(<span class="keyword">this</span>.getClass());</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        Assert.state(!application.getSources().isEmpty(), <span class="string">"No SpringApplication sources have been defined. Either override the configure method or add an @Configuration annotation"</span>);</div><div class="line">        <span class="keyword">if</span>(<span class="keyword">this</span>.registerErrorPageFilter) &#123;</div><div class="line">            application.getSources().add(ErrorPageFilter.class);</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="comment">//最后调用SpringApplication的run方法</span></div><div class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.run(application);</div><div class="line">    &#125;</div></pre></td></tr></table></figure></p>
<hr>
<p><strong>说明</strong><br><strong>SpringBootServletInitializer</strong>的执行过程，简单来说就是通过<em>SpringApplicationBuilder</em>构建并封装SpringApplication对象，并最终调用SpringApplication的run方法的过程。</p>
<hr>
<h3 id="扩展SpringBootServletInitializer"><a href="#扩展SpringBootServletInitializer" class="headerlink" title="扩展SpringBootServletInitializer"></a>扩展SpringBootServletInitializer</h3><p>与扩展<em>SpringApplication</em>类似，<em>ApplicationContextInitializer</em>和<em>ApplicationListener</em>可以基于<em>SpringApplicationBuilder</em>提供的public方法进行扩展<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ServletInitializer</span> <span class="keyword">extends</span> <span class="title">SpringBootServletInitializer</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">protected</span> SpringApplicationBuilder <span class="title">configure</span><span class="params">(SpringApplicationBuilder application)</span> </span>&#123;</div><div class="line">        application.initializers(MyApplicationContextInitializer1,MyApplicationContextInitializer2);</div><div class="line">        application.listeners(MyApplicationListener1,MyApplicationListener2)</div><div class="line">        <span class="keyword">return</span> application.sources(DemoWarApplication.class);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;摘要&quot;&gt;&lt;a href=&quot;#摘要&quot; class=&quot;headerlink&quot; title=&quot;摘要&quot;&gt;&lt;/a&gt;摘要&lt;/h2&gt;&lt;p&gt;看完本文你将掌握如下知识点：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;SpringApplication的作用及运行过程&lt;/li&gt;
&lt;li&gt;SpringBootServletInitializer的作用及运行过程&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;strong&gt;PS:本节内容略显枯燥，如果对SpringBoot的启动过程不感兴趣，可以略过。&lt;/strong&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="技术" scheme="http://blog.hanqunfeng.com/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="Spring Boot" scheme="http://blog.hanqunfeng.com/tags/Spring-Boot/"/>
    
  </entry>
  
  <entry>
    <title>Spring Boot学习笔记02--深入了解自动配置</title>
    <link href="http://blog.hanqunfeng.com/2016/12/10/spring-boot-study-web/"/>
    <id>http://blog.hanqunfeng.com/2016/12/10/spring-boot-study-web/</id>
    <published>2016-12-10T15:33:15.000Z</published>
    <updated>2016-12-17T05:57:45.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="摘要"><a href="#摘要" class="headerlink" title="摘要"></a>摘要</h2><p>看完本文你将掌握如下知识点：</p>
<ol>
<li>SpringBoot都帮我们做了哪些自动配置</li>
<li>我们如何接管SpringBoot的自动配置</li>
<li>注册Servlet、Filter、Listener的方法</li>
</ol>
<a id="more"></a>
<hr>
<p><strong>SpringBoot系列</strong>：<a href="/tags/Spring-Boot/">Spring Boot学习笔记</a></p>
<hr>
<h2 id="SpringBoot的自动配置"><a href="#SpringBoot的自动配置" class="headerlink" title="SpringBoot的自动配置"></a>SpringBoot的自动配置</h2><p>1.自动配置类都存放在<em>spring-boot-autoconfigure-1.4.2.RELEASE.jar</em>下的<br><em>org.springframework.boot.autoconfigure</em>路径下；<br>2.application.properties中配置<code>debug=true</code>后启动容器，可以看到服务器初始化的自动配置如下:</p>
<ul>
<li>DispatcherServletAutoConfiguration<br>注册<strong>org.springframework.web.servlet.DispatcherServlet</strong></li>
<li>EmbeddedServletContainerAutoConfiguration<br>注册容器类型，如类路径下存在<strong>org.apache.catalina.startup.Tomcat</strong>，就会注册Tomcat容器</li>
<li>ErrorMvcAutoConfiguration<br>注册异常处理器</li>
<li>HttpEncodingAutoConfiguration<br>注册http编码过滤器</li>
<li>HttpMessageConvertersAutoConfiguration<br>注册json或者xml处理器</li>
<li>JacksonAutoConfiguration<br>注册json对象解析器</li>
<li>JmxAutoConfiguration<br>注册<a href="http://baike.baidu.com/link?url=UrBouL697r00U6pJyc5IXwk_GiFaWf0di0wZEpG9J9obYa69_7nApO5iddAuj4ajDz0hwJZ8CA-iBghoyqI39a" target="_blank" rel="external">JMX</a>管理器<blockquote>
<p><a href="https://my.oschina.net/bayuanqian/blog/90043" target="_blank" rel="external">JMX与Spring集成</a><br><a href="http://blog.csdn.net/yaerfeng/article/details/28232435" target="_blank" rel="external">spring通过annotation注解注册MBean到JMX实现监控java运行状态</a></p>
</blockquote>
</li>
<li>MultipartAutoConfiguration<br>注册文件传输处理器</li>
<li>ServerPropertiesAutoConfiguration<br>用于初始化容器相关的配置属性，如服务地址、端口、contextPath，并根据当前容器类型初始化各个容器的特有属性，如tomcat的maxThreads、uriEncoding等等，其对应的属性类为<strong>ServerProperties</strong>；</li>
<li>WebClientAutoConfiguration<br>注册RestTemplate</li>
<li>WebMvcAutoConfiguration<br>注册SpringMvc相关处理器，如ResourceResolver、RequestMappingHandlerAdapter、ExceptionHandlerExceptionResolver、ViewResolver、LocaleResolver，等等</li>
<li>WebSocketAutoConfiguration<br>注册webSocket相关处理器，根据容器类型注册不同的处理器</li>
</ul>
<p>3.如果依赖中加入了其它功能的依赖，SpringBoot还会实现这些功能的自动适配，比如我们增加数据库的JPA的功能，就会启用对<em>JpaRepositoriesAutoConfiguration</em>的自动配置功能。关于数据库方面的内容将在后文介绍。<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-data-jpa<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div></pre></td></tr></table></figure></p>
<hr>
<p><strong>说明</strong><br>从各个AutoConfiguration配置类中可以看到如下注解，基于这些注解可以确定这些AutoConfiguration的初始化顺序：</p>
<ul>
<li>@AutoConfigureOrder(-2147483648)：数越小越先初始化</li>
<li>@AutoConfigureAfter({EmbeddedServletContainerAutoConfiguration.class})：在指定的配置类初始化后再加载</li>
<li>@AutoConfigureBefore({WebMvcAutoConfiguration.class})：在指定的配置类初始化前加载</li>
</ul>
<hr>
<h2 id="接管SpringBoot的自动配置"><a href="#接管SpringBoot的自动配置" class="headerlink" title="接管SpringBoot的自动配置"></a>接管SpringBoot的自动配置</h2><p>我们介绍过<strong>@SpringBootApplication</strong>这个注解，因其包含<strong>@EnableAutoConfiguration</strong>和<strong>@ComponentScan</strong>注解，可以自动扫描相关的自动配置类，从而实现自动配置功能的。<br>上面介绍默认情况下SpringBoot默认会初始化很多的自动配置，这些配置有些我们在项目中可能用不到，那要如何去掉呢？</p>
<h3 id="去掉不需要的自动配置类"><a href="#去掉不需要的自动配置类" class="headerlink" title="去掉不需要的自动配置类"></a>去掉不需要的自动配置类</h3><p>比如我们不需要开启webSocket和JMX的自动配置，我们需要在<strong>@SpringBootApplication</strong>这个注解中指定<strong>exclude</strong>属性<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@SpringBootApplication</span>(exclude = &#123;WebSocketAutoConfiguration.class,JmxAutoConfiguration.class&#125;)</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SpringBootWebDemoApplication</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">        SpringApplication.run(SpringBootWebDemoApplication.class, args);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h3 id="明确指定需要启用哪些自动配置"><a href="#明确指定需要启用哪些自动配置" class="headerlink" title="明确指定需要启用哪些自动配置"></a>明确指定需要启用哪些自动配置</h3><p>我们可以去掉<strong>@SpringBootApplication</strong>注解，改用<em>@Configuration、@Import、@ComponentScan</em>注解，在<strong>@Import</strong>注解中明确指定需要启用哪些自动配置<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//@SpringBootApplication(exclude = &#123;WebSocketAutoConfiguration.class,JmxAutoConfiguration.class&#125;)</span></div><div class="line"><span class="meta">@Configuration</span></div><div class="line"><span class="meta">@Import</span>(&#123;</div><div class="line">        DispatcherServletAutoConfiguration.class,</div><div class="line">        EmbeddedServletContainerAutoConfiguration.class,</div><div class="line">        ErrorMvcAutoConfiguration.class,</div><div class="line">        HttpEncodingAutoConfiguration.class,</div><div class="line">        HttpMessageConvertersAutoConfiguration.class,</div><div class="line">        JacksonAutoConfiguration.class,</div><div class="line">        MultipartAutoConfiguration.class,</div><div class="line">        ServerPropertiesAutoConfiguration.class,</div><div class="line">        WebMvcAutoConfiguration.class</div><div class="line">&#125;)</div><div class="line"><span class="meta">@ComponentScan</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SpringBootWebDemoApplication</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">        SpringApplication.run(SpringBootWebDemoApplication.class, args);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<hr>
<p><strong>说明：</strong></p>
<ul>
<li>这里推荐使用第一种方式：<strong>@SpringBootApplication(exclude={})</strong>；</li>
<li>实际上，开启默认的自动配置功能，只是会影响项目启动时间，所以没有特殊需要，可以不需要关闭某个自动配置功能；</li>
<li>在某些情况，比如项目需要多数据源时，在项目中就会包含多个DataSource的Bean，因为<strong>DataSourceAutoConfiguration</strong>自动配置只能绑定一个数据源，此时发现多个DataSource的Bean被Spring注册就会抛出异常。<blockquote>
<p>1.这时就可以采用去掉<strong>DataSourceAutoConfiguration</strong>的方式;<br>2.或者也可以在某一个DataSource的Bean上声明<strong>@Primary</strong>注解，指定其为主数据源，这时<strong>DataSourceAutoConfiguration</strong>只会加载被指定<strong>@Primary</strong>注解的主数据源，这样就可以享受到SpringBoot自动配置带来的好处。</p>
</blockquote>
</li>
</ul>
<hr>
<h3 id="接管WebMvc自动配置"><a href="#接管WebMvc自动配置" class="headerlink" title="接管WebMvc自动配置"></a>接管WebMvc自动配置</h3><p>对于一个web项目，最重要的就是Mvc相关的控制，SpringBoot通过<strong>WebMvcAutoConfiguration</strong>来完成与Mvc有关的自动配置。如果希望完全接管WebMvc自动配置，可以在项目中创建一个注解了<strong>@EnableWebMvc</strong>的配置类，比如：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div><div class="line">155</div><div class="line">156</div><div class="line">157</div><div class="line">158</div><div class="line">159</div><div class="line">160</div><div class="line">161</div><div class="line">162</div><div class="line">163</div><div class="line">164</div><div class="line">165</div><div class="line">166</div><div class="line">167</div><div class="line">168</div><div class="line">169</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.example;</div><div class="line"></div><div class="line"><span class="keyword">import</span> org.apache.log4j.Logger;</div><div class="line"><span class="keyword">import</span> org.springframework.context.MessageSource;</div><div class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</div><div class="line"><span class="keyword">import</span> org.springframework.context.annotation.ComponentScan;</div><div class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</div><div class="line"><span class="keyword">import</span> org.springframework.context.annotation.FilterType;</div><div class="line"><span class="keyword">import</span> org.springframework.context.support.ResourceBundleMessageSource;</div><div class="line"><span class="keyword">import</span> org.springframework.stereotype.Controller;</div><div class="line"><span class="keyword">import</span> org.springframework.web.multipart.commons.CommonsMultipartResolver;</div><div class="line"><span class="keyword">import</span> org.springframework.web.servlet.HandlerAdapter;</div><div class="line"><span class="keyword">import</span> org.springframework.web.servlet.HandlerMapping;</div><div class="line"><span class="keyword">import</span> org.springframework.web.servlet.ViewResolver;</div><div class="line"><span class="keyword">import</span> org.springframework.web.servlet.config.annotation.EnableWebMvc;</div><div class="line"><span class="keyword">import</span> org.springframework.web.servlet.config.annotation.InterceptorRegistry;</div><div class="line"><span class="keyword">import</span> org.springframework.web.servlet.config.annotation.ResourceHandlerRegistry;</div><div class="line"><span class="keyword">import</span> org.springframework.web.servlet.config.annotation.WebMvcConfigurationSupport;</div><div class="line"><span class="keyword">import</span> org.springframework.web.servlet.handler.SimpleMappingExceptionResolver;</div><div class="line"><span class="keyword">import</span> org.springframework.web.servlet.handler.SimpleServletHandlerAdapter;</div><div class="line"><span class="keyword">import</span> org.springframework.web.servlet.i18n.CookieLocaleResolver;</div><div class="line"><span class="keyword">import</span> org.springframework.web.servlet.i18n.LocaleChangeInterceptor;</div><div class="line"><span class="keyword">import</span> org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter;</div><div class="line"><span class="keyword">import</span> org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerMapping;</div><div class="line"><span class="keyword">import</span> org.springframework.web.servlet.view.InternalResourceViewResolver;</div><div class="line"><span class="keyword">import</span> java.util.Properties;</div><div class="line"></div><div class="line"><span class="meta">@Configuration</span></div><div class="line"><span class="meta">@EnableWebMvc</span></div><div class="line"><span class="meta">@ComponentScan</span>(basePackages = <span class="string">"com.example"</span>, useDefaultFilters = <span class="keyword">false</span>, includeFilters = &#123;</div><div class="line">        <span class="meta">@ComponentScan</span>.Filter(type = FilterType.ANNOTATION, value = &#123;Controller.class&#125;)</div><div class="line">&#125;)</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MvcConfig</span> <span class="keyword">extends</span> <span class="title">WebMvcConfigurationSupport</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Logger logger = Logger</div><div class="line">            .getLogger(MvcConfig.class);</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 描述 : &lt;注册视图处理器&gt;. &lt;br&gt;</div><div class="line">     *&lt;p&gt;</div><div class="line">     &lt;使用方法说明&gt;</div><div class="line">     &lt;/p&gt;</div><div class="line">     * <span class="doctag">@return</span></div><div class="line">     */</div><div class="line">    <span class="meta">@Bean</span></div><div class="line">    <span class="function"><span class="keyword">public</span> ViewResolver <span class="title">viewResolver</span><span class="params">()</span> </span>&#123;</div><div class="line">        logger.info(<span class="string">"ViewResolver"</span>);</div><div class="line">        InternalResourceViewResolver viewResolver = <span class="keyword">new</span> InternalResourceViewResolver();</div><div class="line">        viewResolver.setPrefix(<span class="string">"/WEB-INF/views/jsp/function/"</span>);</div><div class="line">        viewResolver.setSuffix(<span class="string">".jsp"</span>);</div><div class="line">        <span class="keyword">return</span> viewResolver;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 描述 : &lt;注册消息资源处理器&gt;. &lt;br&gt;</div><div class="line">     *&lt;p&gt;</div><div class="line">     &lt;使用方法说明&gt;</div><div class="line">     &lt;/p&gt;</div><div class="line">     * <span class="doctag">@return</span></div><div class="line">     */</div><div class="line">    <span class="meta">@Bean</span></div><div class="line">    <span class="function"><span class="keyword">public</span> MessageSource <span class="title">messageSource</span><span class="params">()</span> </span>&#123;</div><div class="line">        logger.info(<span class="string">"MessageSource"</span>);</div><div class="line">        ResourceBundleMessageSource messageSource = <span class="keyword">new</span> ResourceBundleMessageSource();</div><div class="line">        messageSource.setBasename(<span class="string">"config.messages.messages"</span>);</div><div class="line"></div><div class="line">        <span class="keyword">return</span> messageSource;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 描述 : &lt;注册servlet适配器&gt;. &lt;br&gt;</div><div class="line">     *&lt;p&gt;</div><div class="line">     &lt;只需要在自定义的servlet上用<span class="doctag">@Controller</span>("映射路径")标注即可&gt;</div><div class="line">     &lt;/p&gt;</div><div class="line">     * <span class="doctag">@return</span></div><div class="line">     */</div><div class="line">    <span class="meta">@Bean</span></div><div class="line">    <span class="function"><span class="keyword">public</span> HandlerAdapter <span class="title">servletHandlerAdapter</span><span class="params">()</span></span>&#123;</div><div class="line">        logger.info(<span class="string">"HandlerAdapter"</span>);</div><div class="line">        <span class="keyword">return</span> <span class="keyword">new</span> SimpleServletHandlerAdapter();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 描述 : &lt;本地化拦截器&gt;. &lt;br&gt;</div><div class="line">     *&lt;p&gt;</div><div class="line">     &lt;使用方法说明&gt;</div><div class="line">     &lt;/p&gt;</div><div class="line">     * <span class="doctag">@return</span></div><div class="line">     */</div><div class="line">    <span class="meta">@Bean</span></div><div class="line">    <span class="function"><span class="keyword">public</span> LocaleChangeInterceptor <span class="title">localeChangeInterceptor</span><span class="params">()</span></span>&#123;</div><div class="line">        logger.info(<span class="string">"LocaleChangeInterceptor"</span>);</div><div class="line">        <span class="keyword">return</span> <span class="keyword">new</span> LocaleChangeInterceptor();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 描述 : &lt;基于cookie的本地化资源处理器&gt;. &lt;br&gt;</div><div class="line">     *&lt;p&gt;</div><div class="line">     &lt;使用方法说明&gt;</div><div class="line">     &lt;/p&gt;</div><div class="line">     * <span class="doctag">@return</span></div><div class="line">     */</div><div class="line">    <span class="meta">@Bean</span>(name=<span class="string">"localeResolver"</span>)</div><div class="line">    <span class="function"><span class="keyword">public</span> CookieLocaleResolver <span class="title">cookieLocaleResolver</span><span class="params">()</span></span>&#123;</div><div class="line">        logger.info(<span class="string">"CookieLocaleResolver"</span>);</div><div class="line">        <span class="keyword">return</span> <span class="keyword">new</span> CookieLocaleResolver();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 描述 : &lt;添加拦截器&gt;. &lt;br&gt;</div><div class="line">     *&lt;p&gt;</div><div class="line">     &lt;使用方法说明&gt;</div><div class="line">     &lt;/p&gt;</div><div class="line">     * <span class="doctag">@param</span> registry</div><div class="line">     */</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">addInterceptors</span><span class="params">(InterceptorRegistry registry)</span> </span>&#123;</div><div class="line">        <span class="comment">// TODO Auto-generated method stub</span></div><div class="line">        logger.info(<span class="string">"addInterceptors start"</span>);</div><div class="line">        registry.addInterceptor(localeChangeInterceptor());</div><div class="line">        logger.info(<span class="string">"addInterceptors end"</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 描述 : &lt;资源访问处理器&gt;. &lt;br&gt;</div><div class="line">     *&lt;p&gt;</div><div class="line">     &lt;可以在jsp中使用/static/**的方式访问/WEB-INF/static/下的内容&gt;</div><div class="line">     &lt;/p&gt;</div><div class="line">     * <span class="doctag">@param</span> registry</div><div class="line">     */</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">addResourceHandlers</span><span class="params">(ResourceHandlerRegistry registry)</span> </span>&#123;</div><div class="line">        logger.info(<span class="string">"addResourceHandlers"</span>);</div><div class="line">        registry.addResourceHandler(<span class="string">"/static/**"</span>).addResourceLocations(<span class="string">"/WEB-INF/static/"</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 描述 : &lt;文件上传处理器&gt;. &lt;br&gt;</div><div class="line">     *&lt;p&gt;</div><div class="line">     &lt;使用方法说明&gt;</div><div class="line">     &lt;/p&gt;</div><div class="line">     * <span class="doctag">@return</span></div><div class="line">     */</div><div class="line">    <span class="meta">@Bean</span>(name=<span class="string">"multipartResolver"</span>)</div><div class="line">    <span class="function"><span class="keyword">public</span> CommonsMultipartResolver <span class="title">commonsMultipartResolver</span><span class="params">()</span></span>&#123;</div><div class="line">        logger.info(<span class="string">"CommonsMultipartResolver"</span>);</div><div class="line">        <span class="keyword">return</span> <span class="keyword">new</span> CommonsMultipartResolver();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 描述 : &lt;异常处理器&gt;. &lt;br&gt;</div><div class="line">     *&lt;p&gt;</div><div class="line">     &lt;系统运行时遇到指定的异常将会跳转到指定的页面&gt;</div><div class="line">     &lt;/p&gt;</div><div class="line">     * <span class="doctag">@return</span></div><div class="line">     */</div><div class="line">    <span class="meta">@Bean</span>(name=<span class="string">"exceptionResolver"</span>)</div><div class="line">    <span class="function"><span class="keyword">public</span> SimpleMappingExceptionResolver <span class="title">simpleMappingExceptionResolver</span><span class="params">()</span></span>&#123;</div><div class="line">        logger.info(<span class="string">"CP_SimpleMappingExceptionResolver"</span>);</div><div class="line">        SimpleMappingExceptionResolver simpleMappingExceptionResolver= <span class="keyword">new</span> SimpleMappingExceptionResolver();</div><div class="line">        simpleMappingExceptionResolver.setDefaultErrorView(<span class="string">"common_error"</span>);</div><div class="line">        simpleMappingExceptionResolver.setExceptionAttribute(<span class="string">"exception"</span>);</div><div class="line">        Properties properties = <span class="keyword">new</span> Properties();</div><div class="line">        properties.setProperty(<span class="string">"java.lang.RuntimeException"</span>, <span class="string">"common_error"</span>);</div><div class="line">        simpleMappingExceptionResolver.setExceptionMappings(properties);</div><div class="line">        <span class="keyword">return</span> simpleMappingExceptionResolver;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>此时debug模式运行项目，会看到<strong>WebMvcAutoConfiguration</strong>没有被自动配置，说明我们自己定义的<code>MvcConfig</code>已经完全接管了默认的自动配置，这是因为<strong>WebMvcAutoConfiguration</strong>有一个条件注解:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@ConditionalOnMissingBean</span>(&#123;WebMvcConfigurationSupport.class&#125;)</div></pre></td></tr></table></figure></p>
<p>而我们本例中<code>MvcConfig</code>就是WebMvcConfigurationSupport的实现类，同时加入<strong>@EnableWebMvc</strong>注解也会导入一个WebMvcConfigurationSupport的实现类：DelegatingWebMvcConfiguration<br>，所以<code>MvcConfig</code>继承WebMvcConfigurationSupport不是必须的，但是可以方便我们编码。</p>
<hr>
<p>参考：<a href="http://hanqunfeng.iteye.com/blog/2114987" target="_blank" rel="external">SpringMVC4零配置–Web上下文配置【MvcConfig】</a></p>
<hr>
<p>如果希望可以继续使用<strong>WebMvcAutoConfiguration</strong>的自动配置，而只是需要修改或者增加MVC中的某些配置时，我们可以创建一个配置类，并继承于抽象类<strong>WebMvcConfigurerAdapter</strong>，我们可以通过实现抽象类的方法来注册自己的控制器。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">WebMvcConfigurerAdapter</span> <span class="keyword">implements</span> <span class="title">WebMvcConfigurer</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">WebMvcConfigurerAdapter</span><span class="params">()</span> </span>&#123;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">configurePathMatch</span><span class="params">(PathMatchConfigurer configurer)</span> </span>&#123;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">configureContentNegotiation</span><span class="params">(ContentNegotiationConfigurer configurer)</span> </span>&#123;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">configureAsyncSupport</span><span class="params">(AsyncSupportConfigurer configurer)</span> </span>&#123;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">configureDefaultServletHandling</span><span class="params">(DefaultServletHandlerConfigurer configurer)</span> </span>&#123;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addFormatters</span><span class="params">(FormatterRegistry registry)</span> </span>&#123;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addInterceptors</span><span class="params">(InterceptorRegistry registry)</span> </span>&#123;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addResourceHandlers</span><span class="params">(ResourceHandlerRegistry registry)</span> </span>&#123;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addCorsMappings</span><span class="params">(CorsRegistry registry)</span> </span>&#123;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addViewControllers</span><span class="params">(ViewControllerRegistry registry)</span> </span>&#123;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">configureViewResolvers</span><span class="params">(ViewResolverRegistry registry)</span> </span>&#123;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addArgumentResolvers</span><span class="params">(List&lt;HandlerMethodArgumentResolver&gt; argumentResolvers)</span> </span>&#123;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addReturnValueHandlers</span><span class="params">(List&lt;HandlerMethodReturnValueHandler&gt; returnValueHandlers)</span> </span>&#123;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">configureMessageConverters</span><span class="params">(List&lt;HttpMessageConverter&lt;?&gt;&gt; converters)</span> </span>&#123;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">extendMessageConverters</span><span class="params">(List&lt;HttpMessageConverter&lt;?&gt;&gt; converters)</span> </span>&#123;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">configureHandlerExceptionResolvers</span><span class="params">(List&lt;HandlerExceptionResolver&gt; exceptionResolvers)</span> </span>&#123;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">extendHandlerExceptionResolvers</span><span class="params">(List&lt;HandlerExceptionResolver&gt; exceptionResolvers)</span> </span>&#123;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> Validator <span class="title">getValidator</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> MessageCodesResolver <span class="title">getMessageCodesResolver</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>比如我们可以增加一个视图跳转控制器，如下：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Configuration</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WebMvcConfig</span> <span class="keyword">extends</span> <span class="title">WebMvcConfigurerAdapter</span></span>&#123;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addViewControllers</span><span class="params">(ViewControllerRegistry registry)</span> </span>&#123;</div><div class="line">        registry.addViewController(<span class="string">"/demo/123"</span>).setViewName(<span class="string">"/demo"</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<hr>
<h2 id="注册Servlet、Filter、Listener的方法"><a href="#注册Servlet、Filter、Listener的方法" class="headerlink" title="注册Servlet、Filter、Listener的方法"></a>注册Servlet、Filter、Listener的方法</h2><p>1.如果是war包项目，我们可以将Servlet、Filter、Listener注册到<strong>WebApplicationInitializer</strong>的实现类中<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Order</span>(<span class="number">1</span>)</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CommonInitializer</span> <span class="keyword">implements</span> <span class="title">WebApplicationInitializer</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onStartup</span><span class="params">(ServletContext servletContext)</span></span></div><div class="line">            <span class="keyword">throws</span> ServletException &#123;</div><div class="line"></div><div class="line">        <span class="comment">//Log4jConfigListener</span></div><div class="line">        servletContext.setInitParameter(<span class="string">"log4jConfigLocation"</span>, <span class="string">"classpath:log4j.properties"</span>);</div><div class="line">        servletContext.addListener(Log4jConfigListener.class);</div><div class="line"></div><div class="line"></div><div class="line">        <span class="comment">//OpenSessionInViewFilter</span></div><div class="line">        OpenSessionInViewFilter hibernateSessionInViewFilter = <span class="keyword">new</span> OpenSessionInViewFilter();</div><div class="line">        FilterRegistration.Dynamic filterRegistration = servletContext.addFilter(</div><div class="line">                <span class="string">"hibernateFilter"</span>, hibernateSessionInViewFilter);</div><div class="line">        filterRegistration.addMappingForUrlPatterns(</div><div class="line">                EnumSet.of(DispatcherType.REQUEST, DispatcherType.FORWARD, DispatcherType.INCLUDE), <span class="keyword">false</span>, <span class="string">"/"</span>);</div><div class="line"></div><div class="line"></div><div class="line">        <span class="comment">//DemoServlet</span></div><div class="line">        DemoServlet demoServlet = <span class="keyword">new</span> DemoServlet();</div><div class="line">        ServletRegistration.Dynamic dynamic = servletContext.addServlet(</div><div class="line">                <span class="string">"demoServlet"</span>, demoServlet);</div><div class="line">        dynamic.setLoadOnStartup(<span class="number">2</span>);</div><div class="line">        dynamic.addMapping(<span class="string">"/demo_servlet"</span>);</div><div class="line"></div><div class="line"></div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>2.如果是jar包部署方式，则可以将其注册到任意一个<strong>@Configuration</strong>配置类中<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Configuration</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WebConfig</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="meta">@Bean</span></div><div class="line">    <span class="function"><span class="keyword">public</span> ServletRegistrationBean <span class="title">servletRegistrationBean_demo1</span><span class="params">()</span></span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ServletRegistrationBean(<span class="keyword">new</span> DemoServlet(),<span class="string">"/demo-servlet1"</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Bean</span></div><div class="line">    <span class="function"><span class="keyword">public</span> ServletRegistrationBean <span class="title">servletRegistrationBean_demo2</span><span class="params">()</span></span>&#123;</div><div class="line">        ServletRegistrationBean servletRegistrationBean = <span class="keyword">new</span> ServletRegistrationBean();</div><div class="line">        servletRegistrationBean.addUrlMappings(<span class="string">"/demo-servlet2"</span>);</div><div class="line">        servletRegistrationBean.setServlet(<span class="keyword">new</span> DemoServlet2());</div><div class="line">        <span class="keyword">return</span> servletRegistrationBean;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Bean</span></div><div class="line">    <span class="function"><span class="keyword">public</span> FilterRegistrationBean <span class="title">filterRegistrationBean</span><span class="params">()</span></span>&#123;</div><div class="line"></div><div class="line">        FilterRegistrationBean filterRegistrationBean = <span class="keyword">new</span> FilterRegistrationBean();</div><div class="line">        filterRegistrationBean.setFilter(<span class="keyword">new</span> OpenSessionInViewFilter());</div><div class="line">        Set&lt;String&gt; set = <span class="keyword">new</span> HashSet&lt;String&gt;();</div><div class="line">        set.add(<span class="string">"/"</span>);</div><div class="line">        filterRegistrationBean.setUrlPatterns(set);</div><div class="line">        <span class="keyword">return</span> filterRegistrationBean;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Bean</span></div><div class="line">    <span class="function"><span class="keyword">public</span> ServletListenerRegistrationBean <span class="title">servletListenerRegistrationBean</span><span class="params">()</span></span>&#123;</div><div class="line">        ServletListenerRegistrationBean servletListenerRegistrationBean =  <span class="keyword">new</span> ServletListenerRegistrationBean();</div><div class="line">        servletListenerRegistrationBean.setListener(<span class="keyword">new</span> Log4jConfigListener());</div><div class="line">        servletListenerRegistrationBean.addInitParameter(<span class="string">"log4jConfigLocation"</span>,<span class="string">"classpath:log4j.properties"</span>);</div><div class="line">        <span class="keyword">return</span> servletListenerRegistrationBean;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<hr>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>一句话概括SpringBoot的自动配置–<strong>就是一组基于条件注解实现Bean注册的Spring配置类。</strong></p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;摘要&quot;&gt;&lt;a href=&quot;#摘要&quot; class=&quot;headerlink&quot; title=&quot;摘要&quot;&gt;&lt;/a&gt;摘要&lt;/h2&gt;&lt;p&gt;看完本文你将掌握如下知识点：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;SpringBoot都帮我们做了哪些自动配置&lt;/li&gt;
&lt;li&gt;我们如何接管SpringBoot的自动配置&lt;/li&gt;
&lt;li&gt;注册Servlet、Filter、Listener的方法&lt;/li&gt;
&lt;/ol&gt;
    
    </summary>
    
      <category term="技术" scheme="http://blog.hanqunfeng.com/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="Spring Boot" scheme="http://blog.hanqunfeng.com/tags/Spring-Boot/"/>
    
  </entry>
  
  <entry>
    <title>Spring Boot学习笔记01--基本介绍</title>
    <link href="http://blog.hanqunfeng.com/2016/12/09/spring-boot-study/"/>
    <id>http://blog.hanqunfeng.com/2016/12/09/spring-boot-study/</id>
    <published>2016-12-09T15:33:15.000Z</published>
    <updated>2016-12-12T08:52:28.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="摘要"><a href="#摘要" class="headerlink" title="摘要"></a>摘要</h2><p>看完本文你将掌握如下知识点：</p>
<ol>
<li>如何搭建一个SpringBoot项目</li>
<li>SpringBoot自动配置原理</li>
<li>SpringBoot属性配置方法</li>
<li>修改默认的Logback日志为log4j和log4j2的方法</li>
<li>修改默认的内置tomcat容器为Jetty容器和Undertow容器的方法 </li>
<li>SpringBoot单元测试方法</li>
<li>使用war包运行项目</li>
</ol>
<a id="more"></a>
<hr>
<p><strong>SpringBoot系列</strong>：<a href="/tags/Spring-Boot/">Spring Boot学习笔记</a></p>
<hr>
<h2 id="Spring-Boot简介"><a href="#Spring-Boot简介" class="headerlink" title="Spring Boot简介"></a>Spring Boot简介</h2><ul>
<li>要我给<a href="http://projects.spring.io/spring-boot/" target="_blank" rel="external">Spring Boot</a>做个定义，简单来说就是一个基于强大的Spring框架的、推崇JavaConfig的极简配置的web开发框架；</li>
<li>Spring Boot通过内嵌Servlet容器（Tomcat、Jetty，等等）的方式，可以以jar包的形式独立运行一个web项目；</li>
<li>Spring Boot提倡JavaConfig和注解的零配置方式，并且默认配置满足绝大多数场景的需要，意味着少量修改默认配置即可快速搭建一个web项目，极大的提高开发效率；</li>
<li>项目中加入某一个<code>spring-boot-starter-*</code>依赖，就可以引入该功能的完整jar包，降低pom的复杂度</li>
<li>本文基于Spring Boot的版本为<a href="http://docs.spring.io/spring-boot/docs/1.4.2.RELEASE/reference/htmlsingle/#appendix-dependency-versions" target="_blank" rel="external">1.4.2.RELEASE</a></li>
</ul>
<h2 id="Spring-Boot项目创建方法"><a href="#Spring-Boot项目创建方法" class="headerlink" title="Spring Boot项目创建方法"></a>Spring Boot项目创建方法</h2><ul>
<li><a href="http://start.spring.io" target="_blank" rel="external">http://start.spring.io</a>：可以通过网页创建项目结构并下载；</li>
<li><a href="http://docs.spring.io/spring-boot/docs/current/reference/html/getting-started-installing-spring-boot.html" target="_blank" rel="external">Spring Boot CLI</a>：通过命令行的方式创建Spring Boot项目；</li>
<li><a href="http://spring.io/tools/sts" target="_blank" rel="external">Spring Tool Suite</a>：习惯Eclipse的用户可以使用STS创建『Spring Starter Project』项目;</li>
<li><a href="https://www.jetbrains.com/idea/" target="_blank" rel="external">IntelliJ IDEA</a>：强大的生产力工具，推荐使用，创建『Spring Initializr』项目;</li>
</ul>
<h2 id="使用IntelliJ-IDEA创建一个web项目"><a href="#使用IntelliJ-IDEA创建一个web项目" class="headerlink" title="使用IntelliJ IDEA创建一个web项目"></a>使用IntelliJ IDEA创建一个web项目</h2><ol>
<li>新建Spring Initializr项目<br><img src="/images_glob/spring-boot-study/create1.png" alt=""><blockquote>
<p>说明：Spring Boot要求JDK1.6+</p>
</blockquote>
</li>
<li>填写项目信息，构建工具使用maven<br><img src="/images_glob/spring-boot-study/create2.png" alt=""></li>
<li>选择项目使用的依赖，这里我们只需要勾选web<br><img src="/images_glob/spring-boot-study/create3.png" alt=""><blockquote>
<ol>
<li>Spring Boot当前最新的稳定版是1.4.2；</li>
<li>所有依赖可以在创建时勾选，也可以在创建后手工将依赖添加到pom中，如果对依赖比较熟悉，推荐手工添加，这样可以加快创建项目的时间；</li>
</ol>
</blockquote>
</li>
<li>填写项目名称，点击Finish<br><img src="/images_glob/spring-boot-study/create4.png" alt=""></li>
<li>新建的项目结构如下<br><img src="/images_glob/spring-boot-study/create5.png" alt=""><blockquote>
<p>SpringBoot项目只会在项目根目录下生成一个类–SpringBootWebDemoApplication(artifactId+Application)，它就是一个带有main函数的启动类；</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.example;</div><div class="line"></div><div class="line"><span class="keyword">import</span> org.springframework.boot.SpringApplication;</div><div class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;</div><div class="line"></div><div class="line"><span class="meta">@SpringBootApplication</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SpringBootWebDemoApplication</span> </span>&#123;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">		SpringApplication.run(SpringBootWebDemoApplication.class, args);</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</blockquote>
</li>
</ol>
<ul>
<li>pom.xml说明<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</div><div class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">"http://maven.apache.org/POM/4.0.0"</span> <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></div><div class="line">	<span class="attr">xsi:schemaLocation</span>=<span class="string">"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"</span>&gt;</div><div class="line">	<span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></div><div class="line"></div><div class="line">	<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.example<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>springbootwebdemo<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">version</span>&gt;</span>0.0.1-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">packaging</span>&gt;</span>jar<span class="tag">&lt;/<span class="name">packaging</span>&gt;</span></div><div class="line"></div><div class="line">	<span class="tag">&lt;<span class="name">name</span>&gt;</span>SpringBootWebDemo<span class="tag">&lt;/<span class="name">name</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">description</span>&gt;</span>Demo project for Spring Boot<span class="tag">&lt;/<span class="name">description</span>&gt;</span></div><div class="line"></div><div class="line">  <span class="comment">&lt;!-- 创建的Springboot项目需要继承于spring-boot-starter-parent --&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">parent</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">version</span>&gt;</span>1.4.2.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">relativePath</span>/&gt;</span> <span class="comment">&lt;!-- lookup parent from repository --&gt;</span></div><div class="line">	<span class="tag">&lt;/<span class="name">parent</span>&gt;</span></div><div class="line"></div><div class="line">	<span class="tag">&lt;<span class="name">properties</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">project.build.sourceEncoding</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">project.build.sourceEncoding</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">project.reporting.outputEncoding</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">project.reporting.outputEncoding</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">java.version</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">java.version</span>&gt;</span></div><div class="line">	<span class="tag">&lt;/<span class="name">properties</span>&gt;</span></div><div class="line"></div><div class="line">	<span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></div><div class="line">    <span class="comment">&lt;!-- 创建项目是勾选的web依赖 --&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">		<span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line"></div><div class="line">    <span class="comment">&lt;!-- 每个项目都会自动添加一个test依赖 --&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></div><div class="line">		<span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line">	<span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></div><div class="line"></div><div class="line">	<span class="tag">&lt;<span class="name">build</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">plugins</span>&gt;</span></div><div class="line">      <span class="comment">&lt;!-- Springboot的编译插件 --&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">plugin</span>&gt;</span></div><div class="line">				<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">				<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">			<span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></div><div class="line">		<span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></div><div class="line">	<span class="tag">&lt;/<span class="name">build</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></div></pre></td></tr></table></figure>
</li>
</ul>
<blockquote>
<p>这就是一个web项目的pom文件，可以看到只关联了很少的依赖，这是因为我们继承的spring-boot-starter-parent和关联的spring-boot-starter-web本身已经为我们关联了全部的依赖，如下是该项目所有的依赖包<br><img src="/images_glob/spring-boot-study/create6.png" alt=""><br><img src="/images_glob/spring-boot-study/create7.png" alt=""></p>
</blockquote>
<h2 id="运行Spring-Boot项目"><a href="#运行Spring-Boot项目" class="headerlink" title="运行Spring Boot项目"></a>运行Spring Boot项目</h2><ol>
<li>maven运行：<code>mvn spring-boot:run</code>；</li>
<li>main函数运行：右键单击SpringBootWebDemoApplication，选择『Run 或者 Debug』；</li>
<li>推荐安装JRebel插件，支持热部署；</li>
<li>当然，也可以maven先打成jar，然后通过命令行执行<code>java -jar xx.jar</code>；<blockquote>
<ul>
<li>运行成功会看到控制台打印了如下信息<br><img src="/images_glob/spring-boot-study/run1.png" alt=""></li>
<li>可以看到打印信息中有tomcat的启动信息，说明springboot默认使用tomcat作为web运行容器，这点从上面的依赖包中也可以看到。因为当前项目并没有开放任何服务，所以此时访问8080端口会提示无服务<br><img src="/images_glob/spring-boot-study/run2.png" alt=""></li>
</ul>
</blockquote>
</li>
</ol>
<h3 id="添加服务"><a href="#添加服务" class="headerlink" title="添加服务"></a>添加服务</h3><ul>
<li><p>我们可以在项目中创建一个Controller控制器，比如DemoController</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.example.Controller;</div><div class="line"></div><div class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</div><div class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RestController;</div><div class="line"></div><div class="line"><span class="meta">@RestController</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DemoController</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="meta">@RequestMapping</span>(<span class="string">"/"</span>)</div><div class="line">    <span class="function">String <span class="title">index</span><span class="params">()</span></span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="string">"Hello Spring Boot!"</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>运行SpringBootWebDemoApplication，再次访问<a href="http://localhost:8080" target="_blank" rel="external">http://localhost:8080</a><br><img src="/images_glob/spring-boot-study/run3.png" alt=""></p>
</li>
</ul>
<hr>
<p><strong>一切似乎就是那么美好，我们什么都没配置，一个web项目就这样运行起来了，SpringBoot自动帮我们默认了一些常用的配置</strong></p>
<hr>
<h2 id="自动配置原理说明"><a href="#自动配置原理说明" class="headerlink" title="自动配置原理说明"></a>自动配置原理说明</h2><h3 id="SpringBootWebDemoApplication类上的注解：-SpringBootApplication"><a href="#SpringBootWebDemoApplication类上的注解：-SpringBootApplication" class="headerlink" title="SpringBootWebDemoApplication类上的注解：@SpringBootApplication"></a>SpringBootWebDemoApplication类上的注解：@SpringBootApplication</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> org.springframework.boot.autoconfigure;</div><div class="line"></div><div class="line"><span class="keyword">import</span> java.lang.annotation.Documented;</div><div class="line"><span class="keyword">import</span> java.lang.annotation.ElementType;</div><div class="line"><span class="keyword">import</span> java.lang.annotation.Inherited;</div><div class="line"><span class="keyword">import</span> java.lang.annotation.Retention;</div><div class="line"><span class="keyword">import</span> java.lang.annotation.RetentionPolicy;</div><div class="line"><span class="keyword">import</span> java.lang.annotation.Target;</div><div class="line"><span class="keyword">import</span> org.springframework.boot.SpringBootConfiguration;</div><div class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.EnableAutoConfiguration;</div><div class="line"><span class="keyword">import</span> org.springframework.boot.context.TypeExcludeFilter;</div><div class="line"><span class="keyword">import</span> org.springframework.context.annotation.ComponentScan;</div><div class="line"><span class="keyword">import</span> org.springframework.context.annotation.FilterType;</div><div class="line"><span class="keyword">import</span> org.springframework.context.annotation.ComponentScan.Filter;</div><div class="line"><span class="keyword">import</span> org.springframework.core.annotation.AliasFor;</div><div class="line"></div><div class="line"><span class="meta">@Target</span>(&#123;ElementType.TYPE&#125;)</div><div class="line"><span class="meta">@Retention</span>(RetentionPolicy.RUNTIME)</div><div class="line"><span class="meta">@Documented</span></div><div class="line"><span class="meta">@Inherited</span></div><div class="line"><span class="meta">@SpringBootConfiguration</span></div><div class="line"><span class="meta">@EnableAutoConfiguration</span></div><div class="line"><span class="meta">@ComponentScan</span>(</div><div class="line">    excludeFilters = &#123;<span class="meta">@Filter</span>(</div><div class="line">    type = FilterType.CUSTOM,</div><div class="line">    classes = &#123;TypeExcludeFilter.class&#125;</div><div class="line">)&#125;</div><div class="line">)</div><div class="line"><span class="keyword">public</span> <span class="meta">@interface</span> SpringBootApplication &#123;</div><div class="line">    Class&lt;?&gt;[] exclude() <span class="keyword">default</span> &#123;&#125;;</div><div class="line"></div><div class="line">    String[] excludeName() <span class="keyword">default</span> &#123;&#125;;</div><div class="line"></div><div class="line">    <span class="meta">@AliasFor</span>(</div><div class="line">        annotation = ComponentScan.class,</div><div class="line">        attribute = <span class="string">"basePackages"</span></div><div class="line">    )</div><div class="line">    String[] scanBasePackages() <span class="keyword">default</span> &#123;&#125;;</div><div class="line"></div><div class="line">    <span class="meta">@AliasFor</span>(</div><div class="line">        annotation = ComponentScan.class,</div><div class="line">        attribute = <span class="string">"basePackageClasses"</span></div><div class="line">    )</div><div class="line">    Class&lt;?&gt;[] scanBasePackageClasses() <span class="keyword">default</span> &#123;&#125;;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>@SpringBootConfiguration实际上就是@Configuration，说明这是一个JavaConfig</li>
<li>@ComponentScan，启用注解自动扫描</li>
<li>@EnableAutoConfiguration的作用是根据类路径中jar包是否存在来决定是否开启某一个功能的自动配置，比如，我们项目中添加了spring-boot-starter-web依赖，因其关联Tomcat和Srping MVC，所以类路径下就会存在Tomcat和Spring MVC的jar包，SpringBoot项目扫描到这些jar包后会自动开启两者的配置，当然，这个配置是默认配置，我们可以根据需要进行修改（下文介绍）。</li>
<li><p>exclude和excludeName用于关闭指定的自动配置，比如关闭数据源相关的自动配置</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@SpringBootApplication</span>(exclude=&#123;DataSourceAutoConfiguration.class&#125;)</div></pre></td></tr></table></figure>
</li>
<li><p>scanBasePackages和scanBasePackageClasses用于指定扫描的路径，默认情况下会自动扫描被@SpringBootApplication注解的类（这里是SpringBootWebDemoApplication）的同级包以及子包中的Bean。比如我们创建的DemoController，因为开启了SpringMVC自动配置，同时又在对应的路径下，所以该Controller会被自动加载。比如我们这里指定扫描的包路径如下：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@SpringBootApplication</span>(scanBasePackages = &#123;<span class="string">"com.temp.Controller"</span>&#125;)</div></pre></td></tr></table></figure>
</li>
</ul>
<blockquote>
<p>再次运行程序，发现原来的DemoController不能被访问了，而『com.temp.Controller』下的controller却可以被访问。</p>
</blockquote>
<h3 id="那么问题来了，SpringBoot到底为我们自动配置了哪些功能呢？"><a href="#那么问题来了，SpringBoot到底为我们自动配置了哪些功能呢？" class="headerlink" title="那么问题来了，SpringBoot到底为我们自动配置了哪些功能呢？"></a>那么问题来了，SpringBoot到底为我们自动配置了哪些功能呢？</h3><ul>
<li>开启Debug模式，方式有多种:<blockquote>
<ul>
<li>java -jar xx.jar –debug</li>
<li>在IDE中执行Run时添加VM arguments:<code>-Ddebug</code></li>
<li>在项目resources下的application.properties文件中增加<code>debug=true</code></li>
</ul>
</blockquote>
</li>
<li>Debug模式运行程序，打印信息中会显示如下内容<blockquote>
<p>启动的自动配置<br><img src="/images_glob/spring-boot-study/conf1.png" alt=""><br>未启用的自动配置<br><img src="/images_glob/spring-boot-study/conf2.png" alt=""></p>
</blockquote>
</li>
<li><p>从打印结果中看到，每一个<code>*AutoConfiguration*</code>都对应着一类功能的自动配置类，比如<em>HttpEncodingAutoConfiguration</em>:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">HttpEncodingAutoConfiguration matched:</div><div class="line">      - @ConditionalOnClass found required class &apos;org.springframework.web.filter.CharacterEncodingFilter&apos; (OnClassCondition)</div><div class="line">      - @ConditionalOnWebApplication (required) found StandardServletEnvironment (OnWebApplicationCondition)</div><div class="line">      - @ConditionalOnProperty (spring.http.encoding.enabled) matched (OnPropertyCondition)</div></pre></td></tr></table></figure>
</li>
<li><p>开启的自动配置中都会有<code>@ConditionalOnClass</code>、<code>@ConditionalOnWebApplication</code>等标识，这是什么意思呢？为了弄清楚这个，我们需要先来认识一下<code>@EnableAutoConfiguration</code>；</p>
</li>
</ul>
<h3 id="EnableAutoConfiguration"><a href="#EnableAutoConfiguration" class="headerlink" title="@EnableAutoConfiguration"></a>@EnableAutoConfiguration</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> org.springframework.boot.autoconfigure;</div><div class="line"></div><div class="line"><span class="keyword">import</span> java.lang.annotation.Documented;</div><div class="line"><span class="keyword">import</span> java.lang.annotation.ElementType;</div><div class="line"><span class="keyword">import</span> java.lang.annotation.Inherited;</div><div class="line"><span class="keyword">import</span> java.lang.annotation.Retention;</div><div class="line"><span class="keyword">import</span> java.lang.annotation.RetentionPolicy;</div><div class="line"><span class="keyword">import</span> java.lang.annotation.Target;</div><div class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.AutoConfigurationPackage;</div><div class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.EnableAutoConfigurationImportSelector;</div><div class="line"><span class="keyword">import</span> org.springframework.context.annotation.Import;</div><div class="line"></div><div class="line"><span class="meta">@Target</span>(&#123;ElementType.TYPE&#125;)</div><div class="line"><span class="meta">@Retention</span>(RetentionPolicy.RUNTIME)</div><div class="line"><span class="meta">@Documented</span></div><div class="line"><span class="meta">@Inherited</span></div><div class="line"><span class="meta">@AutoConfigurationPackage</span></div><div class="line"><span class="meta">@Import</span>(&#123;EnableAutoConfigurationImportSelector.class&#125;)</div><div class="line"><span class="keyword">public</span> <span class="meta">@interface</span> EnableAutoConfiguration &#123;</div><div class="line">    String ENABLED_OVERRIDE_PROPERTY = <span class="string">"spring.boot.enableautoconfiguration"</span>;</div><div class="line"></div><div class="line">    Class&lt;?&gt;[] exclude() <span class="keyword">default</span> &#123;&#125;;</div><div class="line"></div><div class="line">    String[] excludeName() <span class="keyword">default</span> &#123;&#125;;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>这里我们需要了解一下@Import注解中的EnableAutoConfigurationImportSelector<blockquote>
<p>感兴趣的可以看一下源码，大体的功能就是扫描jar包里是否含有<code>META-INF/spring.factories</code>文件;<br>并在spring.factories中找到<strong>@EnableAutoConfiguration</strong>的全路径名称<strong>org.springframework.boot.autoconfigure.EnableAutoConfiguration</strong>这个key，该key对应的value就是用于声明都需要启用哪些自动配置类;<br>比如<em>spring-boot-autoconfigure-1.4.2.RELEASE.jar</em>中就有一个spring.factories，可以看到<em>org.springframework.boot.autoconfigure.EnableAutoConfiguration</em>参数中列出了自动配置类列表，而<em>HttpEncodingAutoConfiguration</em>这个自动配置类就是其声明的;<br><img src="/images_glob/spring-boot-study/conf3.png" alt=""></p>
</blockquote>
</li>
</ul>
<h3 id="HttpEncodingAutoConfiguration"><a href="#HttpEncodingAutoConfiguration" class="headerlink" title="HttpEncodingAutoConfiguration"></a>HttpEncodingAutoConfiguration</h3><ul>
<li><p>先看下源码</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Configuration</span></div><div class="line"><span class="meta">@EnableConfigurationProperties</span>(&#123;HttpEncodingProperties.class&#125;)</div><div class="line"><span class="meta">@ConditionalOnWebApplication</span></div><div class="line"><span class="meta">@ConditionalOnClass</span>(&#123;CharacterEncodingFilter.class&#125;)</div><div class="line"><span class="meta">@ConditionalOnProperty</span>(</div><div class="line">    prefix = <span class="string">"spring.http.encoding"</span>,</div><div class="line">    value = &#123;<span class="string">"enabled"</span>&#125;,</div><div class="line">    matchIfMissing = <span class="keyword">true</span></div><div class="line">)</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HttpEncodingAutoConfiguration</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">final</span> HttpEncodingProperties properties;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">HttpEncodingAutoConfiguration</span><span class="params">(HttpEncodingProperties properties)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.properties = properties;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Bean</span></div><div class="line">    <span class="meta">@ConditionalOnMissingBean</span>(&#123;CharacterEncodingFilter.class&#125;)</div><div class="line">    <span class="function"><span class="keyword">public</span> CharacterEncodingFilter <span class="title">characterEncodingFilter</span><span class="params">()</span> </span>&#123;</div><div class="line">        OrderedCharacterEncodingFilter filter = <span class="keyword">new</span> OrderedCharacterEncodingFilter();</div><div class="line">        filter.setEncoding(<span class="keyword">this</span>.properties.getCharset().name());</div><div class="line">        filter.setForceRequestEncoding(<span class="keyword">this</span>.properties.shouldForce(Type.REQUEST));</div><div class="line">        filter.setForceResponseEncoding(<span class="keyword">this</span>.properties.shouldForce(Type.RESPONSE));</div><div class="line">        <span class="keyword">return</span> filter;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">//.......省略以下........</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>熟悉JavaConfig的都会明白，这就是一个配置类<code>@Configuration</code>，并且通过<code>@Bean</code>注册了一个<code>CharacterEncodingFilter</code>;</p>
</li>
</ul>
<hr>
<p>但是还有一些注解，是什么意思呢，我们分别说明：</p>
<hr>
<ul>
<li>@EnableConfigurationProperties：开启属性注入<blockquote>
<p>本例中表示<em>HttpEncodingProperties</em>是属性类，并使用@Autowired自动注入；<br>属性类实际上是一个是注解了<code>@ConfigurationProperties</code>的JavaBean，SpringBoot将属性文件（application.properties）中的键值对与JavaBean的属性建立起一一对应关系:</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@ConfigurationProperties</span>(</div><div class="line">    prefix = <span class="string">"spring.http.encoding"</span> <span class="comment">//属性值的前缀</span></div><div class="line">)</div><div class="line"></div><div class="line"><span class="comment">/*</span></div><div class="line">举例：application.properties中设置如下属性</div><div class="line">spring.http.encoding.charset=UTF-8</div><div class="line">spring.http.encoding.force=true</div><div class="line">*/</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HttpEncodingProperties</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> Charset charset;</div><div class="line">    <span class="keyword">private</span> Boolean force;</div><div class="line">    <span class="comment">//....属性声明及set、get方法........</span></div><div class="line">    &#125;</div></pre></td></tr></table></figure>
</blockquote>
</li>
</ul>
<hr>
<p>所有<strong>@ConditionalOn</strong>开头的注解都是用于进行条件判断的</p>
<hr>
<ul>
<li>@ConditionalOnWebApplication：当前项目是web项目的条件下才加载当前配置类</li>
<li><p>@ConditionalOnClass：当类路径下有指定的类的条件下才加载当前配置类</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//本例表示，当前类路径（含jar）下必须存在CharacterEncodingFilter</span></div><div class="line"><span class="meta">@ConditionalOnClass</span>(&#123;CharacterEncodingFilter.class&#125;)</div></pre></td></tr></table></figure>
</li>
<li><p>@ConditionalOnProperty：当指定的属性等于指定的值的情况下加载当前配置类</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// spring.http.encoding=enabled</span></div><div class="line"><span class="comment">// matchIfMissing = true表示如果没有在application.properties设置该属性，则默认为条件符合</span></div><div class="line"><span class="meta">@ConditionalOnProperty</span>(</div><div class="line">    prefix = <span class="string">"spring.http.encoding"</span>,</div><div class="line">    value = &#123;<span class="string">"enabled"</span>&#125;,</div><div class="line">    matchIfMissing = <span class="keyword">true</span></div><div class="line">)</div></pre></td></tr></table></figure>
</li>
<li><p>@ConditionalOnMissingBean：当前容器里没有指定的Bean的情况下</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 如果当前容器中找不到CharacterEncodingFilter实例，则创建当前的Bean</span></div><div class="line"><span class="meta">@ConditionalOnMissingBean</span>(&#123;CharacterEncodingFilter.class&#125;)</div></pre></td></tr></table></figure>
</li>
</ul>
<hr>
<p>通过上面的分析，应该可以明白SpringBoot是如何做到自动配置的，简单总结如下：</p>
<ol>
<li>@SpringBootConfiguration实际上就是@Configuration，说明这是一个JavaConfig</li>
<li>@EnableAutoConfiguration负责扫描jar包中的<code>META-INF/spring.factories</code>来找到要初始化的各种<strong>AutoConfiguration</strong>类</li>
<li>各种@Conditional注解决定哪些Bean可以被容器初始化</li>
<li>如果希望进一步了解SpringBoot的自动配置，建议查看每一个<strong>AutoConfiguration</strong>类的源码</li>
</ol>
<hr>
<h3 id="除了上面介绍的，-Conditional注解还有如下形式"><a href="#除了上面介绍的，-Conditional注解还有如下形式" class="headerlink" title="除了上面介绍的，@Conditional注解还有如下形式"></a>除了上面介绍的，@Conditional注解还有如下形式</h3><ul>
<li>@ConditionalOnExpression：基于SpEL表达式作为条件判断</li>
<li>@ConditionalOnJava：基于JAVA版本作为判断条件</li>
<li>@ConditionalOnJndi：在JNDI存在的条件下查找指定的位置</li>
<li>@ConditionalOnMissingClass：当前类路径下没有指定的类的条件下</li>
<li>@ConditionalOnNotWebApplication：当前项目不是web项目的条件下</li>
<li>@ConditionalOnResource：类路径下是否有指定的值</li>
<li>@ConditionalOnSingleCandidate：当指定的Bean在容器中只有一个的情况下</li>
</ul>
<hr>
<p>如果我们希望自己创建一个自动配置类(AutoConfiguration)，则只需要在我们自己创建的JavaConfig中加上<strong>@ConditionalOn</strong>注解，并且在类路径下创建<code>META-INF/spring.factories</code>，加入参数<code>org.springframework.boot.autoconfigure.EnableAutoConfiguration=xxxxAutoConfiguration</code></p>
<hr>
<h2 id="SpringBoot的配置文件"><a href="#SpringBoot的配置文件" class="headerlink" title="SpringBoot的配置文件"></a>SpringBoot的配置文件</h2><ul>
<li>SpringBoot支持常规的properties配置文件(application.properties)，还支持<a href="http://baike.baidu.com/link?url=Fe_VBwl7yKA6SO6fZF6USjJwefUUGq5VeN3tSjp3gpRTm7l3ZIoRvTye4QsIz95qJmaW6LC99Nkvb2vnLHBU4_" target="_blank" rel="external">yaml</a>语言的配置文件(application.yml)</li>
<li>SpringBoot会从classpath下的/config目录或者classpath的根目录查找application.properties或application.yml</li>
<li>如果要修改SpringBoot自动配置中默认配置，可以通过在配置文件中配置相应的参数即可</li>
<li>比如，项目启动时，tomcat默认的端口号是『8080』，访问路径是『/』，修改如下：</li>
<li><p><strong>application.properties</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">server.port=8081</div><div class="line">server.context-path=/demo</div></pre></td></tr></table></figure>
</li>
<li><p><strong>application.yml</strong></p>
<figure class="highlight yml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="attr">server:</span></div><div class="line"><span class="attr">  port:</span> <span class="number">8081</span></div><div class="line"><span class="attr">  context-path:</span> /demo</div></pre></td></tr></table></figure>
</li>
<li><p>IntelliJ IDEA支持对properties和yml的代码提示功能，编辑起来还是很方便的，不需要特别记住这些属性名称</p>
</li>
<li>SpringBoot默认使用priperites进行配置</li>
</ul>
<hr>
<p>SpringBoot的属性可以通过多种方式指定，配置文件只是其中一种方式，常用的方式还有如下几种，按加载的优先级列出：</p>
<blockquote>
<p>命令行参数：<code>java -jar xx.jar --server.port=8081 --server.context-path=/demo</code><br>操作系统环境变量：有些OS不支持使用.这种名字，如server.port，可以使用SERVER_PORT来配置。<br>项目中的配置文件：application.properties或者application.yml<br>项目依赖jar包中的配置文件：application.properties或者application.yml</p>
</blockquote>
<p><strong>关于SpringBoot支持的配置属性可以查看<a href="http://docs.spring.io/spring-boot/docs/1.4.2.RELEASE/reference/htmlsingle/#common-application-properties" target="_blank" rel="external">官网地址1.4.2.RELEASE</a></strong></p>
<hr>
<h3 id="Profile配置"><a href="#Profile配置" class="headerlink" title="Profile配置"></a>Profile配置</h3><ul>
<li>不同的环境可以使用不同的配置文件，application-{profile}.properties，比如<blockquote>
<p>开发：application-rnd.properties<br>测试：application-release.properties<br>验证：application-verify.properties<br>生产：application-prod.properties</p>
</blockquote>
</li>
<li>通过在application.properties(项目中必须包含该文件)中设置<code>spring.profiles.active=prod</code>来指定启用哪一个Profile。</li>
</ul>
<h2 id="关于属性配置还想多说的一些内容"><a href="#关于属性配置还想多说的一些内容" class="headerlink" title="关于属性配置还想多说的一些内容"></a>关于属性配置还想多说的一些内容</h2><ul>
<li>application.properties也可以配置自定义属性：my.name=hanqf</li>
<li><p>通过<code>@Value</code>将属性注入Bean属性</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Value</span>(<span class="string">"$&#123;my.name&#125;"</span>)</div><div class="line"><span class="keyword">private</span> String myName;</div></pre></td></tr></table></figure>
</li>
<li><p>通过<code>@ConfigurationProperties</code>将属性注入Bean对象</p>
</li>
</ul>
<p>使用<code>prefix</code><br><figure class="highlight yml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">my.name=hanqf</div><div class="line">my.servers[<span class="number">0</span>]=rnd.hanqf.com</div><div class="line">my.servers[<span class="number">1</span>]=release.hanqf.com</div></pre></td></tr></table></figure></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@ConfigurationProperties</span>(prefix=<span class="string">"my"</span>)</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Config</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> String name;</div><div class="line">    <span class="keyword">private</span> List&lt;String&gt; servers = <span class="keyword">new</span> ArrayList&lt;String&gt;();<span class="comment">//list需要初始化</span></div><div class="line"></div><div class="line">    <span class="comment">//....set and get method</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>不使用<code>prefix</code><br><figure class="highlight yml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">name=hanqf</div><div class="line">jdbc.username=root</div><div class="line">jdbc.password=root</div></pre></td></tr></table></figure></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@ConfigurationProperties</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Config</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> String name;</div><div class="line">    <span class="keyword">private</span> Jdbc jdbc;</div><div class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Jdbc</span> </span>&#123;</div><div class="line">        <span class="keyword">private</span> String username;</div><div class="line">        <span class="keyword">private</span> String password;</div><div class="line">        <span class="comment">//....set and get method</span></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">//....set and get method</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li><p>属性占位符</p>
<figure class="highlight yml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">app.name=MyApp</div><div class="line">app.description=$&#123;app.name&#125; is a Spring Boot application </div><div class="line"></div><div class="line">server.port=$&#123;port:<span class="number">8080</span>&#125; <span class="comment"># 如果没有设置port，则使用默认值8080</span></div></pre></td></tr></table></figure>
</li>
<li><p>属性名匹配规则</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@ConfigurationProperties</span>(prefix=<span class="string">"person"</span>)</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Config</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> String firstName;</div><div class="line"></div><div class="line">    <span class="comment">//....set and get method</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ul>
<p><code>firstName</code>可以使用的属性名如下：<br><figure class="highlight yml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">person.firstName，标准的驼峰式命名</div><div class="line">person.first-name，虚线（-）分割方式，推荐在.properties和.yml配置文件中使用</div><div class="line">PERSON_FIRST_NAME，大写下划线形式，建议在系统环境变量中使用</div></pre></td></tr></table></figure></p>
<h2 id="日志配置"><a href="#日志配置" class="headerlink" title="日志配置"></a>日志配置</h2><ul>
<li>Spring Boot默认使用Logback作为日志框架，这是推荐的方式，如果希望修改为熟悉的log4j可以看下文<blockquote>
<p>创建项目时我们引入了<code>spring-boot-starter-web</code>，其依赖<code>spring-boot-starter</code>，<code>spring-boot-starter</code>又依赖于<code>spring-boot-starter-logging</code>，该依赖内容就是Spring Boot默认的日志框架Logback<br>Logback相关设置，可以在<code>application.properties</code>中进行如下配置：</p>
<figure class="highlight yml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 日志文件路径</span></div><div class="line">logging.file=D:/my_log.log </div><div class="line"></div><div class="line"><span class="comment"># 配置日志打印级别</span></div><div class="line">logging.level.org.springframework=INFO</div></pre></td></tr></table></figure>
</blockquote>
</li>
</ul>
<blockquote>
<p>当然，也可以直接将自己的<code>logback.xml</code>放到项目根路径下</p>
</blockquote>
<ul>
<li>修改为log4j框架<br>pom中排除对<code>spring-boot-starter-logging</code>的依赖，并加入对<code>spring-boot-starter-log4j</code>的依赖<br>目前maven中央仓库的最新版本是<a href="http://mvnrepository.com/artifact/org.springframework.boot/spring-boot-starter-log4j" target="_blank" rel="external">1.3.8.RELEASE</a><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span>  </div><div class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">exclusions</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">exclusion</span>&gt;</span> </div><div class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-logging<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">exclusion</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">exclusions</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span>  </div><div class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-log4j<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.3.8.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span> </div><div class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div></pre></td></tr></table></figure>
</li>
</ul>
<p>项目根路径下添加<code>log4j.properties</code></p>
<ul>
<li>修改为log4j2框架<br>与log4j类似，修改pom，增加<code>spring-boot-starter-log4j2</code>依赖<br>目前maven中央仓库的最新版本是<a href="http://mvnrepository.com/artifact/org.springframework.boot/spring-boot-starter-log4j2" target="_blank" rel="external">1.4.2.RELEASE</a><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span>  </div><div class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">exclusions</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">exclusion</span>&gt;</span> </div><div class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-logging<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">exclusion</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">exclusions</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span>  </div><div class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-log4j2<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.4.2.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span> </div><div class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div></pre></td></tr></table></figure>
</li>
</ul>
<p>项目根路径下添加<code>log4j2.xml</code></p>
<hr>
<p><strong>说明</strong><br>这里需要说明一个问题，如果切换为其它log框架，<code>debug=true</code>将会失效，需要在各自的log配置文件中声明，比如log4j需要添加<code>log4j.logger.org.springframework.boot=debug</code></p>
<hr>
<h2 id="修改内置Tomcat为Jetty"><a href="#修改内置Tomcat为Jetty" class="headerlink" title="修改内置Tomcat为Jetty"></a>修改内置Tomcat为Jetty</h2><ul>
<li><p>修改pom，去除<code>spring-boot-starter-tomcat</code>的依赖，增加<code>spring-boot-starter-jetty</code>依赖<br>目前maven中央仓库的最新版本是<a href="http://mvnrepository.com/artifact/org.springframework.boot/spring-boot-starter-jetty" target="_blank" rel="external">1.4.2.RELEASE</a></p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">exclusions</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">exclusion</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-tomcat<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">exclusion</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">exclusions</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-jetty<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.4.2.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div></pre></td></tr></table></figure>
</li>
<li><p><code>application.properties</code>中的属性配置与tomcat一致</p>
</li>
</ul>
<h2 id="修改内置Tomcat为Undertow容器"><a href="#修改内置Tomcat为Undertow容器" class="headerlink" title="修改内置Tomcat为Undertow容器"></a>修改内置Tomcat为Undertow容器</h2><ul>
<li><p>修改pom，去除<code>spring-boot-starter-tomcat</code>的依赖，增加<code>spring-boot-starter-undertow</code>依赖<br>目前maven中央仓库的最新版本是<a href="http://mvnrepository.com/artifact/org.springframework.boot/spring-boot-starter-undertow" target="_blank" rel="external">1.4.2.RELEASE</a></p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">exclusions</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">exclusion</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-tomcat<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">exclusion</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">exclusions</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-undertow<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.4.2.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div></pre></td></tr></table></figure>
</li>
<li><p><code>application.properties</code>中的属性配置与tomcat一致</p>
</li>
</ul>
<h2 id="单元测试"><a href="#单元测试" class="headerlink" title="单元测试"></a>单元测试</h2><ul>
<li><p>创建一个单元测试的抽象父类，用于初始化必要的对象</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.common;</div><div class="line"></div><div class="line"><span class="keyword">import</span> org.junit.Before;</div><div class="line"><span class="keyword">import</span> org.junit.runner.RunWith;</div><div class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</div><div class="line"><span class="keyword">import</span> org.springframework.boot.test.context.SpringBootTest;</div><div class="line"><span class="keyword">import</span> org.springframework.test.context.junit4.SpringRunner;</div><div class="line"><span class="keyword">import</span> org.springframework.test.web.servlet.MockMvc;</div><div class="line"><span class="keyword">import</span> org.springframework.test.web.servlet.setup.MockMvcBuilders;</div><div class="line"><span class="keyword">import</span> org.springframework.web.context.WebApplicationContext;</div><div class="line"></div><div class="line"><span class="meta">@RunWith</span>(SpringRunner.class)</div><div class="line"><span class="comment">//1.4.2.RELEASE中不再需要@SpringApplicationConfiguration和@WebAppConfiguration</span></div><div class="line"><span class="meta">@SpringBootTest</span> </div><div class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">SpringBootTestParent</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">public</span> MockMvc mockMvc;</div><div class="line"></div><div class="line">    <span class="meta">@Autowired</span></div><div class="line">    WebApplicationContext webApplicationContext;</div><div class="line"></div><div class="line">    <span class="meta">@Before</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setUp</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">        mockMvc = MockMvcBuilders.webAppContextSetup(webApplicationContext).build();</div><div class="line"></div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>继承抽象父类，并实现测试逻辑</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SpringBootWebDemoApplicationTests</span> <span class="keyword">extends</span> <span class="title">SpringBootTestParent</span></span>&#123;</div><div class="line"></div><div class="line">    <span class="meta">@Autowired</span></div><div class="line">    DemoService demoService;</div><div class="line"></div><div class="line">    <span class="meta">@Test</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">content</span><span class="params">()</span></span>&#123;</div><div class="line">        String content = <span class="string">"456"</span>;</div><div class="line">        System.out.println(demoService.printContent(content));</div><div class="line">        Assert.assertEquals(content,demoService.printContent(content));</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Test</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span>  <span class="title">DemoControllerContent</span><span class="params">()</span></span>&#123;</div><div class="line">        String uri = <span class="string">"/content/123"</span>;</div><div class="line">        MvcResult mvcResult;</div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            mvcResult = mockMvc.perform(MockMvcRequestBuilders.get(uri)).andReturn();</div><div class="line">            System.out.println(mvcResult.getResponse().getStatus() + <span class="string">"##"</span> + mvcResult.getResponse().getContentAsString());</div><div class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</div><div class="line">            e.printStackTrace();</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ul>
<h2 id="使用war包的形式运行项目"><a href="#使用war包的形式运行项目" class="headerlink" title="使用war包的形式运行项目"></a>使用war包的形式运行项目</h2><p>上面我们介绍了SpringBoot通过jar的形式运行项目的方法，这也是SpringBoot推荐的方式，因其内置Servlet容器，所以发布和部署都非常方便，但是某些情况下（比如使用JSP作为VIEW层，内置容器的形式并不能支持），我们希望将web项目部署到自己的容器中，这时候就需要将SpringBoot项目打成war包部署，有两种方式：<br>1.创建项目时打包方式选择：war<br><img src="/images_glob/spring-boot-study/war1.png" alt=""></p>
<blockquote>
<p>war项目目录结构<br><img src="/images_glob/spring-boot-study/war2.png" alt=""></p>
</blockquote>
<p>2.将原打包方式为jar的项目修改为war形式<br>与war项目对比发现，通过修改如下内容，可以将jar项目修改为war项目<br>2.1 pom中将<code>&lt;packaging&gt;jar&lt;/packaging&gt;</code>==&gt;<code>&lt;packaging&gt;war&lt;/packaging&gt;</code><br>2.2 pom中添加tomcat依赖，显示声明scope为provided，这样打包时就不会将tomcat的jar包打到war中<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-tomcat<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">scope</span>&gt;</span>provided<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p>2.3 创建<em>ServletInitializer</em>类<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ServletInitializer</span> <span class="keyword">extends</span> <span class="title">SpringBootServletInitializer</span> </span>&#123;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">protected</span> SpringApplicationBuilder <span class="title">configure</span><span class="params">(SpringApplicationBuilder application)</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> application.sources(DemoWarApplication.class);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<hr>
<h2 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h2><ul>
<li>Servlet3.0规范，支持将web.xml相关配置也硬编码到代码中，并由<code>javax.servlet.ServletContainerInitializer</code>的实现类负责在容器启动时进行加载</li>
<li>spring提供了一个实现类<code>org.springframework.web.SpringServletContainerInitializer</code>,<br>该类会调用所有<code>org.springframework.web.WebApplicationInitializer</code>的实现类的onStartup(ServletContext servletContext)方法，从而将相关的容器组件注册到容器；</li>
<li>SpringBootServletInitializer就是WebApplicationInitializer的实现类；</li>
<li>我之前写过一篇<a href="http://hanqunfeng.iteye.com/blog/2113820" target="_blank" rel="external">SpringMVC4零配置</a>的文章，对零配置感兴趣的同学可以参考。</li>
</ul>
<hr>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;摘要&quot;&gt;&lt;a href=&quot;#摘要&quot; class=&quot;headerlink&quot; title=&quot;摘要&quot;&gt;&lt;/a&gt;摘要&lt;/h2&gt;&lt;p&gt;看完本文你将掌握如下知识点：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;如何搭建一个SpringBoot项目&lt;/li&gt;
&lt;li&gt;SpringBoot自动配置原理&lt;/li&gt;
&lt;li&gt;SpringBoot属性配置方法&lt;/li&gt;
&lt;li&gt;修改默认的Logback日志为log4j和log4j2的方法&lt;/li&gt;
&lt;li&gt;修改默认的内置tomcat容器为Jetty容器和Undertow容器的方法 &lt;/li&gt;
&lt;li&gt;SpringBoot单元测试方法&lt;/li&gt;
&lt;li&gt;使用war包运行项目&lt;/li&gt;
&lt;/ol&gt;
    
    </summary>
    
      <category term="技术" scheme="http://blog.hanqunfeng.com/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="Spring Boot" scheme="http://blog.hanqunfeng.com/tags/Spring-Boot/"/>
    
  </entry>
  
  <entry>
    <title>Markdown编辑器--Sublime Text和Atom</title>
    <link href="http://blog.hanqunfeng.com/2016/12/06/md-subl-atom/"/>
    <id>http://blog.hanqunfeng.com/2016/12/06/md-subl-atom/</id>
    <published>2016-12-06T11:33:15.000Z</published>
    <updated>2016-12-06T06:49:01.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="摘要"><a href="#摘要" class="headerlink" title="摘要"></a>摘要</h2><ul>
<li>Markdown 是一种轻量级的「标记语言」，相对于更为复杂的 HTML 标记语言来说Markdown的语法十分简单。<a href="http://baike.baidu.com/link?url=O9XKK1evEVJwA5MXb3ocPV8O5tsSKxUTLUByaLLP6j96MEJfABRnD9u43H_MY2z9HdaZWNy1boxsfGh10Tju3FZclXQnf2XCIALFVxBhiKS" target="_blank" rel="external">Markdown百度百科</a>；</li>
<li>Markdown语法说明<a href="http://wowubuntu.com/markdown/#list" target="_blank" rel="external">『中文』</a>，<a href="http://daringfireball.net/projects/markdown/syntax" target="_blank" rel="external">『英文』</a>，Hexo就是基于Markdown语法；</li>
<li>支持Markdown的编辑器很多，这里推荐使用Sublime Text和Atom，因为这两种编辑器对于喜欢编程的人来说都非常熟悉，支持多种语法并且跨平台，所以如果你已经在使用其中之一，就没必要为了使用markdown再安装其它的编辑器了；</li>
</ul>
<a id="more"></a>
<h2 id="Sublime-Text"><a href="#Sublime-Text" class="headerlink" title="Sublime Text"></a>Sublime Text</h2><ul>
<li><a href="http://www.sublimetext.com" target="_blank" rel="external">官方网站</a></li>
<li>Sublime默认不支持Markdown语法，需要安装插件，而要为Sublime Text安装插件，需要先安装<code>package control</code>；</li>
<li><a href="https://packagecontrol.io/installation" target="_blank" rel="external">Package Control安装方法</a>，简单说就是按『ctrl+`』调出控制台，并根据Sublime Text的版本粘贴相应的脚本并回车执行；</li>
<li>安装完成后按<code>ctrl+shift+p</code> (Win, Linux) or <code>cmd+shift+p</code> (OS X)，调出『Command Palette』，输入<code>package control install</code>回车，等待左下角的缓冲结束会弹出一个输入框，我们在里面输入插件的名称，即可快速筛选出可用的插件；<br><img src="/images_glob/md-subl-atom/subl1.png" alt=""><br><img src="/images_glob/md-subl-atom/subl2.png" alt=""></li>
<li>安装markdown编辑插件：<a href="https://github.com/SublimeText-Markdown/MarkdownEditing" target="_blank" rel="external">MarkdownEditing</a><blockquote>
<ol>
<li>在弹出的输入框中输入<code>MarkdownEditing</code>，回车安装，安装后需要重新启动Sublime Text；</li>
</ol>
<ul>
<li>新建文件后缀为md，则会自动开启markdown语法支持；</li>
<li>非md后缀文件，可以按<code>ctrl+shift+p</code> (Win, Linux) or <code>cmd+shift+p</code> (OS X)，调出『Command Palette』，输入<code>markdown</code>回车来开启markdown语法支持；</li>
</ul>
</blockquote>
</li>
<li>安装markdown查看插件：<a href="http://theo.im/OmniMarkupPreviewer/" target="_blank" rel="external">OmniMarkupPreviwer</a><blockquote>
<ol>
<li>在弹出的输入框中输入<code>OmniMarkupPreviwer</code>，回车安装，安装后需要重新启动Sublime Text；</li>
</ol>
<ul>
<li>打开markdown的文档，按<code>ctrl+alt+o</code> (Win, Linux) or <code>cmd+alt+o</code> (OS X)，会打开浏览器对当前文档查看效果；</li>
</ul>
</blockquote>
</li>
<li>可以通过下面的方式查看所有安装的插件，并对其进行个性化配置；<br><img src="/images_glob/md-subl-atom/subl3.png" alt=""></li>
</ul>
<h2 id="Atom"><a href="#Atom" class="headerlink" title="Atom"></a>Atom</h2><ul>
<li><a href="https://atom.io" target="_blank" rel="external">官方网站</a></li>
<li>Atom是github开发的开源跨平台的编辑器，Atom的强大可以与大名鼎鼎的Sublime Text相媲美。其使用方式与Sublime Text类似，所以如果会使用Sublime Text，上手Atom会很快。而且与Sublime Text相比，Atom是免费的，但是由于其安装包大小接近百兆，所以对于轻量级编辑器来说略显笨重；</li>
<li>Atom内置了对markdown的支持，编辑markdown文档时，按<code>ctrl+shift+M</code>即可打开实时预览窗口，这点比Sublime Text方便很多；</li>
<li>对于非md结尾的文档，可以通过点击右下角的语法格式条，在弹出筛选框输入<code>markdown</code>进行语法切换；</li>
<li>可以按<code>ctrl+,</code> (Win, Linux) or <code>cmd+,</code>(OS X)，调出Atom的Settings，对其进行设置以及插件的管理;<br><img src="/images_glob/md-subl-atom/atom1.png" alt=""></li>
</ul>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><ul>
<li>Atom相比Sublime Text来说一个新的产物，目前还不是很普及，不过Atom从一开始就整合了Sublime Text优点，同时提供了更友好的配置和管理方式，安装与卸载插件更加的方便；</li>
<li>编程时我们经常喜欢使用<code>snippets+tab</code>补全的方式来快速生成代码块，Atom和Sublime Text都支持snippets</li>
<li><p>Atom</p>
<blockquote>
<p>按<code>ctrl+shift+p</code> (Win, Linux) or <code>cmd+shift+p</code> (OS X)，调出『Command Palette』，输入<code>Snippet: Available</code>，可以调出snippets筛选框；</p>
</blockquote>
</li>
<li><p>Sublime Text</p>
<blockquote>
<p>按<code>ctrl+shift+p</code> (Win, Linux) or <code>cmd+shift+p</code> (OS X)，调出『Command Palette』，输入<code>Snippet:</code>，可以调出snippets筛选框；</p>
</blockquote>
</li>
<li><p>在Atom的Settings中，我们可以搜索相应的插件，并点击『settings』，可以在其中查看到其所支持的snippets，语法与Sublime Text一致；<br><img src="/images_glob/md-subl-atom/atom2.png" alt=""><br><img src="/images_glob/md-subl-atom/atom3.png" alt=""></p>
</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;摘要&quot;&gt;&lt;a href=&quot;#摘要&quot; class=&quot;headerlink&quot; title=&quot;摘要&quot;&gt;&lt;/a&gt;摘要&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;Markdown 是一种轻量级的「标记语言」，相对于更为复杂的 HTML 标记语言来说Markdown的语法十分简单。&lt;a href=&quot;http://baike.baidu.com/link?url=O9XKK1evEVJwA5MXb3ocPV8O5tsSKxUTLUByaLLP6j96MEJfABRnD9u43H_MY2z9HdaZWNy1boxsfGh10Tju3FZclXQnf2XCIALFVxBhiKS&quot;&gt;Markdown百度百科&lt;/a&gt;；&lt;/li&gt;
&lt;li&gt;Markdown语法说明&lt;a href=&quot;http://wowubuntu.com/markdown/#list&quot;&gt;『中文』&lt;/a&gt;，&lt;a href=&quot;http://daringfireball.net/projects/markdown/syntax&quot;&gt;『英文』&lt;/a&gt;，Hexo就是基于Markdown语法；&lt;/li&gt;
&lt;li&gt;支持Markdown的编辑器很多，这里推荐使用Sublime Text和Atom，因为这两种编辑器对于喜欢编程的人来说都非常熟悉，支持多种语法并且跨平台，所以如果你已经在使用其中之一，就没必要为了使用markdown再安装其它的编辑器了；&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="随笔" scheme="http://blog.hanqunfeng.com/categories/%E9%9A%8F%E7%AC%94/"/>
    
    
      <category term="Markdown" scheme="http://blog.hanqunfeng.com/tags/Markdown/"/>
    
  </entry>
  
  <entry>
    <title>Hexo--解决百度不能索引git page的问题</title>
    <link href="http://blog.hanqunfeng.com/2016/12/05/hexo-baidu-coding/"/>
    <id>http://blog.hanqunfeng.com/2016/12/05/hexo-baidu-coding/</id>
    <published>2016-12-05T11:33:15.000Z</published>
    <updated>2016-12-07T07:12:13.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="摘要"><a href="#摘要" class="headerlink" title="摘要"></a>摘要</h2><ul>
<li>由于git page网站对百度spider进行了屏蔽，所以导致了百度是无法对我们发布在git page上的网站进行索引；</li>
<li>解决方式是将我们的代码发布到国内的coding站点，其同样可以提供代码托管和Pages服务；<a id="more"></a>
</li>
</ul>
<h2 id="Coding配置"><a href="#Coding配置" class="headerlink" title="Coding配置"></a>Coding配置</h2><ul>
<li><a href="https://coding.net" target="_blank" rel="external">Coding站点地址</a>，注册个帐号</li>
<li>新建一个项目，比如：<br><img src="/images_glob/hexo-baidu-coding/coding1.png" alt=""></li>
<li>设置SSH公钥，实现免密提交代码，如下图，将我们设置github page时生成的公钥填入其中，这里注意，要去掉最后面的邮箱地址。<a href="/2016/11/14/hexo_gitpage/">参考</a><br><img src="/images_glob/hexo-baidu-coding/coding2.png" alt=""></li>
<li>新建coding-pages分支，并设置为默认<br><img src="/images_glob/hexo-baidu-coding/coding3.png" alt=""></li>
<li>开启Pages服务<br><img src="/images_glob/hexo-baidu-coding/coding4.png" alt=""><blockquote>
<p>注意，此时提交代码后，可以通过<a href="http://hanqunfeng.coding.me" target="_blank" rel="external">http://hanqunfeng.coding.me</a>访问</p>
</blockquote>
</li>
</ul>
<h2 id="Hexo配置"><a href="#Hexo配置" class="headerlink" title="Hexo配置"></a>Hexo配置</h2><ul>
<li><p>hexo支持多仓库发布</p>
<figure class="highlight yml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="attr">deploy:</span></div><div class="line"><span class="attr">- type:</span> git</div><div class="line"><span class="attr">  repo:</span> https://github.com/hanqunfeng/hanqunfeng.github.io.git</div><div class="line"><span class="attr">  branch:</span> master</div><div class="line"><span class="attr">- type:</span> git</div><div class="line"><span class="attr">  repo:</span> https://git.coding.net/hanqunfeng/hanqunfeng.git</div><div class="line"><span class="attr">  branch:</span> coding-pages</div></pre></td></tr></table></figure>
</li>
<li><p>执行<code>hexo d</code>，会将代码同时发布到github和coding</p>
</li>
</ul>
<h2 id="域名解析–Dnspod"><a href="#域名解析–Dnspod" class="headerlink" title="域名解析–Dnspod"></a>域名解析–Dnspod</h2><ul>
<li>因为代码同时发布到github和coding，所以我希望国内用户访问coding，国外用户访问github，这样可以提高访问效率；</li>
<li>使用Dnspod实现域名解析，其支持让来源为指定线路的用户访问特定的地址；</li>
<li>注册一个Dnspod帐号，注册成功后在【域名解析】中添加一个域名，我这里添加的就是<code>hanqunfeng.com</code>；<br><img src="/images_glob/hexo-baidu-coding/coding5.png" alt=""></li>
<li>添加成功后会自动解析出两个记录类型为A的记录，选择导入；</li>
<li>之后手工添加两条记录，一个CNAME到hanqunfeng.github.io.【国外】，一个CNAME到hanqunfeng.coding.me.【国内】，如下：<br><img src="/images_glob/hexo-baidu-coding/coding6.png" alt=""><blockquote>
<p>注意记录值最后都要加个点</p>
</blockquote>
</li>
</ul>
<h2 id="修改万网的域名DNS"><a href="#修改万网的域名DNS" class="headerlink" title="修改万网的域名DNS"></a>修改万网的域名DNS</h2><ul>
<li>因为我的域名是在万网购买的，所以要想Dnspod起作用，需要修改万网中的DNS为Dnspod提供的地址；</li>
<li><a href="https://help.aliyun.com/knowledge_detail/39845.html" target="_blank" rel="external">万网域名修改 DNS 方法</a><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">f1g1ns1.dnspod.net</div><div class="line">f1g1ns2.dnspod.net</div></pre></td></tr></table></figure>
</li>
</ul>
<h2 id="Coding-Pages服务中配置映射域名"><a href="#Coding-Pages服务中配置映射域名" class="headerlink" title="Coding Pages服务中配置映射域名"></a>Coding Pages服务中配置映射域名</h2><p><img src="/images_glob/hexo-baidu-coding/coding7.png" alt=""></p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;摘要&quot;&gt;&lt;a href=&quot;#摘要&quot; class=&quot;headerlink&quot; title=&quot;摘要&quot;&gt;&lt;/a&gt;摘要&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;由于git page网站对百度spider进行了屏蔽，所以导致了百度是无法对我们发布在git page上的网站进行索引；&lt;/li&gt;
&lt;li&gt;解决方式是将我们的代码发布到国内的coding站点，其同样可以提供代码托管和Pages服务；
    
    </summary>
    
      <category term="随笔" scheme="http://blog.hanqunfeng.com/categories/%E9%9A%8F%E7%AC%94/"/>
    
    
      <category term="hexo" scheme="http://blog.hanqunfeng.com/tags/hexo/"/>
    
  </entry>
  
  <entry>
    <title>Hexo--百度和谷歌搜索引擎索引方法</title>
    <link href="http://blog.hanqunfeng.com/2016/12/05/hexo-baidu-google/"/>
    <id>http://blog.hanqunfeng.com/2016/12/05/hexo-baidu-google/</id>
    <published>2016-12-05T04:33:15.000Z</published>
    <updated>2016-12-06T02:30:05.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="摘要"><a href="#摘要" class="headerlink" title="摘要"></a>摘要</h2><ul>
<li>让百度和谷歌搜索引擎对当前站点进行索引的方法。</li>
<li>由于国内对谷歌的访问限制，所以可以使用chrome浏览器安装『谷歌访问助手』插件，<a href="http://jingyan.baidu.com/article/fa4125acdb25fa28ac70921d.html" target="_blank" rel="external">安装方法</a><a id="more"></a>
</li>
</ul>
<h2 id="百度搜索"><a href="#百度搜索" class="headerlink" title="百度搜索"></a>百度搜索</h2><ul>
<li>需要拥有百度帐号，并进行<a href="http://zhanzhang.baidu.com/site/siteadd" target="_blank" rel="external">网站验证</a>，因为我已经验证过blog.hanqunfneg.com，所以这里为了演示，使用www.hanqunfeng.com进行验证。<br><img src="/images_glob/hexo-baidu-google/b1.png" alt=""></li>
<li>推荐『HTML 文件上传』的方式进行验证</li>
<li><p>将百度的验证文件，如我的是baidu_verify_5T5OVCioxp.html下载到本地，并拷贝到source目录下，并在文件上方增加如下内容,这样可以保证该文件不会被编译：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">layout: <span class="literal">false</span></div><div class="line">---</div><div class="line">5T5OVCioxp</div></pre></td></tr></table></figure>
</li>
<li><p>编译并发布，之后在刚才的下载页面进行验证<br><img src="/images_glob/hexo-baidu-google/b2.png" alt=""></p>
</li>
</ul>
<h2 id="谷歌搜索"><a href="#谷歌搜索" class="headerlink" title="谷歌搜索"></a>谷歌搜索</h2><ul>
<li>需要拥有谷歌帐号，并进行<a href="https://www.google.com/webmasters/tools/home?hl=zh-CN" target="_blank" rel="external">网站验证</a><br><img src="/images_glob/hexo-baidu-google/g1.png" alt=""></li>
<li>推荐『HTML 文件上传』的方式进行验证</li>
<li><p>将谷歌的验证文件，如我的是googleea53a22ff4210278.html下载到本地，并拷贝到source目录下，并在文件上方增加如下内容,这样可以保证该文件不会被编译：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">layout: <span class="literal">false</span></div><div class="line">---</div><div class="line">google-site-verification: googleea53a22ff4210278.html</div></pre></td></tr></table></figure>
</li>
<li><p>编译并发布，之后在刚才的下载页面进行验证<br><img src="/images_glob/hexo-baidu-google/g2.png" alt=""></p>
</li>
</ul>
<h2 id="插件站点地图安装"><a href="#插件站点地图安装" class="headerlink" title="插件站点地图安装"></a>插件站点地图安装</h2><ul>
<li><p>分别使用以下命令来安装针对百度和Google的地图插件，在站点的根目录下执行以下命令：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ npm install hexo-generator-sitemap --save</div><div class="line">$ npm install hexo-generator-baidu-sitemap --save</div></pre></td></tr></table></figure>
</li>
<li><p>配置hexo的站点配置文件_config.yml</p>
<figure class="highlight yml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#启用相应插件</span></div><div class="line"><span class="attr">Plugins:</span></div><div class="line"><span class="bullet">-</span> hexo-generator-sitemap</div><div class="line"><span class="bullet">-</span> hexo-generator-baidu-sitemap</div><div class="line"></div><div class="line"><span class="comment">#配置站点地图文件</span></div><div class="line"><span class="comment">#sitemap</span></div><div class="line"><span class="attr">sitemap:</span></div><div class="line"><span class="attr">    path:</span> sitemap.xml    </div><div class="line"><span class="attr">baidusitemap:</span></div><div class="line"><span class="attr">path:</span> baidusitemap.xml</div></pre></td></tr></table></figure>
</li>
<li><p>执行<code>hexo g</code>，当你成功编译并在Public目录下生成对应的baidusitemap.xml(针对百度)，sitemap.xml(针对Google)表明你已经成功建立的站点地图。</p>
</li>
</ul>
<h2 id="收录站点地图"><a href="#收录站点地图" class="headerlink" title="收录站点地图"></a>收录站点地图</h2><ul>
<li>百度推送<blockquote>
<p>入口：<a href="http://zhanzhang.baidu.com/linksubmit/index" target="_blank" rel="external">百度站长–网页抓取–链接提交</a><br><img src="/images_glob/hexo-baidu-google/bt1.png" alt=""></p>
</blockquote>
</li>
<li>谷歌推送<blockquote>
<p>入口：<a href="https://www.google.com/webmasters/tools/home?hl=zh-CN" target="_blank" rel="external">Google Search Console–抓取–站点地图</a><br><img src="/images_glob/hexo-baidu-google/gt1.png" alt=""></p>
</blockquote>
</li>
</ul>
<h2 id="百度推送方式–自动推送"><a href="#百度推送方式–自动推送" class="headerlink" title="百度推送方式–自动推送"></a>百度推送方式–自动推送</h2><ul>
<li>索引效率：主动推送&gt;自动推送&gt;sitemap</li>
<li>百度的网站上有说明，<a href="http://zhanzhang.baidu.com/linksubmit/index" target="_blank" rel="external">地址</a></li>
<li>将自动推送的js脚本拷贝到<code>themes\next\layout\_partials\footer.swig</code>文件的最下方即可</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;摘要&quot;&gt;&lt;a href=&quot;#摘要&quot; class=&quot;headerlink&quot; title=&quot;摘要&quot;&gt;&lt;/a&gt;摘要&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;让百度和谷歌搜索引擎对当前站点进行索引的方法。&lt;/li&gt;
&lt;li&gt;由于国内对谷歌的访问限制，所以可以使用chrome浏览器安装『谷歌访问助手』插件，&lt;a href=&quot;http://jingyan.baidu.com/article/fa4125acdb25fa28ac70921d.html&quot;&gt;安装方法&lt;/a&gt;
    
    </summary>
    
      <category term="随笔" scheme="http://blog.hanqunfeng.com/categories/%E9%9A%8F%E7%AC%94/"/>
    
    
      <category term="hexo" scheme="http://blog.hanqunfeng.com/tags/hexo/"/>
    
  </entry>
  
  <entry>
    <title>学习笔记</title>
    <link href="http://blog.hanqunfeng.com/2016/12/02/book/"/>
    <id>http://blog.hanqunfeng.com/2016/12/02/book/</id>
    <published>2016-12-02T11:24:04.000Z</published>
    <updated>2016-12-02T15:51:09.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="资料列表"><a href="#资料列表" class="headerlink" title="资料列表"></a>资料列表</h2><ul>
<li><a href="/book/zabbix">CentOS7下zabbix3.2的安装及使用</a></li>
<li><a href="/book/rancher">Rancher–Docker的管理控制台</a></li>
<li><a href="/book/git">git学习笔记</a></li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;资料列表&quot;&gt;&lt;a href=&quot;#资料列表&quot; class=&quot;headerlink&quot; title=&quot;资料列表&quot;&gt;&lt;/a&gt;资料列表&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;/book/zabbix&quot;&gt;CentOS7下zabbix3.2的安装及使用&lt;/a&gt;&lt;/li&gt;

    
    </summary>
    
      <category term="学习笔记" scheme="http://blog.hanqunfeng.com/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="学习笔记" scheme="http://blog.hanqunfeng.com/tags/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>Dubbo初体验</title>
    <link href="http://blog.hanqunfeng.com/2016/12/01/dubbo_dubbox/"/>
    <id>http://blog.hanqunfeng.com/2016/12/01/dubbo_dubbox/</id>
    <published>2016-12-01T11:24:04.000Z</published>
    <updated>2016-12-02T02:06:46.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="摘要"><a href="#摘要" class="headerlink" title="摘要"></a>摘要</h2><ul>
<li><a href="http://dubbo.io/Home-zh.htm" target="_blank" rel="external">官网地址</a>，官网有完整的资料以帮助使用者快速熟悉dubbo，不过目前相关下载地址已经失效，代码已经迁移到github，请参看下面的代码地址，自行编译打包</li>
</ul>
<a id="more"></a>
<h2 id="dubbo代码地址"><a href="#dubbo代码地址" class="headerlink" title="dubbo代码地址"></a>dubbo代码地址</h2><blockquote>
<ul>
<li><a href="https://github.com/alibaba/dubbo" target="_blank" rel="external">2.5.4(官方版本)</a>，基于spring3.2.16.RELEASE</li>
<li><a href="https://github.com/dangdangdotcom/dubbox" target="_blank" rel="external">2.8.4(第三方基于2.5.3修改)</a>，基于spring3.2.9.RELEASE,项目名称为dubbox，但生成的包名依然是dubbo</li>
</ul>
</blockquote>
<h2 id="git、maven、jdk、tomcat、nexus请自行安装，我安装的版本如下"><a href="#git、maven、jdk、tomcat、nexus请自行安装，我安装的版本如下" class="headerlink" title="git、maven、jdk、tomcat、nexus请自行安装，我安装的版本如下"></a>git、maven、jdk、tomcat、nexus请自行安装，我安装的版本如下</h2><blockquote>
<p>git version 2.9.3<br>Apache Maven 3.3.9<br>java version “1.8.0_31”<br>tomcat version 8.5.4<br>nexus version 2.5.0-04</p>
</blockquote>
<h2 id="编译打包"><a href="#编译打包" class="headerlink" title="编译打包"></a>编译打包</h2><h3 id="以dubbo2-8-4为例"><a href="#以dubbo2-8-4为例" class="headerlink" title="以dubbo2.8.4为例"></a>以dubbo2.8.4为例</h3><blockquote>
<ul>
<li>git clone <a href="https://github.com/dangdangdotcom/dubbox.git" target="_blank" rel="external">https://github.com/dangdangdotcom/dubbox.git</a></li>
<li>cd dubbox </li>
<li>mvn clean package install -Dmaven.test.skip=true</li>
</ul>
</blockquote>
<h3 id="发布dubbo2-8-4到nexus的3rd-party仓库"><a href="#发布dubbo2-8-4到nexus的3rd-party仓库" class="headerlink" title="发布dubbo2.8.4到nexus的3rd party仓库"></a>发布dubbo2.8.4到nexus的3rd party仓库</h3><blockquote>
<ul>
<li>登录nexus，设置3rd party的Deployment Policy=Allow Redeploy(在Configuration中配置)</li>
<li><p>vi ~/.m2/settings.xml，在servers中增加如下配置</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">server</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">id</span>&gt;</span>thirdparty<span class="tag">&lt;/<span class="name">id</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">username</span>&gt;</span>admin<span class="tag">&lt;/<span class="name">username</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">password</span>&gt;</span>admin123<span class="tag">&lt;/<span class="name">password</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">server</span>&gt;</span></div></pre></td></tr></table></figure>
</li>
<li><p>修改dubbox的pom.xml，增加如下配置</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">distributionManagement</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">repository</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">id</span>&gt;</span>thirdparty<span class="tag">&lt;/<span class="name">id</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">url</span>&gt;</span>http://192.168.36.49:8080/nexus/content/repositories/thirdparty/<span class="tag">&lt;/<span class="name">url</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">repository</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">distributionManagement</span>&gt;</span></div></pre></td></tr></table></figure>
</li>
<li><p>mvn clean package deploy -Dmaven.test.skip=true</p>
</li>
</ul>
</blockquote>
<h3 id="发布dubbo2-5-4到nexus的3rd-party仓库"><a href="#发布dubbo2-5-4到nexus的3rd-party仓库" class="headerlink" title="发布dubbo2.5.4到nexus的3rd party仓库"></a>发布dubbo2.5.4到nexus的3rd party仓库</h3><blockquote>
<ul>
<li>因为目前2.5.4是Snapshots版本，所以不能直接发布到3rd party中，如果要发布到3rd party，需要修改pom.xml，去掉版本号中的Snapshots，比如在intellij IDEA中，使用快捷键Command+Shift+R；</li>
</ul>
</blockquote>
<h2 id="dubbo包含四个组件"><a href="#dubbo包含四个组件" class="headerlink" title="dubbo包含四个组件"></a>dubbo包含四个组件</h2><ul>
<li>Provider: 暴露服务的服务提供方。这里我们自己提供(基于2.8.4)；</li>
<li>Consumer: 调用远程服务的服务消费方。这里我们自己提供(基于2.8.4)；</li>
<li>Registry: 服务注册与发现的注册中心。这里使用zookeeper；</li>
<li>Monitor: 统计服务的调用次调和调用时间的监控中心。这里介绍两个，一个是dubbo提供的dubbo-monitor-simple，另一个是第三方对dubbo-monitor-simple的改进版本：<a href="http://git.oschina.net/handu/dubbo-monitor" target="_blank" rel="external">改版的monitor(基于2.8.4)</a></li>
</ul>
<hr>
<p>下面分别介绍：顺序为Registry，Provider，Consumer，Monitor。</p>
<hr>
<h2 id="ZooKeeper-Registry注册中心"><a href="#ZooKeeper-Registry注册中心" class="headerlink" title="ZooKeeper Registry注册中心"></a>ZooKeeper Registry注册中心</h2><p><a href="http://zookeeper.apache.org" target="_blank" rel="external">官网地址</a></p>
<h3 id="下载安装"><a href="#下载安装" class="headerlink" title="下载安装"></a>下载安装</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">$ wget http://apache.fayea.com/zookeeper/zookeeper-3.4.9/zookeeper-3.4.9.tar.gz</div><div class="line">$ tar zxvf zookeeper-3.4.9.tar.gz</div><div class="line">$ <span class="built_in">cd</span> zookeeper-3.4.9</div><div class="line">$ cp conf/zoo_sample.cfg conf/zoo.cfg</div></pre></td></tr></table></figure>
<h3 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h3><p>$ vi conf/zoo.cfg<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">tickTime=2000</div><div class="line">initLimit=10</div><div class="line">syncLimit=5</div><div class="line"><span class="comment">#实际上只需要配置dataDir，这里修改为自己的存储目录</span></div><div class="line">dataDir=/usr/<span class="built_in">local</span>/zookeeper-3.4.9/data</div><div class="line">clientPort=2181</div></pre></td></tr></table></figure></p>
<h3 id="集群配置"><a href="#集群配置" class="headerlink" title="集群配置"></a>集群配置</h3><ul>
<li>分别在两台主机上按上述方法安装zookeeper，比如两台主机的IP分别为192.168.37.144、192.168.37.143；</li>
<li><p>分别在两台主机的zoo.cfg中增加如下配置</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">server.1=192.168.37.144:2555:3555</div><div class="line">server.2=192.168.37.143:2555:3555</div></pre></td></tr></table></figure>
</li>
<li><p>在144主机的dataDir指定的目录(/usr/local/zookeeper-3.4.9/data)下创建文件myid</p>
<blockquote>
<p>vi myid<br>设置内容为1  #就是zoo.cfg中server.后面对应的数字</p>
</blockquote>
</li>
<li><p>同理将143的myid文件中内容设置为2</p>
</li>
</ul>
<h3 id="开放端口"><a href="#开放端口" class="headerlink" title="开放端口"></a>开放端口</h3><ul>
<li><p>两台主机分别开放2181，2555，3555端口<br>vi /etc/sysconfig/iptablse，加入如下内容</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#zookeeper</span></div><div class="line">-A INPUT -p tcp -m state --state NEW -m tcp --dport 2181 -j ACCEPT</div><div class="line">-A INPUT -p tcp -m state --state NEW -m tcp --dport 2555 -j ACCEPT</div><div class="line">-A INPUT -p tcp -m state --state NEW -m tcp --dport 3555 -j ACCEPT</div></pre></td></tr></table></figure>
</li>
<li><p>重启iptables</p>
</li>
</ul>
<h3 id="启动与关闭zookeeper"><a href="#启动与关闭zookeeper" class="headerlink" title="启动与关闭zookeeper"></a>启动与关闭zookeeper</h3><p>./bin/zkServer.sh start<br>./bin/zkServer.sh stop</p>
<h3 id="查看在zookeeper中注册的信息"><a href="#查看在zookeeper中注册的信息" class="headerlink" title="查看在zookeeper中注册的信息"></a>查看在zookeeper中注册的信息</h3><p>echo dump | nc 192.168.37.144 2181<br>OR<br>telnet 192.168.37.144 2188<br>dump</p>
<hr>
<p>关于Provider&amp;Consumer，阿里官方的实例很详细了，网上也有很多资料，这里只做简单的说明，示例项目依赖于dubbo2.8.4,spring替换为4.3.3，使用中并未见异常，示例源码地址:<a href="https://github.com/hanqunfeng/DubboStudy" target="_blank" rel="external">https://github.com/hanqunfeng/DubboStudy</a></p>
<hr>
<h2 id="Provider-服务提供者"><a href="#Provider-服务提供者" class="headerlink" title="Provider 服务提供者"></a>Provider 服务提供者</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</div><div class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></div><div class="line">       <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></div><div class="line">       <span class="attr">xmlns:dubbo</span>=<span class="string">"http://code.alibabatech.com/schema/dubbo"</span></div><div class="line">       <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-4.3.xsd</span></div><div class="line">    http://code.alibabatech.com/schema/dubbo http://code.alibabatech.com/schema/dubbo/dubbo.xsd"&gt;</div><div class="line"></div><div class="line">    <span class="comment">&lt;!-- 一个项目中只能有一个dubbo:application配置项 --&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">dubbo:application</span> <span class="attr">name</span>=<span class="string">"demo-provider"</span> <span class="attr">owner</span>=<span class="string">"hanqf"</span> <span class="attr">organization</span>=<span class="string">"dubbox"</span>/&gt;</span></div><div class="line"></div><div class="line">    <span class="comment">&lt;!-- 使用zookeeper注册中心暴露服务地址--&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">dubbo:registry</span></span></div><div class="line">            <span class="attr">address</span>=<span class="string">"zookeeper://192.168.37.144:2181?backup=192.168.37.143:2181"</span> <span class="attr">timeout</span>=<span class="string">"50000"</span>/&gt;</div><div class="line"></div><div class="line">    <span class="comment">&lt;!-- 用dubbo协议在20880端口暴露服务 --&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">dubbo:protocol</span> <span class="attr">name</span>=<span class="string">"dubbo"</span> <span class="attr">port</span>=<span class="string">"20880"</span>/&gt;</span></div><div class="line"></div><div class="line">    <span class="comment">&lt;!-- 声明需要暴露的服务接口 服务实现类是通过注解注册的，所以此处不需要声明实现类 --&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">dubbo:service</span> <span class="attr">interface</span>=<span class="string">"web.function.demo.service.DemoService"</span> <span class="attr">ref</span>=<span class="string">"demoService"</span>/&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">dubbo:service</span> <span class="attr">interface</span>=<span class="string">"web.function.demo.service.Demo2Service"</span> <span class="attr">ref</span>=<span class="string">"demo2Service"</span>/&gt;</span></div><div class="line"></div><div class="line">    <span class="comment">&lt;!-- 启用monitor服务，只有配置这个，才会主动向monitor推送信息 --&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">dubbo:monitor</span> <span class="attr">protocol</span>=<span class="string">"registry"</span> /&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></div></pre></td></tr></table></figure>
<blockquote>
<ul>
<li>不同的Provider之间可以使用相同的应用名称（比如这里是name=”demo-provider”），因为注册的服务只基于服务所在服务器的ip地址和dubbo协议开放的端口号，两者有一个不相同即可，但是不建议这样做。</li>
<li>对于提供相同服务的Provider，也就是副本（同一个war包，部署到不同主机），则可以不去修改name，但是对于提供不同服务的Provider，不要使用相同的name，这样不便于在monitor中查看。</li>
<li>对于同一个Provider，要在同一台主机中部署（同一个war包，部署到同一台主机），则需要修改duboo协议端口，比如示例代码中的dubbo-provider和dubbo-provider02，因为两者提供相同的服务，所以应用名称相同，但是因为都在本机部署，所以一个用20880，一个使用20881</li>
</ul>
</blockquote>
<h2 id="Consumer-服务消费者"><a href="#Consumer-服务消费者" class="headerlink" title="Consumer 服务消费者"></a>Consumer 服务消费者</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</div><div class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></div><div class="line">       <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></div><div class="line">       <span class="attr">xmlns:dubbo</span>=<span class="string">"http://code.alibabatech.com/schema/dubbo"</span></div><div class="line">       <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-4.3.xsd</span></div><div class="line">    http://code.alibabatech.com/schema/dubbo http://code.alibabatech.com/schema/dubbo/dubbo.xsd"&gt;</div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">dubbo:application</span> <span class="attr">name</span>=<span class="string">"demo-consumer"</span> <span class="attr">owner</span>=<span class="string">"hanqf"</span> <span class="attr">organization</span>=<span class="string">"dubbox"</span>/&gt;</span></div><div class="line"></div><div class="line">    <span class="comment">&lt;!-- 设置check的缺省值，如果配置中有显式的声明，如：&lt;dubbo:reference check="true"/&gt;，不会受影响 --&gt;</span></div><div class="line">    <span class="comment">&lt;!-- 关闭所有服务的启动时检查,注意：如果关闭某个服务的启动时检查，需要在指定的服务单独配置check="false" --&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">dubbo:consumer</span> <span class="attr">check</span>=<span class="string">"false"</span> /&gt;</span></div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">dubbo:registry</span> <span class="attr">protocol</span>=<span class="string">"zookeeper"</span></span></div><div class="line">                    <span class="attr">address</span>=<span class="string">"192.168.37.144:2181,192.168.37.143:2181"</span> <span class="attr">timeout</span>=<span class="string">"50000"</span>/&gt;</div><div class="line"></div><div class="line">    <span class="comment">&lt;!-- 用dubbo协议在20880端口暴露服务 --&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">dubbo:protocol</span> <span class="attr">name</span>=<span class="string">"dubbo"</span> <span class="attr">port</span>=<span class="string">"20880"</span>/&gt;</span></div><div class="line"></div><div class="line">    <span class="comment">&lt;!-- 声明需要暴露的服务接口 --&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">dubbo:reference</span> <span class="attr">interface</span>=<span class="string">"web.function.demo.service.DemoService"</span> <span class="attr">id</span>=<span class="string">"demoService"</span> <span class="attr">timeout</span>=<span class="string">"50000"</span>/&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">dubbo:reference</span> <span class="attr">interface</span>=<span class="string">"web.function.demo.service.Demo2Service"</span> <span class="attr">id</span>=<span class="string">"demo2Service"</span> <span class="attr">timeout</span>=<span class="string">"50000"</span>/&gt;</span></div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">dubbo:monitor</span> <span class="attr">protocol</span>=<span class="string">"registry"</span> /&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></div></pre></td></tr></table></figure>
<blockquote>
<ul>
<li>Consumer和Provider如果部署在同一台主机，可以使用相同的dubbo协议端口，两者不受影响</li>
</ul>
</blockquote>
<hr>
<p>关于相关配置属性的说明，还是参考官方资料吧，在dubbo源码中已经包含了Consumer和Provider的示例，可以作为参考。</p>
<hr>
<h2 id="Monitor"><a href="#Monitor" class="headerlink" title="Monitor"></a>Monitor</h2><h3 id="dubbo-monitor-simple-简易监控中心"><a href="#dubbo-monitor-simple-简易监控中心" class="headerlink" title="dubbo-monitor-simple 简易监控中心"></a>dubbo-monitor-simple 简易监控中心</h3><ul>
<li>dubbo项目源码中已经自带了一个Monitor，就是dubbo-monitor-simple，使用maven编译后，会在dubbox/dubbo-simple/dubbo-monitor-simple/target下生成dubbo-monitor-simple-2.8.4-assembly.tar.gz</li>
<li><p>将dubbo-monitor-simple-2.8.4-assembly.tar.gz拷贝的合适的地方并解压</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">$ tar -zxvf dubbo-monitor-simple-2.8.4-assembly.tar.gz</div><div class="line">$ <span class="built_in">cd</span> dubbo-monitor-simple-2.8.4</div><div class="line">$ vi conf/dubbo.properties</div></pre></td></tr></table></figure>
</li>
<li><p>主要修改zookeeper地址、端口、绘图目录（该目录必须手工创建，比如这里是/Users/hanqunfeng/monitor）：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">dubbo.container=<span class="built_in">log</span>4j,spring,registry,jetty</div><div class="line">dubbo.application.name=simple-monitor</div><div class="line">dubbo.application.owner=</div><div class="line"><span class="comment">#dubbo.registry.address=multicast://224.5.6.7:1234</span></div><div class="line">dubbo.registry.address=zookeeper://192.168.37.144:2181?backup=192.168.37.143:2181</div><div class="line"><span class="comment">#dubbo.registry.address=redis://127.0.0.1:6379</span></div><div class="line"><span class="comment">#dubbo.registry.address=dubbo://127.0.0.1:9090</span></div><div class="line">dubbo.protocol.port=7070</div><div class="line">dubbo.jetty.port=8085</div><div class="line">dubbo.jetty.directory=/Users/hanqunfeng/monitor</div><div class="line">dubbo.charts.directory=<span class="variable">$&#123;dubbo.jetty.directory&#125;</span>/charts</div><div class="line">dubbo.statistics.directory=/Users/hanqunfeng/monitor/statistics</div><div class="line">dubbo.log4j.file=logs/dubbo-monitor-simple.log</div><div class="line">dubbo.log4j.level=WARN</div></pre></td></tr></table></figure>
</li>
<li><p>启动与关闭</p>
<blockquote>
<p>./bin/start.sh<br>./bin/stop.sh</p>
</blockquote>
</li>
<li>浏览器访问<a href="http://localhost:8085，图表中的效果是注册了Provider，Consumer的效果" target="_blank" rel="external">http://localhost:8085，图表中的效果是注册了Provider，Consumer的效果</a><br><img src="/images_glob/dubbo_simple_monitor.png" alt=""></li>
</ul>
<h3 id="改版的monitor-基于2-8-4"><a href="#改版的monitor-基于2-8-4" class="headerlink" title="改版的monitor(基于2.8.4)"></a>改版的monitor(基于2.8.4)</h3><ul>
<li>特点：使用mysql作为数据存储，界面使用bootstrap进行优化</li>
<li><p>下载</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ git <span class="built_in">clone</span> http://git.oschina.net/handu/dubbo-monitor</div><div class="line">$ <span class="built_in">cd</span> dubbo-monitor</div></pre></td></tr></table></figure>
</li>
<li><p>配置<br>vi src/main/resources/application.properties，修改zookeeper地址，端口，数据库信息</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">dubbo.application.name=dubbo-monitor</div><div class="line">dubbo.application.owner=hanqunfeng</div><div class="line">dubbo.registry.address=zookeeper://192.168.37.144:2181?backup=192.168.37.143:2181</div><div class="line">dubbo.protocol.port=6060</div><div class="line"></div><div class="line"><span class="comment"># Database Settings</span></div><div class="line">db.url=jdbc:mysql://127.0.0.1:3306/monitor?prepStmtCacheSize=517&amp;cachePrepStmts=<span class="literal">true</span>&amp;autoReconnect=<span class="literal">true</span>&amp;characterEncoding=utf-8</div><div class="line">db.username=root</div><div class="line">db.password=password</div><div class="line">db.maxActive=500</div><div class="line"></div><div class="line"><span class="comment"># System Manager</span></div><div class="line">manager.username=admin</div><div class="line">manager.password=admin</div></pre></td></tr></table></figure>
</li>
<li><p>数据库初始化</p>
<blockquote>
<ul>
<li>创建monitor数据库</li>
<li>执行sql目录下的create.sql</li>
</ul>
</blockquote>
</li>
<li><p>打包<br>mvn clean package -Dmaven.test.skip=true</p>
<blockquote>
<p>基于本地nexus编译打包时，提示找不到jetbrick-template-2.0.10.jar，去maven中央仓库<a href="http://mvnrepository.com/artifact/com.github.subchen/jetbrick-template/2.0.10" target="_blank" rel="external">下载</a>再上传到nexus中吧。</p>
</blockquote>
</li>
<li><p>部署<br>将生成的dubbo-monitor.war包部署到tomcat中，启动tomcat（端口8084）<br>访问地址<a href="http://localhost:8084/dubbo-monitor" target="_blank" rel="external">http://localhost:8084/dubbo-monitor</a><br><img src="/images_glob/dubbo-monitor.png" alt=""></p>
</li>
</ul>
<hr>
<p>最后说一下dubbo-admin，这个是dubbo官方提供的dubbo管理控制台<br>官方说明：管理控制台为内部裁剪版本，开源部分主要包含：路由规则，动态配置，服务降级，访问控制，权重调整，负载均衡，等管理功能。</p>
<hr>
<h2 id="dubbo-admin-管理控制台"><a href="#dubbo-admin-管理控制台" class="headerlink" title="dubbo-admin 管理控制台"></a>dubbo-admin 管理控制台</h2><p>dubbo项目源码中有一个模块叫做dubbo-admin</p>
<blockquote>
<p>cd dubbox/dubbo-admin/src/main/webapp/WEB-INF<br>vi dubbo.properties<br>配置dubbo.registry.address=zookeeper://192.168.37.144:2181?backup=192.168.37.143:2181<br>编译打包，将生成的dubbo-admin-2.8.4.war部署到tomcat<br><img src="/images_glob/dubbo-admin.png" alt=""></p>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;摘要&quot;&gt;&lt;a href=&quot;#摘要&quot; class=&quot;headerlink&quot; title=&quot;摘要&quot;&gt;&lt;/a&gt;摘要&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://dubbo.io/Home-zh.htm&quot;&gt;官网地址&lt;/a&gt;，官网有完整的资料以帮助使用者快速熟悉dubbo，不过目前相关下载地址已经失效，代码已经迁移到github，请参看下面的代码地址，自行编译打包&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="技术" scheme="http://blog.hanqunfeng.com/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="dubbo" scheme="http://blog.hanqunfeng.com/tags/dubbo/"/>
    
  </entry>
  
  <entry>
    <title>Hexo--NexT主题</title>
    <link href="http://blog.hanqunfeng.com/2016/11/17/hexo-theme-next/"/>
    <id>http://blog.hanqunfeng.com/2016/11/17/hexo-theme-next/</id>
    <published>2016-11-17T13:33:15.000Z</published>
    <updated>2016-12-05T08:53:15.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="NexT主题简介"><a href="#NexT主题简介" class="headerlink" title="NexT主题简介"></a>NexT主题简介</h2><ul>
<li>NexT有着完善的使用文档，<a href="http://theme-next.iissnan.com/getting-started.html" target="_blank" rel="external">NexT官方资料</a>；</li>
<li>NexT整合了常用的插件，如评论、分享、统计；</li>
<li><p>下载安装</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">cd</span> ~/blog</div><div class="line">git <span class="built_in">clone</span> https://github.com/iissnan/hexo-theme-next themes/next</div></pre></td></tr></table></figure>
</li>
<li><p><a href="http://www.joryhe.com/2016-05-17-hexoxo-series-for-site-build-basic.html" target="_blank" rel="external">第三方参考资料</a></p>
</li>
</ul>
<a id="more"></a>
<h2 id="我的配置"><a href="#我的配置" class="headerlink" title="我的配置"></a>我的配置</h2><h3 id="多说评论和百度统计"><a href="#多说评论和百度统计" class="headerlink" title="多说评论和百度统计"></a>多说评论和百度统计</h3><ul>
<li><p>NexT主题的_config.yml，配置方式参考<a href="http://blog.hanqunfeng.com/2016/11/16/hexo_duoshuo_baidutongji">Hexo–添加多说评论插件和百度统计插件</a></p>
<figure class="highlight yml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 多说配置：</span></div><div class="line"><span class="comment"># Duoshuo ShortName</span></div><div class="line"><span class="attr">duoshuo_shortname:</span> 注册前缀</div><div class="line"><span class="comment"># 开启热评文章</span></div><div class="line"><span class="attr">duoshuo_hotartical:</span> <span class="literal">true</span></div><div class="line"></div><div class="line"><span class="comment"># 可以看到评论用户的UA信息</span></div><div class="line"><span class="comment"># Make duoshuo show UA</span></div><div class="line"><span class="comment"># user_id must NOT be null when admin_enable is true!</span></div><div class="line"><span class="comment"># you can visit http://dev.duoshuo.com get duoshuo user id.</span></div><div class="line"><span class="attr">duoshuo_info:</span></div><div class="line"><span class="attr">  ua_enable:</span> <span class="literal">true</span></div><div class="line"><span class="attr">  admin_enable:</span> <span class="literal">false</span></div><div class="line"><span class="attr">  user_id:</span> <span class="number">0</span></div><div class="line"></div><div class="line"><span class="comment"># 百度统计配置：</span></div><div class="line"><span class="comment"># Baidu Analytics ID</span></div><div class="line"><span class="comment"># 这里只需要填写js代码中hm.js链接的参数(如下：xxxxxxx)部分，而不再需要将整个js配置到模板中</span></div><div class="line"><span class="attr">baidu_analytics:</span> xxxxxxx</div></pre></td></tr></table></figure>
</li>
<li><p>百度统计代码</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> _hmt = _hmt || [];</div><div class="line">(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="keyword">var</span> hm = <span class="built_in">document</span>.createElement(<span class="string">"script"</span>);</div><div class="line">  hm.src = <span class="string">"https://hm.baidu.com/hm.js?xxxxxxx"</span>;</div><div class="line">  <span class="keyword">var</span> s = <span class="built_in">document</span>.getElementsByTagName(<span class="string">"script"</span>)[<span class="number">0</span>]; </div><div class="line">  s.parentNode.insertBefore(hm, s);</div><div class="line">&#125;)();</div></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="百度分享"><a href="#百度分享" class="headerlink" title="百度分享"></a>百度分享</h3><ul>
<li>NexT主题的_config.yml，其它主题配置方式<a href="http://share.baidu.com" target="_blank" rel="external">参考地址</a><figure class="highlight yml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># Baidu Share</span></div><div class="line"><span class="comment"># Available value:</span></div><div class="line"><span class="comment">#    button | slide</span></div><div class="line"><span class="comment"># Warning: Baidu Share does not support https.</span></div><div class="line"><span class="attr">baidushare:</span></div><div class="line"><span class="attr">  type:</span> button</div></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="阅读次数"><a href="#阅读次数" class="headerlink" title="阅读次数"></a>阅读次数</h3><ul>
<li>注册<a href="https://leancloud.cn" target="_blank" rel="external">LeanCloud</a>帐号，在LeanCloud中创建应用，具体配置方式查看<a href="https://notes.wanghao.work/2015-10-21-为NexT主题添加文章阅读量统计功能.html#配置LeanCloud" target="_blank" rel="external">参考资料</a>。</li>
<li><p>复制AppID以及AppKey并在NexT主题的_config.yml文件中我们相应的位置填入即可，正确配置之后文件内容像这个样子:</p>
<figure class="highlight yml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="attr">leancloud_visitors:</span></div><div class="line"><span class="attr">  enable:</span> <span class="literal">true</span></div><div class="line"><span class="attr">  app_id:</span> joaeuuc4hsqudUUwx4gIvGF6-gzGzoHsz</div><div class="line"><span class="attr">  app_key:</span> E9UJsJpw1omCHuS22PdSpKoh</div></pre></td></tr></table></figure>
</li>
<li><p>这里要注意，一定要在LeanCloud中的安全中心配置Web安全域名，否则不能正常统计</p>
</li>
</ul>
<h3 id="字数统计和阅读时常"><a href="#字数统计和阅读时常" class="headerlink" title="字数统计和阅读时常"></a>字数统计和阅读时常</h3><ul>
<li><a href="http://www.joryhe.com/2016-06-06-hexo_wordcount_setting_your_post.html" target="_blank" rel="external">参考资料</a></li>
<li>安装hexo-wordcount插件，在站点的根目录下执行以下命令：<br><code>npm install hexo-wordcount --save</code></li>
<li>修改模板位置：<code>themes\next\layout\_macro\post.swig</code>，插入代码如下：<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div></pre></td><td class="code"><pre><div class="line"># 查找如下代码段：</div><div class="line">         &#123;# LeanCould PageView #&#125;</div><div class="line">         &#123;% if theme.leancloud_visitors.enable %&#125;</div><div class="line">            <span class="tag">&lt;<span class="name">span</span> <span class="attr">id</span>=<span class="string">"&#123;&#123; url_for(post.path) &#125;&#125;"</span> <span class="attr">class</span>=<span class="string">"leancloud_visitors"</span> <span class="attr">data-flag-title</span>=<span class="string">"&#123;&#123; post.title &#125;&#125;"</span>&gt;</span></div><div class="line">         &amp;nbsp; | &amp;nbsp;</div><div class="line">              <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"post-meta-item-icon"</span>&gt;</span></div><div class="line">                <span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">"fa fa-eye"</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span></div><div class="line">              <span class="tag">&lt;/<span class="name">span</span>&gt;</span></div><div class="line">              <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"post-meta-item-text"</span>&gt;</span>&#123;&#123;__('post.visitors')&#125;&#125; <span class="tag">&lt;/<span class="name">span</span>&gt;</span></div><div class="line">              <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"leancloud-visitors-count"</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></div><div class="line">             <span class="tag">&lt;/<span class="name">span</span>&gt;</span></div><div class="line">         &#123;% endif %&#125;</div><div class="line"></div><div class="line"># 添加如下代码段：      </div><div class="line"># 以下部分为：字数统计、阅读时长插入代码</div><div class="line">         <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"post-time"</span>&gt;</span></div><div class="line">       &amp;nbsp; | &amp;nbsp;</div><div class="line">           <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"post-meta-item-icon"</span>&gt;</span></div><div class="line">             <span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">"fa fa-calendar-o"</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span></div><div class="line">           <span class="tag">&lt;/<span class="name">span</span>&gt;</span></div><div class="line">           <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"post-meta-item-text"</span>&gt;</span>字数统计:<span class="tag">&lt;/<span class="name">span</span>&gt;</span></div><div class="line">           <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"post-count"</span>&gt;</span>&#123;&#123; wordcount(post.content) &#125;&#125;(字)<span class="tag">&lt;/<span class="name">span</span>&gt;</span></div><div class="line">           </div><div class="line">         <span class="tag">&lt;/<span class="name">span</span>&gt;</span></div><div class="line">      </div><div class="line">      <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"post-time"</span>&gt;</span></div><div class="line">       &amp;nbsp; | &amp;nbsp;</div><div class="line">           <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"post-meta-item-icon"</span>&gt;</span></div><div class="line">             <span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">"fa fa-calendar-o"</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span></div><div class="line">           <span class="tag">&lt;/<span class="name">span</span>&gt;</span></div><div class="line">           <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"post-meta-item-text"</span>&gt;</span>阅读时长:<span class="tag">&lt;/<span class="name">span</span>&gt;</span></div><div class="line">           <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"post-count"</span>&gt;</span>&#123;&#123; min2read(post.content) &#125;&#125;(分)<span class="tag">&lt;/<span class="name">span</span>&gt;</span></div><div class="line">           </div><div class="line">         <span class="tag">&lt;/<span class="name">span</span>&gt;</span></div><div class="line"># 以上部分为：字数统计、阅读时长插入代码</div></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="Local-Search"><a href="#Local-Search" class="headerlink" title="Local Search"></a>Local Search</h3><ul>
<li>安装 hexo-generator-searchdb，在站点的根目录下执行以下命令：<br><code>$ npm install hexo-generator-searchdb --save</code></li>
<li><p>NexT主题的_config.yml</p>
<figure class="highlight yml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="attr">search:</span></div><div class="line"><span class="attr">  path:</span> search.xml</div><div class="line"><span class="attr">  field:</span> post</div><div class="line"><span class="attr">  format:</span> html</div><div class="line"><span class="attr">  limit:</span> <span class="number">10000</span></div></pre></td></tr></table></figure>
</li>
<li><p>重新编译之后会发现左侧导航栏最下方多出一个搜索菜单</p>
</li>
</ul>
<h3 id="标签页和分类页"><a href="#标签页和分类页" class="headerlink" title="标签页和分类页"></a>标签页和分类页</h3><ul>
<li>默认情况下，NexT没有开启标签页和分类页功能</li>
<li>新增标签页</li>
</ul>
<blockquote>
<p>使用命令<code>hexp new page “tags”</code> 并将页面类型设置为tags<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">---</div><div class="line">title: 标签</div><div class="line">date: 2016-11-17 23:03:47</div><div class="line">type: &quot;tags&quot;</div><div class="line">---</div></pre></td></tr></table></figure></p>
</blockquote>
<p>通常情况下你的标签页并不需要评论框，取消评论代码<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">---</div><div class="line">title: 标签</div><div class="line">date: 2016-11-17 23:03:47</div><div class="line">type: &quot;tags&quot;</div><div class="line">comments: false</div><div class="line">---</div></pre></td></tr></table></figure></p>
<blockquote>
<p>在主题配置文件下的菜单设置项memu下设置，设置完成在主页导航可以看到标签导航栏<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">menu:</div><div class="line">  tags: /tags</div></pre></td></tr></table></figure></p>
</blockquote>
<ul>
<li>新增分类页</li>
</ul>
<blockquote>
<p>使用命令<code>hexp new page categories</code> 并将页面类型设置为categories<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">---</div><div class="line">title: 分类</div><div class="line">date: 2016-11-17 23:08:35</div><div class="line">type: &quot;categories&quot;</div><div class="line">---</div></pre></td></tr></table></figure></p>
<p>通常情况下你的标签页并不需要评论框，取消评论代码<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">---</div><div class="line">title: 分类</div><div class="line">date: 2016-11-17 23:08:35</div><div class="line">type: &quot;categories&quot;</div><div class="line">comments: false</div><div class="line">---</div></pre></td></tr></table></figure></p>
<p>在主题配置文件下的菜单设置项memu下设置，设置完成在主页导航可以看到分类导航栏<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">menu:</div><div class="line">  categories: /categories</div></pre></td></tr></table></figure></p>
</blockquote>
<h3 id="设定首页-归档-标签页面文章的篇数"><a href="#设定首页-归档-标签页面文章的篇数" class="headerlink" title="设定首页/归档/标签页面文章的篇数"></a>设定首页/归档/标签页面文章的篇数</h3><ul>
<li><p>安装如下插件，在站点的根目录下执行以下命令：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">$ npm install hexo-generator-index --save</div><div class="line">$ npm install hexo-generator-archive --save</div><div class="line">$ npm install hexo-generator-tag --save</div></pre></td></tr></table></figure>
</li>
<li><p>NexT主题的_config.yml</p>
<figure class="highlight yml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="attr">index_generator:</span></div><div class="line"><span class="attr">  per_page:</span> <span class="number">5</span></div><div class="line"></div><div class="line"><span class="attr">archive_generator:</span></div><div class="line"><span class="attr">  per_page:</span> <span class="number">20</span></div><div class="line"><span class="attr">  yearly:</span> <span class="literal">true</span></div><div class="line"><span class="attr">  monthly:</span> <span class="literal">true</span></div><div class="line"></div><div class="line"><span class="attr">tag_generator:</span></div><div class="line"><span class="attr">  per_page:</span> <span class="number">10</span></div></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="RSS设置"><a href="#RSS设置" class="headerlink" title="RSS设置"></a>RSS设置</h3><ul>
<li>安装 hexo-generator-feed，在站点的根目录下执行以下命令：<br><code>$ npm install hexo-generator-feed --save</code></li>
<li><p>NexT主题的_config.yml</p>
<figure class="highlight yml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># Set rss to false to disable feed link.</span></div><div class="line"><span class="comment"># Leave rss as empty to use site's feed link.</span></div><div class="line"><span class="comment"># Set rss to specific value if you have burned your feed already.</span></div><div class="line"><span class="attr">rss:</span> /atom.xml</div></pre></td></tr></table></figure>
</li>
<li><p>编译后，会看到左侧头像下方会显示RSS入口</p>
</li>
</ul>
<h3 id="跳过指定文件的渲染"><a href="#跳过指定文件的渲染" class="headerlink" title="跳过指定文件的渲染"></a>跳过指定文件的渲染</h3><ul>
<li><p>如果某些资源希望放到source下，但是又不希望被编译，可以在hexo的_config.yml中增加如下配置：</p>
<figure class="highlight yml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="attr">skip_render:</span></div><div class="line"><span class="bullet">    -</span> zabbix/** <span class="comment">#跳过zabbix文件夹下的全部子目录和文件</span></div><div class="line"><span class="bullet">    -</span> abc.html  <span class="comment">#跳过某一个具体的文件</span></div><div class="line"><span class="bullet">    -</span> *.html    <span class="comment">#跳过以html结尾的文件</span></div></pre></td></tr></table></figure>
</li>
<li><p>比如我的导航菜单中的『资料』，其下面配置的资源就是我从为知笔记中导出的html。</p>
</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;NexT主题简介&quot;&gt;&lt;a href=&quot;#NexT主题简介&quot; class=&quot;headerlink&quot; title=&quot;NexT主题简介&quot;&gt;&lt;/a&gt;NexT主题简介&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;NexT有着完善的使用文档，&lt;a href=&quot;http://theme-next.iissnan.com/getting-started.html&quot;&gt;NexT官方资料&lt;/a&gt;；&lt;/li&gt;
&lt;li&gt;NexT整合了常用的插件，如评论、分享、统计；&lt;/li&gt;
&lt;li&gt;&lt;p&gt;下载安装&lt;/p&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;cd&lt;/span&gt; ~/blog&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;git &lt;span class=&quot;built_in&quot;&gt;clone&lt;/span&gt; https://github.com/iissnan/hexo-theme-next themes/next&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&quot;http://www.joryhe.com/2016-05-17-hexoxo-series-for-site-build-basic.html&quot;&gt;第三方参考资料&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="随笔" scheme="http://blog.hanqunfeng.com/categories/%E9%9A%8F%E7%AC%94/"/>
    
    
      <category term="hexo" scheme="http://blog.hanqunfeng.com/tags/hexo/"/>
    
  </entry>
  
  <entry>
    <title>Hexo--绑定域名到githubpage</title>
    <link href="http://blog.hanqunfeng.com/2016/11/17/hexo-domain-name/"/>
    <id>http://blog.hanqunfeng.com/2016/11/17/hexo-domain-name/</id>
    <published>2016-11-17T06:24:04.000Z</published>
    <updated>2016-11-17T15:19:33.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="申请域名"><a href="#申请域名" class="headerlink" title="申请域名"></a>申请域名</h2><ul>
<li>可以通过<a href="https://wanwang.aliyun.com" target="_blank" rel="external">万网</a>购买域名;</li>
<li>比如博主的域名为<code>hanqunfeng.com</code>;</li>
</ul>
<h2 id="添加解析规则"><a href="#添加解析规则" class="headerlink" title="添加解析规则"></a>添加解析规则</h2><ul>
<li>登录阿里云的控制台，进入【域名】，找到自己的域名，点击【解析】</li>
<li>点击【添加解析】<blockquote>
<ul>
<li>『记录类型』：CNAME</li>
<li>『主机记录』：blog #说明：设置为二级域名，也可以设置为www的一级域名</li>
<li>『记录值』：hanqunfeng.github.io.  #注意最后面有个点</li>
</ul>
</blockquote>
</li>
<li>上面的配置表示将blog.hanqunfeng.com的请求定向到hanqunfeng.github.io</li>
</ul>
<a id="more"></a>
<h2 id="blog目录下创建CNAME文件"><a href="#blog目录下创建CNAME文件" class="headerlink" title="blog目录下创建CNAME文件"></a>blog目录下创建CNAME文件</h2><ul>
<li>在自己的blog目录下的<code>/source</code>目录下新建一个文件，命名为CNAME，内容为：blog.hanqunfeng.com</li>
<li><code>hexo cl</code>，<code>hexo g</code>，<code>hexo d</code>，发布到github page</li>
</ul>
<h2 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h2><ul>
<li>购买域名需要进行实名认证；</li>
<li>官方说域名解析最长等待48小时就可以全球生效；</li>
<li>博主配置时，只是提交了实名认证申请，域名解析不到5分钟就可以访问了；</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;申请域名&quot;&gt;&lt;a href=&quot;#申请域名&quot; class=&quot;headerlink&quot; title=&quot;申请域名&quot;&gt;&lt;/a&gt;申请域名&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;可以通过&lt;a href=&quot;https://wanwang.aliyun.com&quot;&gt;万网&lt;/a&gt;购买域名;&lt;/li&gt;
&lt;li&gt;比如博主的域名为&lt;code&gt;hanqunfeng.com&lt;/code&gt;;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;添加解析规则&quot;&gt;&lt;a href=&quot;#添加解析规则&quot; class=&quot;headerlink&quot; title=&quot;添加解析规则&quot;&gt;&lt;/a&gt;添加解析规则&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;登录阿里云的控制台，进入【域名】，找到自己的域名，点击【解析】&lt;/li&gt;
&lt;li&gt;点击【添加解析】&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;『记录类型』：CNAME&lt;/li&gt;
&lt;li&gt;『主机记录』：blog #说明：设置为二级域名，也可以设置为www的一级域名&lt;/li&gt;
&lt;li&gt;『记录值』：hanqunfeng.github.io.  #注意最后面有个点&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;上面的配置表示将blog.hanqunfeng.com的请求定向到hanqunfeng.github.io&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="技术" scheme="http://blog.hanqunfeng.com/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="hexo" scheme="http://blog.hanqunfeng.com/tags/hexo/"/>
    
  </entry>
  
  <entry>
    <title>Hexo--添加多说评论插件和百度统计插件</title>
    <link href="http://blog.hanqunfeng.com/2016/11/16/hexo_duoshuo_baidutongji/"/>
    <id>http://blog.hanqunfeng.com/2016/11/16/hexo_duoshuo_baidutongji/</id>
    <published>2016-11-16T04:10:05.000Z</published>
    <updated>2016-11-17T15:21:44.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="添加多说评论插件"><a href="#添加多说评论插件" class="headerlink" title="添加多说评论插件"></a>添加多说评论插件</h2><ul>
<li>登录<a href="http://duoshuo.com" target="_blank" rel="external">多说官网</a>，多说不支持注册，仅支持绑定社交帐号登录，比如QQ，新浪微博，等等。</li>
<li>登录后会要求进行站点设置，这里需要设置域名、站点名称、首页网址等信息，域名的后缀已经默认为<code>.duoshuo.com</code>,所以我们只需要设置前缀，记住这个前缀。站点名称随便起个名字，首页网站填写<code>https://hanqunfeng.github.io</code>；</li>
</ul>
<a id="more"></a>
<ul>
<li>编辑yilia主题的_config.yml文件，设置如下：<blockquote>
<p> duoshuo: 域名前缀</p>
</blockquote>
</li>
<li>重新发布即可，效果见页面下方的评论区；</li>
<li>在多说管理后台中可以对评论进行管理。</li>
</ul>
<h2 id="添加百度统计插件"><a href="#添加百度统计插件" class="headerlink" title="添加百度统计插件"></a>添加百度统计插件</h2><ul>
<li>注册<a href="http://tongji.baidu.com/web/welcome/login" target="_blank" rel="external">百度统计</a>帐号;</li>
<li>新注册用户会要求创建一个网站，设置如下：<br><img src="/images_glob/baidu_tj_net.png" alt="baidu_tj"></li>
<li>登录后在<code>代码管理--》代码获取</code>中复制代码，将其粘贴到yilia主题下的<code>layout/_partial/after-footer.gjs</code>的最下面；</li>
<li>重新发布到github page；</li>
<li>在百度统计管理平台中的<code>代码管理--》代码安装检查</code>查看是否配置正确；</li>
<li>配置无误后，可以通过百度统计平台查看统计数据。</li>
</ul>
<h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ul>
<li><a href="http://m.blog.csdn.net/article/details?id=51049695" target="_blank" rel="external">http://m.blog.csdn.net/article/details?id=51049695</a></li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;添加多说评论插件&quot;&gt;&lt;a href=&quot;#添加多说评论插件&quot; class=&quot;headerlink&quot; title=&quot;添加多说评论插件&quot;&gt;&lt;/a&gt;添加多说评论插件&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;登录&lt;a href=&quot;http://duoshuo.com&quot;&gt;多说官网&lt;/a&gt;，多说不支持注册，仅支持绑定社交帐号登录，比如QQ，新浪微博，等等。&lt;/li&gt;
&lt;li&gt;登录后会要求进行站点设置，这里需要设置域名、站点名称、首页网址等信息，域名的后缀已经默认为&lt;code&gt;.duoshuo.com&lt;/code&gt;,所以我们只需要设置前缀，记住这个前缀。站点名称随便起个名字，首页网站填写&lt;code&gt;https://hanqunfeng.github.io&lt;/code&gt;；&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="技术" scheme="http://blog.hanqunfeng.com/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="hexo" scheme="http://blog.hanqunfeng.com/tags/hexo/"/>
    
  </entry>
  
  <entry>
    <title>Hexo+GitHub Page搭建自己的Blog</title>
    <link href="http://blog.hanqunfeng.com/2016/11/14/hexo_gitpage/"/>
    <id>http://blog.hanqunfeng.com/2016/11/14/hexo_gitpage/</id>
    <published>2016-11-14T09:43:05.000Z</published>
    <updated>2016-11-17T15:21:50.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="什么是Hexo"><a href="#什么是Hexo" class="headerlink" title="什么是Hexo"></a>什么是Hexo</h2><ul>
<li><p><a href="https://hexo.io" target="_blank" rel="external">Hexo</a> 是一个简单地、轻量地、基于Node的一个静态博客框架，可以方便的生成静态网页托管在github和Heroku上，引用Hexo作者 @tommy351 的话：</p>
</li>
<li><p>快速、简单且功能强大的 Node.js 博客框架。A fast, simple &amp; powerful blog framework, powered by Node.js.</p>
</li>
</ul>
<h2 id="GitHub-Pages是什么？"><a href="#GitHub-Pages是什么？" class="headerlink" title="GitHub Pages是什么？"></a>GitHub Pages是什么？</h2><ul>
<li><a href="https://pages.github.com" target="_blank" rel="external">GitHub Pages</a> 可以被认为是用户编写的、托管在github上的静态网页。由于它的空间免费稳定， 可以用于介绍托管在github上的Project或者搭建网站。</li>
</ul>
<a id="more"></a>
<p>以下环境为mac下安装。</p>
<h2 id="Hexo安装"><a href="#Hexo安装" class="headerlink" title="Hexo安装"></a>Hexo安装</h2><p>需要安装git和Node.js运行环境</p>
<h3 id="git安装"><a href="#git安装" class="headerlink" title="git安装"></a>git安装</h3><ul>
<li>mac自带git，如果需要重新安装，可去<a href="https://git-scm.com/downloads" target="_blank" rel="external">官网下载</a><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ git --version</div><div class="line">git version 2.9.3 (Apple Git-75)</div></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="安装npm"><a href="#安装npm" class="headerlink" title="安装npm"></a>安装npm</h3><ul>
<li>基于<a href="http://brew.sh" target="_blank" rel="external">brew</a>方式安装npm<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ brew install npm</div></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="安装Hexo"><a href="#安装Hexo" class="headerlink" title="安装Hexo"></a>安装Hexo</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ npm install hexo-cli -g</div></pre></td></tr></table></figure>
<p>npm安装Hexo：<a href="https://www.npmjs.com/package/hexo" target="_blank" rel="external">参考资料</a></p>
<h3 id="查看Hexo版本"><a href="#查看Hexo版本" class="headerlink" title="查看Hexo版本"></a>查看Hexo版本</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">$ hexo version</div><div class="line">hexo: 3.2.2</div><div class="line">hexo-cli: 1.0.2</div><div class="line">os: Darwin 16.1.0 darwin x64</div><div class="line">http_parser: 2.7.0</div><div class="line">node: 6.6.0</div><div class="line">v8: 5.1.281.83</div><div class="line">uv: 1.9.1</div><div class="line">zlib: 1.2.8</div><div class="line">ares: 1.10.1-DEV</div><div class="line">icu: 57.1</div><div class="line">modules: 48</div><div class="line">openssl: 1.0.2h</div></pre></td></tr></table></figure>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Setup-your-blog"><a href="#Setup-your-blog" class="headerlink" title="Setup your blog"></a>Setup your blog</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">$ <span class="built_in">cd</span> ~</div><div class="line">$ hexo init blog</div><div class="line">$ <span class="built_in">cd</span> blog</div></pre></td></tr></table></figure>
<ul>
<li>此命令会在当前用户的家目录下创建一个blog目录，并初始化相关文件，如下为初始化的目录结构：<br><img src="/images_glob/blog_dir.png" alt="blog目录结构" title="blog目录结构"></li>
</ul>
<h3 id="blog目录结构说明"><a href="#blog目录结构说明" class="headerlink" title="blog目录结构说明"></a>blog目录结构说明</h3><ul>
<li>scaffolds ：模板文件夹，新建文章时，Hexo 会根据 scaffold 来建立文件。Hexo 有三种默认布局： post 、 page 和 draft ，它们分别对应不同的路径。新建文件的默认布局是 post ，可以在配置文件中更改布局。用 draft 布局生成的文件会被保存到 source/_drafts 文件夹。</li>
<li>source ：资源文件夹是存放用户资源的地方。</li>
<li>source/_post ：文件箱。除 <em>posts 文件夹之外，开头命名为 </em> (下划线)的文件或者文件夹和隐藏的文件将会被忽略。Markdown文件会被解析并放到 public 文件夹。</li>
<li>themes ：主题 文件夹。Hexo 会根据主题来生成静态页面。我们可以将自己的主题放到该目录下，然后在_config.yml中修改默认的主题即可。</li>
<li>themes/landscape ：默认的皮肤文件夹</li>
<li>_config.yml ：全局的配置文件，每次更改要重启服务。</li>
</ul>
<h3 id="config-yml简介"><a href="#config-yml简介" class="headerlink" title="_config.yml简介"></a>_config.yml简介</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># Hexo Configuration</span></div><div class="line"><span class="comment">## Docs: https://hexo.io/docs/configuration.html</span></div><div class="line"><span class="comment">## Source: https://github.com/hexojs/hexo/</span></div><div class="line"></div><div class="line"><span class="comment"># Site 站点配置</span></div><div class="line">title: Study Zone <span class="comment">#网站标题</span></div><div class="line">subtitle: Spring--java程序员的春天 <span class="comment">#网站副标题</span></div><div class="line">description: 分享成长与快乐的地方 <span class="comment">#网站描述</span></div><div class="line">author: hanqunfeng <span class="comment">#作者，网站所有者</span></div><div class="line">language: zh-CN <span class="comment">#网站使用的语言</span></div><div class="line">timezone: Asia/Shanghai <span class="comment">#网站时区</span></div><div class="line"></div><div class="line"><span class="comment"># URL 可以不配置</span></div><div class="line"><span class="comment">## If your site is put in a subdirectory, set url as 'http://yoursite.com/child' and root as '/child/'</span></div><div class="line">url: http://hanqunfeng.github.io <span class="comment">#网址，搜索时会在搜索引擎中显示</span></div><div class="line">root: / <span class="comment">#网站根目录 </span></div><div class="line">permalink: :year/:month/:day/:title/ <span class="comment">#永久链接格式</span></div><div class="line">permalink_defaults: <span class="comment">#永久链接中各部分的默认值</span></div><div class="line"></div><div class="line"><span class="comment"># Directory 目录配置</span></div><div class="line">source_dir: <span class="built_in">source</span> <span class="comment">#资源文件夹，这个文件夹用来存放内容</span></div><div class="line">public_dir: public <span class="comment">#公共文件夹，这个文件夹用于存放生成的站点文件</span></div><div class="line">tag_dir: tags <span class="comment">#标签文件夹</span></div><div class="line">archive_dir: archives <span class="comment">#归档文件夹</span></div><div class="line">category_dir: categories <span class="comment">#分类文件夹</span></div><div class="line">code_dir: downloads/code <span class="comment">#Include code 文件夹</span></div><div class="line">i18n_dir: :lang <span class="comment">#国际化文件夹</span></div><div class="line">skip_render: <span class="comment">#跳过指定文件的渲染，您可使用 glob 来配置路径</span></div><div class="line"></div><div class="line"><span class="comment"># Writing 写作配置</span></div><div class="line">new_post_name: :title.md <span class="comment"># File name of new posts # 新文章的文件名称</span></div><div class="line">default_layout: post <span class="comment">#默认布局</span></div><div class="line">titlecase: <span class="literal">false</span> <span class="comment"># Transform title into titlecase</span></div><div class="line">external_link: <span class="literal">true</span> <span class="comment"># Open external links in new tab</span></div><div class="line">filename_case: 0 <span class="comment">#把文件名称转换为 (1) 小写或 (2) 大写</span></div><div class="line">render_drafts: <span class="literal">false</span> <span class="comment">#显示草稿</span></div><div class="line">post_asset_folder: <span class="literal">false</span> <span class="comment">#是否启动资源文件夹</span></div><div class="line">relative_link: <span class="literal">false</span> <span class="comment">#把链接改为与根目录的相对位址</span></div><div class="line">future: <span class="literal">true</span></div><div class="line">highlight: <span class="comment">#代码块的设置</span></div><div class="line">  <span class="built_in">enable</span>: <span class="literal">true</span></div><div class="line">  line_number: <span class="literal">true</span></div><div class="line">  auto_detect: <span class="literal">false</span></div><div class="line">  tab_replace:</div><div class="line"></div><div class="line"><span class="comment"># Category &amp; Tag 分类 &amp; 标签</span></div><div class="line">default_category: uncategorized <span class="comment">#默认分类</span></div><div class="line">category_map: <span class="comment">#分类别名</span></div><div class="line">tag_map: <span class="comment">#标签别名</span></div><div class="line"></div><div class="line"><span class="comment"># Date / Time format 时间和日期</span></div><div class="line"><span class="comment">## Hexo uses Moment.js to parse and display date</span></div><div class="line"><span class="comment">## You can customize the date format as defined in</span></div><div class="line"><span class="comment">## http://momentjs.com/docs/#/displaying/format/</span></div><div class="line">date_format: YYYY-MM-DD</div><div class="line">time_format: HH:mm:ss</div><div class="line"></div><div class="line"><span class="comment"># Pagination 分页</span></div><div class="line"><span class="comment">## Set per_page to 0 to disable pagination</span></div><div class="line">per_page: 10 <span class="comment">#每页显示的文章量 (0 = 关闭分页功能)</span></div><div class="line">pagination_dir: page <span class="comment">#分页目录</span></div><div class="line"></div><div class="line"><span class="comment"># Extensions 扩展</span></div><div class="line"><span class="comment">## Plugins: https://hexo.io/plugins/ 插件</span></div><div class="line"><span class="comment">## Themes: https://hexo.io/themes/ 主题</span></div><div class="line"><span class="comment"># theme: landscape #当前主题名称</span></div><div class="line">theme: yilia <span class="comment">#当前主题名称</span></div><div class="line"></div><div class="line"><span class="comment"># Deployment #部署到github</span></div><div class="line"><span class="comment">## Docs: https://hexo.io/docs/deployment.html</span></div><div class="line">deploy:</div><div class="line">  <span class="built_in">type</span>: git</div><div class="line">  repo: https://github.com/hanqunfeng/hanqunfeng.github.io.git</div><div class="line">  branch: master</div></pre></td></tr></table></figure>
<p>注意：以下所有命令，都必须在blog目录下执行。</p>
<h3 id="Start-the-server"><a href="#Start-the-server" class="headerlink" title="Start the server"></a>Start the server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">$ hexo server</div><div class="line">INFO  Start processing</div><div class="line">INFO  Hexo is running at http://localhost:4000/. Press Ctrl+C to stop.</div></pre></td></tr></table></figure>
<ul>
<li>我们可以通过浏览器访问<a href="http://localhost:4000/" target="_blank" rel="external">http://localhost:4000/</a>，就可以看到blog的页面了。</li>
<li>创建文件、生成静态文件以及发布到github，都不需要启动服务，启动服务的目的仅是为了能在本地看到效果。</li>
<li><code>hexo server</code> == <code>hexo s</code></li>
</ul>
<h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ hexo new <span class="string">"Hello Hexo"</span></div><div class="line">INFO  Created: ~/blog/<span class="built_in">source</span>/_posts/Hello-Hexo.md</div></pre></td></tr></table></figure>
<ul>
<li>创建好的文件基于<a href="http://www.appinn.com/markdown/" target="_blank" rel="external">makedown</a>语法，可以使用sublime或者atom编辑器，进行编辑与管理。</li>
<li>编辑完成后不需要执行<code>hexo generate</code>命令即可在浏览器中查看效果，但是修改了主题内容，有时会不生效，需要先生成静态文件才能看到最终效果。</li>
<li><code>hexo new</code> == <code>hexo n</code></li>
</ul>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo generate</div></pre></td></tr></table></figure>
<ul>
<li>该命令用于将makedown文件转换为静态html文件，并放到public文件夹下。</li>
<li>可以使用<code>hexo clean</code>命令来删除public文件夹，之后再使用<code>hexo generate</code>来重新生成静态文件。</li>
<li><code>hexo generate</code> == <code>hexo g</code></li>
</ul>
<h3 id="Clean-static-files"><a href="#Clean-static-files" class="headerlink" title="Clean static files"></a>Clean static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">$ hexo clean</div><div class="line">INFO  Deleted database.</div><div class="line">INFO  Deleted public folder.</div></pre></td></tr></table></figure>
<ul>
<li><code>hexo clean</code> == <code>hexo cl</code></li>
</ul>
<h2 id="主题"><a href="#主题" class="headerlink" title="主题"></a>主题</h2><h3 id="更换主题"><a href="#更换主题" class="headerlink" title="更换主题"></a>更换主题</h3><ul>
<li>github上有许多技术达人为Hexo制作的主题，可以clone到本地，并拷贝到themes文件夹下，然后修改_config.yml中的theme属性，修改主题需要重启Hexo才能生效。</li>
<li><p>比如博主使用主题为<a href="https://github.com/litten/hexo-theme-yilia" target="_blank" rel="external">yilia下载地址</a>:</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ <span class="built_in">cd</span> ~/blog</div><div class="line">$ git <span class="built_in">clone</span> https://github.com/litten/hexo-theme-yilia.git themes/yilia</div></pre></td></tr></table></figure>
</li>
<li><p>更新主题时，在themes/yilia目录下执行<code>git pull</code>。</p>
</li>
</ul>
<h3 id="添加资源"><a href="#添加资源" class="headerlink" title="添加资源"></a>添加资源</h3><ul>
<li>可以在当前主题的source目录下放入自己的资源，执行<code>hexo generate</code>命令时，会将主题中的source目录下的内容拷贝到public目录下。</li>
<li>但是这样做如果更换主题，则资源就失效了，所以一般是在source目录下创建资源文件，执行<code>hexo generate</code>命令时，会将source目录下的内容拷贝到public目录下。</li>
</ul>
<h2 id="发布到Github"><a href="#发布到Github" class="headerlink" title="发布到Github"></a>发布到Github</h2><h3 id="安装hexo的git发布包"><a href="#安装hexo的git发布包" class="headerlink" title="安装hexo的git发布包"></a>安装hexo的git发布包</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ npm install hexo-deployer-git -S</div></pre></td></tr></table></figure>
<h3 id="创建SSH密钥"><a href="#创建SSH密钥" class="headerlink" title="创建SSH密钥"></a>创建SSH密钥</h3><ul>
<li>创建密钥可以在执行发布时不需要每次都输入用户名和密码，具体创建方法查看如下资料:<blockquote>
<ul>
<li><a href="https://help.github.com/articles/generating-an-ssh-key/" target="_blank" rel="external">github官网</a></li>
<li><a href="http://www.xuanfengge.com/using-ssh-key-link-github-photo-tour.html" target="_blank" rel="external">图文教程</a></li>
</ul>
</blockquote>
</li>
</ul>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><ul>
<li>因为使用<a href="https://pages.github.com" target="_blank" rel="external">GitPage</a>，所以需要申请一个Github帐号，并创建一个仓库，仓库名称为”your_name.github.io”。</li>
<li>创建好仓库后，在_config.yml中按上文中的内容配置好deploy属性。</li>
<li>执行如下命令，会将public下的文件发布到该仓库中，一般执行deploy前先执行clean和generate保证文件最新。</li>
<li>访问<a href="https://hanqunfeng.github.io" target="_blank" rel="external">https://hanqunfeng.github.io</a>，查看blog页面。</li>
</ul>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">$ hexo clean</div><div class="line">$ hexo generate</div><div class="line">$ hexo deploy</div></pre></td></tr></table></figure>
<ul>
<li><code>hexo deploy</code> == <code>hexo d</code></li>
</ul>
<h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ul>
<li><a href="http://www.tuicool.com/articles/ueI7naV" target="_blank" rel="external">http://www.tuicool.com/articles/ueI7naV</a></li>
<li><a href="http://www.jianshu.com/p/465830080ea9" target="_blank" rel="external">http://www.jianshu.com/p/465830080ea9</a></li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;什么是Hexo&quot;&gt;&lt;a href=&quot;#什么是Hexo&quot; class=&quot;headerlink&quot; title=&quot;什么是Hexo&quot;&gt;&lt;/a&gt;什么是Hexo&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&quot;https://hexo.io&quot;&gt;Hexo&lt;/a&gt; 是一个简单地、轻量地、基于Node的一个静态博客框架，可以方便的生成静态网页托管在github和Heroku上，引用Hexo作者 @tommy351 的话：&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;快速、简单且功能强大的 Node.js 博客框架。A fast, simple &amp;amp; powerful blog framework, powered by Node.js.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;GitHub-Pages是什么？&quot;&gt;&lt;a href=&quot;#GitHub-Pages是什么？&quot; class=&quot;headerlink&quot; title=&quot;GitHub Pages是什么？&quot;&gt;&lt;/a&gt;GitHub Pages是什么？&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://pages.github.com&quot;&gt;GitHub Pages&lt;/a&gt; 可以被认为是用户编写的、托管在github上的静态网页。由于它的空间免费稳定， 可以用于介绍托管在github上的Project或者搭建网站。&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="技术" scheme="http://blog.hanqunfeng.com/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="hexo" scheme="http://blog.hanqunfeng.com/tags/hexo/"/>
    
  </entry>
  
</feed>
