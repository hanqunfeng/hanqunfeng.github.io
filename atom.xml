<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>飘逸峰的博客</title>
  
  <subtitle>Spring--Java程序员的春天</subtitle>
  <link href="https://blog.hanqunfeng.com/atom.xml" rel="self"/>
  
  <link href="https://blog.hanqunfeng.com/"/>
  <updated>2023-03-24T02:36:53.215Z</updated>
  <id>https://blog.hanqunfeng.com/</id>
  
  <author>
    <name>飘逸峰</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Linux常用命令--源代码安装nginx</title>
    <link href="https://blog.hanqunfeng.com/2023/03/21/linux-command09-makeinstall-nginx/"/>
    <id>https://blog.hanqunfeng.com/2023/03/21/linux-command09-makeinstall-nginx/</id>
    <published>2023-03-21T13:30:05.000Z</published>
    <updated>2023-03-24T02:36:53.215Z</updated>
    
    <content type="html"><![CDATA[<!-- **加粗** *斜体* ***加粗并斜体*** ~~删除线~~ ==突出显示== `突出显示(推荐)` ++下划线++ ~下标~ ^上标^ 脚注，参考文献[^1]，然后在文档最下方要添加这个1对应的内容，如：[^1]: My reference. 图片设置宽度和高度 ![](https://upic-oss.oss-cn-beijing.aliyuncs.com/uPic/innodb_buffer_pool.png =900x600) +++ **点击折叠** 这是被隐藏的内容 +++::: tips success warning danger这里是容器内的内容:::% note info % success warning danger这里是容器内的内容% endnote %引用本地其它文章连接{} 大括号开始% post_link 文件名称(不包含.md) %大括号结束 --><h2 id="摘要">摘要</h2><ul class="lvl-0"><li class="lvl-2"><p>虽然绝大部分软件都可以通过<code>rpm</code>或者<code>yum</code>的方式进行安装，但是由于yum中的版本不一定是最新版，或者软件开发商没有将软件放到yum源中，所有也有一些软件需要通过源代码的方式进行安装。</p></li><li class="lvl-2"><p>本文以源代码安装nginx为例说明如何通过源代码安装软件。</p></li><li class="lvl-2"><p>本文基于<code>CentOS8(x86_64)</code></p></li></ul><span id="more"></span><h2 id="安装nginx">安装nginx</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 安装nginx最小依赖</span></span><br><span class="line">yum install gcc zlib zlib-devel pcre-devel openssl openssl-devel</span><br><span class="line"></span><br><span class="line"><span class="comment"># 如果通过yum安装nginx，只需要执行如下命令</span></span><br><span class="line">yum install nginx -y <span class="comment"># 本文不通过yum安装</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 下载nginx最新稳定版</span></span><br><span class="line">wget https://nginx.org/download/nginx-1.22.1.tar.gz</span><br><span class="line"></span><br><span class="line"><span class="comment"># 解压</span></span><br><span class="line">tar -zxvf nginx-1.22.1.tar.gz</span><br><span class="line"></span><br><span class="line"><span class="comment"># 进入解压后的目录</span></span><br><span class="line"><span class="built_in">cd</span> nginx-1.22.1</span><br><span class="line"></span><br><span class="line"><span class="comment"># 检查配置并指定安装参数</span></span><br><span class="line">./configure --with-http_stub_status_module --with-http_ssl_module</span><br><span class="line">    <span class="comment"># 参数说明</span></span><br><span class="line">    --with-http_ssl_module :安装ssl模块</span><br><span class="line">    --with-http_stub_status_module :查看nginx的客户端状态模块</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 输出内容，所有文件的默认路径</span></span><br><span class="line">    Configuration summary</span><br><span class="line">    + using system PCRE library</span><br><span class="line">    + using system OpenSSL library</span><br><span class="line">    + using system zlib library</span><br><span class="line"></span><br><span class="line">    nginx path prefix: <span class="string">&quot;/usr/local/nginx&quot;</span></span><br><span class="line">    nginx binary file: <span class="string">&quot;/usr/local/nginx/sbin/nginx&quot;</span></span><br><span class="line">    nginx modules path: <span class="string">&quot;/usr/local/nginx/modules&quot;</span></span><br><span class="line">    nginx configuration prefix: <span class="string">&quot;/usr/local/nginx/conf&quot;</span></span><br><span class="line">    nginx configuration file: <span class="string">&quot;/usr/local/nginx/conf/nginx.conf&quot;</span></span><br><span class="line">    nginx pid file: <span class="string">&quot;/usr/local/nginx/logs/nginx.pid&quot;</span></span><br><span class="line">    nginx error <span class="built_in">log</span> file: <span class="string">&quot;/usr/local/nginx/logs/error.log&quot;</span></span><br><span class="line">    nginx http access <span class="built_in">log</span> file: <span class="string">&quot;/usr/local/nginx/logs/access.log&quot;</span></span><br><span class="line">    nginx http client request body temporary files: <span class="string">&quot;client_body_temp&quot;</span></span><br><span class="line">    nginx http proxy temporary files: <span class="string">&quot;proxy_temp&quot;</span></span><br><span class="line">    nginx http fastcgi temporary files: <span class="string">&quot;fastcgi_temp&quot;</span></span><br><span class="line">    nginx http uwsgi temporary files: <span class="string">&quot;uwsgi_temp&quot;</span></span><br><span class="line">    nginx http scgi temporary files: <span class="string">&quot;scgi_temp&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 也可以自定义安装路径</span></span><br><span class="line">./configure --prefix=/usr/local/nginx-1.22.1 --with-http_stub_status_module --with-http_ssl_module</span><br><span class="line">    <span class="comment"># 参数说明</span></span><br><span class="line">    --prefix=/usr/local/nginx-1.22.1 :安装路径</span><br><span class="line"></span><br><span class="line">    <span class="comment">#输出内容，此时看到所有文件都会被安装到指定的路径</span></span><br><span class="line">    Configuration summary</span><br><span class="line">    + using system PCRE library</span><br><span class="line">    + using system OpenSSL library</span><br><span class="line">    + using system zlib library</span><br><span class="line"></span><br><span class="line">    nginx path prefix: <span class="string">&quot;/usr/local/nginx-1.22.1&quot;</span></span><br><span class="line">    nginx binary file: <span class="string">&quot;/usr/local/nginx-1.22.1/sbin/nginx&quot;</span></span><br><span class="line">    nginx modules path: <span class="string">&quot;/usr/local/nginx-1.22.1/modules&quot;</span></span><br><span class="line">    nginx configuration prefix: <span class="string">&quot;/usr/local/nginx-1.22.1/conf&quot;</span></span><br><span class="line">    nginx configuration file: <span class="string">&quot;/usr/local/nginx-1.22.1/conf/nginx.conf&quot;</span></span><br><span class="line">    nginx pid file: <span class="string">&quot;/usr/local/nginx-1.22.1/logs/nginx.pid&quot;</span></span><br><span class="line">    nginx error <span class="built_in">log</span> file: <span class="string">&quot;/usr/local/nginx-1.22.1/logs/error.log&quot;</span></span><br><span class="line">    nginx http access <span class="built_in">log</span> file: <span class="string">&quot;/usr/local/nginx-1.22.1/logs/access.log&quot;</span></span><br><span class="line">    nginx http client request body temporary files: <span class="string">&quot;client_body_temp&quot;</span></span><br><span class="line">    nginx http proxy temporary files: <span class="string">&quot;proxy_temp&quot;</span></span><br><span class="line">    nginx http fastcgi temporary files: <span class="string">&quot;fastcgi_temp&quot;</span></span><br><span class="line">    nginx http uwsgi temporary files: <span class="string">&quot;uwsgi_temp&quot;</span></span><br><span class="line">    nginx http scgi temporary files: <span class="string">&quot;scgi_temp&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 编译</span></span><br><span class="line">make</span><br><span class="line"><span class="comment"># 将相关文件拷贝到 --prefix 指定的安装目录中</span></span><br><span class="line">make install</span><br></pre></td></tr></table></figure><h2 id="配置和管理nginx">配置和管理nginx</h2><ul class="lvl-0"><li class="lvl-2"><p>上面就完成了nginx安装，之后我们可以根据需要对配置文件进行修改，并启动nginx</p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 假设我们将nginx安装到了自定义安装路径/usr/local/nginx-1.22.1下</span></span><br><span class="line"><span class="built_in">cd</span> /usr/local/nginx-1.22.1</span><br><span class="line"><span class="built_in">ls</span> -1</span><br><span class="line">conf :nginx配置文件目录</span><br><span class="line">html :默认web根目录</span><br><span class="line">logs :默认日志输出目录</span><br><span class="line">sbin :启动命令nginx所在目录，make后真正有用的就这个nginx命令，重新编译就是为了重新生成新的nginx命令</span><br><span class="line"></span><br><span class="line"><span class="comment"># 将nginx命令软连接到系统命令路径下，因为/usr/bin/已经被加入到PATH中了</span></span><br><span class="line"><span class="built_in">ln</span> -s /usr/local/nginx-1.22.1/sbin/nginx /usr/bin/</span><br><span class="line"><span class="comment"># 查看nginx版本，测试nginx命令是否全局可用</span></span><br><span class="line">nginx -v</span><br><span class="line">nginx version: nginx/1.22.1</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建nginx用户和组</span></span><br><span class="line">$ groupadd nginx</span><br><span class="line">$ useradd -g nginx nginx</span><br><span class="line"></span><br><span class="line"><span class="comment"># 修改配置文件</span></span><br><span class="line">vim /usr/local/nginx-1.22.1/conf/nginx.conf</span><br><span class="line">    <span class="comment"># 为了方便演示，这里仅仅修改如下两项内容</span></span><br><span class="line">    <span class="comment"># worker用户，这里配置为我们上面创建的nginx用户和nginx组</span></span><br><span class="line">    user  nginx nginx;</span><br><span class="line">    <span class="comment"># 启动2个worker进程</span></span><br><span class="line">    worker_processes  2;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 检查配置文件是否正确</span></span><br><span class="line">nginx -t</span><br><span class="line">nginx: the configuration file /usr/local/nginx-1.22.1/conf/nginx.conf syntax is ok</span><br><span class="line">nginx: configuration file /usr/local/nginx-1.22.1/conf/nginx.conf <span class="built_in">test</span> is successful</span><br><span class="line"></span><br><span class="line"><span class="comment"># 如果配置文件被修改了，可以通过该命令重新加载新的配置，而不需要重新启动nginx</span></span><br><span class="line">nginx -s reload</span><br><span class="line"></span><br><span class="line"><span class="comment"># 启动nginx</span></span><br><span class="line"><span class="comment"># 会使用默认的配置文件</span></span><br><span class="line">nginx</span><br><span class="line"><span class="comment"># 启动时指定配置文件</span></span><br><span class="line">nginx -c /usr/local/nginx-1.22.1/conf/nginx.conf</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看进程</span></span><br><span class="line">ps -ef | grep nginx</span><br><span class="line">root     18538     1  0 11:11 ?        00:00:00 nginx: master process nginx</span><br><span class="line">nginx    18592 18538  0 11:22 ?        00:00:00 nginx: worker process</span><br><span class="line">nginx    18593 18538  0 11:22 ?        00:00:00 nginx: worker process</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看端口</span></span><br><span class="line">netstat -tunpl | grep nginx</span><br><span class="line">tcp        0      0 0.0.0.0:80              0.0.0.0:*               LISTEN      18538/nginx: master</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 立即停止nginx</span></span><br><span class="line">nginx -s stop</span><br><span class="line"></span><br><span class="line"><span class="comment"># 从容停止nginx</span></span><br><span class="line"><span class="built_in">kill</span> -QUIT `<span class="built_in">cat</span> /usr/local/nginx-1.22.1/logs/nginx.pid`</span><br><span class="line"></span><br><span class="line"><span class="comment"># 立即重启nginx</span></span><br><span class="line">nginx -s stop</span><br><span class="line">nginx</span><br><span class="line"></span><br><span class="line"><span class="comment"># 平滑重启nginx</span></span><br><span class="line"><span class="built_in">kill</span> -HUP `<span class="built_in">cat</span> /usr/local/nginx-1.22.1/logs/nginx.pid` <span class="comment"># 只会重启worker进程</span></span><br></pre></td></tr></table></figure><h2 id="为nginx添加新的模块">为nginx添加新的模块</h2><ul class="lvl-0"><li class="lvl-2"><p>nginx安装成功后，发现有一些其他模块没有编译进去，或者想额外添加一些模块，这时候就要重新编译nginx。</p></li><li class="lvl-2"><p>重新编译之前，需要查看之前安装时的参数</p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$ nginx -V</span><br><span class="line">nginx version: nginx/1.22.1</span><br><span class="line">built by gcc 4.8.5 20150623 (Red Hat 4.8.5-44) (GCC)</span><br><span class="line">built with OpenSSL 1.0.2k-fips  26 Jan 2017</span><br><span class="line">TLS SNI support enabled</span><br><span class="line">configure arguments: --prefix=/usr/local/nginx-1.22.1 --with-http_stub_status_module --with-http_ssl_module</span><br></pre></td></tr></table></figure><ul class="lvl-0"><li class="lvl-2"><p><code>configure arguments</code>中就是之前编译安装时配置的参数</p></li><li class="lvl-2"><p>如添加新的模块<code>http_gzip_static_module</code>，预读gzip功能</p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 进入nginx源码目录</span></span><br><span class="line"><span class="built_in">cd</span> /usr/local/soft/nginx-1.22.1</span><br><span class="line"></span><br><span class="line"><span class="comment"># 检查配置并指定安装参数，使用上面得到的上一次安装的参数，还要将新的模块也加上</span></span><br><span class="line">./configure --prefix=/usr/local/nginx-1.22.1 --with-http_stub_status_module --with-http_ssl_module --with-http_gzip_static_module</span><br><span class="line"></span><br><span class="line"><span class="comment"># 编译，注意不要执行 make install，因为我们只需要得到nginx命令，运行make install会覆盖之前的所有目录</span></span><br><span class="line">make</span><br><span class="line"></span><br><span class="line"><span class="comment"># 先备份原先的nginx命令</span></span><br><span class="line"><span class="built_in">cp</span> /usr/local/nginx-1.22.1/sbin/nginx /usr/local/nginx-1.22.1/sbin/nginx.bak</span><br><span class="line"></span><br><span class="line"><span class="comment"># 将新生成的nginx命令复制到安装目录中</span></span><br><span class="line"><span class="built_in">cp</span> ./objs/nginx /usr/local/nginx-1.22.1/sbin/nginx</span><br><span class="line"><span class="comment"># 此时如果遇到提示 cp: 无法创建普通文件&quot;/usr/local/nginx-1.22.1/sbin/nginx&quot;: 文本文件忙 , 可以通过如下命令进行复制</span></span><br><span class="line"><span class="built_in">cp</span> -rfp ./objs/nginx /usr/local/nginx-1.22.1/sbin/nginx</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 重启nginx</span></span><br><span class="line">nginx -s stop</span><br><span class="line">nginx</span><br><span class="line"></span><br><span class="line"><span class="comment"># 平滑重启nginx(没好使)</span></span><br><span class="line">make upgrade</span><br><span class="line">    <span class="comment"># 会执行Makefile下的如下命令，也可以手工按如下命令进行平滑重启</span></span><br><span class="line">    upgrade:</span><br><span class="line">/usr/local/nginx-1.22.1/sbin/nginx -t</span><br><span class="line">    <span class="comment"># 原因是执行如下命令没有创建新的master进程</span></span><br><span class="line"><span class="built_in">kill</span> -USR2 `<span class="built_in">cat</span> /usr/local/nginx-1.22.1/logs/nginx.pid`</span><br><span class="line"><span class="built_in">sleep</span> 1</span><br><span class="line"><span class="built_in">test</span> -f /usr/local/nginx-1.22.1/logs/nginx.pid.oldbin</span><br><span class="line"></span><br><span class="line"><span class="built_in">kill</span> -QUIT `<span class="built_in">cat</span> /usr/local/nginx-1.22.1/logs/nginx.pid.oldbin`</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看是否是新的nginx</span></span><br><span class="line">nginx -V</span><br><span class="line">nginx version: nginx/1.22.1</span><br><span class="line">built by gcc 4.8.5 20150623 (Red Hat 4.8.5-44) (GCC)</span><br><span class="line">built with OpenSSL 1.0.2k-fips  26 Jan 2017</span><br><span class="line">TLS SNI support enabled</span><br><span class="line">configure arguments: --prefix=/usr/local/nginx-1.22.1 --with-http_stub_status_module --with-http_ssl_module --with-http_gzip_static_module</span><br></pre></td></tr></table></figure><ul class="lvl-0"><li class="lvl-2"><p>安装第三方模块，<code>configure</code>中需要添加<code>--add-module=module_dir</code>，具体查看第三方模块官网说明即可</p></li></ul><h2 id="nginx编译时可以添加哪些参数">nginx编译时可以添加哪些参数</h2><ul class="lvl-0"><li class="lvl-2"><p>以下是通过<code>yum</code>安装nginx时的编译参数</p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 指定nginx安装路径，至少web根目录在该路径下</span></span><br><span class="line">--prefix=/usr/share/nginx</span><br><span class="line"><span class="comment"># 指定nginx命令安装路径</span></span><br><span class="line">--sbin-path=/usr/sbin/nginx</span><br><span class="line"><span class="comment"># 指定模块安装路径</span></span><br><span class="line">--modules-path=/usr/lib64/nginx/modules</span><br><span class="line"><span class="comment"># 指定主配置文件</span></span><br><span class="line">--conf-path=/etc/nginx/nginx.conf</span><br><span class="line"><span class="comment"># 指定错误日志</span></span><br><span class="line">--error-log-path=/var/log/nginx/error.log</span><br><span class="line"><span class="comment"># 指定访问日志</span></span><br><span class="line">--http-log-path=/var/log/nginx/access.log</span><br><span class="line"><span class="comment"># 设定http客户端请求临时文件路径</span></span><br><span class="line">--http-client-body-temp-path=/var/lib/nginx/tmp/client_body</span><br><span class="line"><span class="comment"># 设定http代理临时文件路径</span></span><br><span class="line">--http-proxy-temp-path=/var/lib/nginx/tmp/proxy</span><br><span class="line"><span class="comment"># 设定http fastcgi临时文件路径，基本就是php缓存</span></span><br><span class="line">--http-fastcgi-temp-path=/var/lib/nginx/tmp/fastcgi</span><br><span class="line"><span class="comment"># 设定http uwsgi临时文件路径，python缓存路径</span></span><br><span class="line">--http-uwsgi-temp-path=/var/lib/nginx/tmp/uwsgi</span><br><span class="line"><span class="comment"># 设定http scgi临时文件路径</span></span><br><span class="line">--http-scgi-temp-path=/var/lib/nginx/tmp/scgi</span><br><span class="line"><span class="comment"># master进程ID</span></span><br><span class="line">--pid-path=/run/nginx.pid</span><br><span class="line"><span class="comment"># 锁路径，防止重复启动nginx</span></span><br><span class="line">--lock-path=/run/lock/subsys/nginx</span><br><span class="line"><span class="comment"># worker进程的用户和组</span></span><br><span class="line">--user=nginx --group=nginx</span><br><span class="line"><span class="comment"># 启用动态模块兼容性</span></span><br><span class="line">--with-compat</span><br><span class="line"><span class="comment"># 启用debug日志</span></span><br><span class="line">--with-debug</span><br><span class="line"><span class="comment"># 使用nginx的aio特性会大大提高性能，比如图片站的特点是大量的读io操作，nginx aio不用等待每次io的结果，有助于并发处理大量io和提高nginx处理效率。</span></span><br><span class="line"><span class="comment"># aio的优点就是能够同时提交多个io请求给内核，然后直接由内核的io调度算法去处理这些请求(directio)，这样的话，内核就有可能执行一些合并，节约了读取文件的处理时间。</span></span><br><span class="line"><span class="comment"># 异步非阻塞</span></span><br><span class="line">--with-file-aio</span><br><span class="line"><span class="comment"># 调试用，剖析程序性能瓶颈</span></span><br><span class="line">--with-google_perftools_module</span><br><span class="line"><span class="comment"># 作为一个输出过滤器，支持不完全缓冲，分部分响应请求。在nginx响应之前或者之后追加文本内容，比如想在站点底部追加一个js广告或者新增的css样式</span></span><br><span class="line">--with-http_addition_module</span><br><span class="line"><span class="comment"># 认证模块，实现基于一个子请求的结果的客户端授权。如果该子请求返回的2xx响应代码，所述接入是允许的。如果它返回401或403中，访问被拒绝与相应的错误代码。由子请求返回的任何其他响应代码被认为是一个错误。</span></span><br><span class="line">--with-http_auth_request_module</span><br><span class="line"><span class="comment"># WebDAV模块，增加 PUT,DELETE,MKCOL,COPY和MOVE方法。默认情况下为关闭</span></span><br><span class="line"><span class="comment"># 扩展了HTTP 1.1，在GET、POST、HEAD等几个HTTP标准方法以外添加了一些新的方法，使应用程序可直接对Web Server直接读写，并支持写文件锁定(Locking)及解锁(Unlock)，还可以支持文件的版本控制。</span></span><br><span class="line">--with-http_dav_module</span><br><span class="line"><span class="comment"># 允许在内存不足的情况下返回204或444码</span></span><br><span class="line">--with-http_degradation_module</span><br><span class="line"><span class="comment"># 提供寻求内存使用基于时间的偏移量文件</span></span><br><span class="line">--with-http_flv_module</span><br><span class="line"><span class="comment"># 它为不支持“gzip”编码方法的客户端解压具有“Content-Encoding: gzip”头的响应。</span></span><br><span class="line">--with-http_gunzip_module</span><br><span class="line"><span class="comment"># 在线实时压缩输出数据流</span></span><br><span class="line">--with-http_gzip_static_module</span><br><span class="line"><span class="comment"># 传输JPEG/GIF/PNG 图片的一个过滤器）（默认为不启用。gd库要用到）</span></span><br><span class="line">--with-http_image_filter_module=dynamic</span><br><span class="line"><span class="comment"># 多媒体模块</span></span><br><span class="line">--with-http_mp4_module</span><br><span class="line">--with-http_perl_module=dynamic</span><br><span class="line"><span class="comment"># nginx显示随机首页模块</span></span><br><span class="line">--with-http_random_index_module</span><br><span class="line"><span class="comment"># Nginx获取真实IP模块，这个模块允许从请求标头更改客户端的IP地址值，默认为关</span></span><br><span class="line">--with-http_realip_module</span><br><span class="line"><span class="comment"># nginx安全下载模块</span></span><br><span class="line">--with-http_secure_link_module</span><br><span class="line"><span class="comment"># nginx中文文档</span></span><br><span class="line">--with-http_slice_module</span><br><span class="line"><span class="comment"># 安装ssl模块</span></span><br><span class="line">--with-http_ssl_module</span><br><span class="line"><span class="comment"># 查看nginx客户端状态模块</span></span><br><span class="line">--with-http_stub_status_module</span><br><span class="line"><span class="comment"># 允许用一些其他文本替换nginx响应中的一些文本</span></span><br><span class="line">--with-http_sub_module</span><br><span class="line"><span class="comment"># 提供HTTP2支持，要使用http2，还需要同时启用ssl服务，nginx1.19.1之前的版本不支持http2</span></span><br><span class="line">--with-http_v2_module</span><br><span class="line"><span class="comment"># 过滤转换XML请求</span></span><br><span class="line">--with-http_xslt_module=dynamic</span><br><span class="line"><span class="comment"># 启用POP3/IMAP4/SMTP代理模块支持</span></span><br><span class="line">--with-mail=dynamic --with-mail_ssl_module</span><br><span class="line"><span class="comment"># 支持正则，使nginx支持http rewrite模块</span></span><br><span class="line">--with-pcre</span><br><span class="line"><span class="comment"># 编译PCRE包含“just-in-time compilation”</span></span><br><span class="line">--with-pcre-jit</span><br><span class="line"><span class="comment"># TCP\UDP负载均衡模块。nginx从1.9.0开始，新增加了一个stream模块，用来实现四层协议的转发、代理或者负载均衡等。</span></span><br><span class="line">--with-stream=dynamic --with-stream_ssl_module --with-stream_ssl_preread_module</span><br><span class="line"><span class="comment"># 支持多线程模块</span></span><br><span class="line">--with-threads</span><br><span class="line"><span class="comment"># 设置C编译器参数</span></span><br><span class="line">--with-cc-opt=<span class="string">&#x27;-O2 -g -pipe -Wall -Wp,-D_FORTIFY_SOURCE=2 -fexceptions -fstack-protector-strong --param=ssp-buffer-size=4 -grecord-gcc-switches -specs=/usr/lib/rpm/redhat/redhat-hardened-cc1 -m64 -mtune=generic&#x27;</span></span><br><span class="line"><span class="comment"># 设置连接文件参数</span></span><br><span class="line">--with-ld-opt=<span class="string">&#x27;-Wl,-z,relro -specs=/usr/lib/rpm/redhat/redhat-hardened-ld -Wl,-E&#x27;</span></span><br></pre></td></tr></table></figure><ul class="lvl-0"><li class="lvl-2"><p>其它参数</p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 启用ipv6支持</span></span><br><span class="line">--with-ipv6</span><br><span class="line"><span class="comment"># SPDY可以缩短网页的加载时间</span></span><br><span class="line">--with-http_spdy_module</span><br><span class="line"><span class="comment"># 该模块创建基于与MaxMind GeoIP二进制文件相配的客户端IP地址的ngx_http_geoip_module变量</span></span><br><span class="line">--with-http_geoip_module</span><br><span class="line"><span class="comment"># 计算和检查要求所需的安全链接网址</span></span><br><span class="line">--with-http_secure_link_module</span><br><span class="line"><span class="comment"># 禁用http cache功能</span></span><br><span class="line">--without-http-cache</span><br><span class="line"><span class="comment"># 启用外部模块支持</span></span><br><span class="line">--add-module=module_dir</span><br></pre></td></tr></table></figure><h2 id="nginx编译安装出现的常见错误">nginx编译安装出现的常见错误</h2><ul class="lvl-0"><li class="lvl-2"><p>参照<code>yum</code>安装nginx的配置进行手工编译</p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">./configure --prefix=/usr/local/nginx-1.22.1  --user=nginx --group=nginx --with-compat --with-debug \</span><br><span class="line">--with-file-aio --with-google_perftools_module --with-http_addition_module --with-http_auth_request_module \</span><br><span class="line">--with-http_dav_module --with-http_degradation_module --with-http_flv_module --with-http_gunzip_module \</span><br><span class="line">--with-http_gzip_static_module --with-http_image_filter_module=dynamic --with-http_mp4_module \</span><br><span class="line">--with-http_perl_module=dynamic --with-http_random_index_module --with-http_realip_module \</span><br><span class="line">--with-http_secure_link_module --with-http_slice_module --with-http_ssl_module --with-http_stub_status_module \</span><br><span class="line">--with-http_sub_module --with-http_v2_module --with-http_xslt_module=dynamic --with-mail=dynamic --with-mail_ssl_module \</span><br><span class="line">--with-pcre --with-pcre-jit --with-stream=dynamic --with-stream_ssl_module --with-stream_ssl_preread_module --with-threads</span><br></pre></td></tr></table></figure><ul class="lvl-0"><li class="lvl-2"><p>./configure: error: the HTTP rewrite module requires the PCRE library.You can either disable the module by using --without-http_rewrite_module option, or install the PCRE library into the system, or build the PCRE library statically from the source with nginx by using --with-pcre= option.</p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install pcre pcre-devel</span><br></pre></td></tr></table></figure><ul class="lvl-0"><li class="lvl-2"><p>./configure: error: SSL modules require the OpenSSL library.You can either do not enable the modules, or install the OpenSSL library into the system, or build the OpenSSL library statically from the source with nginx by using --with-openssl= option.</p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install openssl openssl-devel</span><br></pre></td></tr></table></figure><ul class="lvl-0"><li class="lvl-2"><p>./configure: error: the HTTP XSLT module requires the libxml2/libxslt libraries. You can either do not enable the module or install the libraries.</p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install libxml2 libxml2-devel libxslt libxslt-devel</span><br></pre></td></tr></table></figure><ul class="lvl-0"><li class="lvl-2"><p>./configure: error: the HTTP image filter module requires the GD library. You can either do not enable the module or install the libraries.</p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install gd gd-devel</span><br></pre></td></tr></table></figure><ul class="lvl-0"><li class="lvl-2"><p>./configure: error: perl module ExtUtils::Embed is required</p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install perl-ExtUtils-Embed</span><br></pre></td></tr></table></figure><ul class="lvl-0"><li class="lvl-2"><p>./configure: error: the Google perftools module requires the Google perftools library. You can either do not enable the module or install the library</p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install google-perftools google-perftools-devel</span><br></pre></td></tr></table></figure><h2 id="Nginx-配置文件">Nginx 配置文件</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 全局参数设置</span></span><br><span class="line"><span class="comment">#user  nobody;</span></span><br><span class="line">user nginx;            <span class="comment"># worker进程用户</span></span><br><span class="line">worker_processes  2;          <span class="comment"># 设置nginx启动进程的数量，一般设置成与逻辑cpu数量相同</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#error_log  logs/error.log;         # 指定错误日志</span></span><br><span class="line"><span class="comment">#error_log  logs/error.log  notice;</span></span><br><span class="line"><span class="comment">#error_log  logs/error.log  info;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># worker_rlimit_nofile 102400;  # 设置一个nginx进程能打开的最大文件数</span></span><br><span class="line"><span class="comment"># pid        /run/nginx.pid;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 加载模块配置文件</span></span><br><span class="line"><span class="comment"># include conf.d/modules/*.conf;</span></span><br><span class="line">load_module modules/ngx_stream_module.so; <span class="comment"># 加载stream模块</span></span><br><span class="line"></span><br><span class="line">events &#123;                      <span class="comment"># 事件配置</span></span><br><span class="line">    worker_connections  1024; <span class="comment"># 设置一个进程的最大并发连接数</span></span><br><span class="line">    <span class="comment"># use epoll;                # 事件驱动类型</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># tcp反向代理示例，与http配置同级</span></span><br><span class="line">stream &#123;</span><br><span class="line">    <span class="comment"># include conf.d/stream/*.conf</span></span><br><span class="line">    include conf.d/stream/redis.conf</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># http 服务相关设置</span></span><br><span class="line">http &#123;</span><br><span class="line">    include             mime.types;  <span class="comment"># 关联mime类型，关联资源的媒体类型(不同的媒体类型的打开方式)</span></span><br><span class="line">    default_type        application/octet-stream;  <span class="comment"># 根据文件的后缀来匹配相应的MIME类型，并写入Response header，导致浏览器播放文件而不是下载</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 访问日志格式</span></span><br><span class="line">    log_format  main  <span class="string">&#x27;remote_addr - remote_user [time_local] &quot;request&quot; &#x27;</span></span><br><span class="line">                      <span class="string">&#x27;status body_bytes_sent &quot;$http_referer&quot; &#x27;</span></span><br><span class="line">                      <span class="string">&#x27;&quot;http_user_agent&quot; &quot;http_x_forwarded_for&quot;&#x27;</span>;</span><br><span class="line">    access_log  logs/access.log  main;    <span class="comment">#设置访问日志的位置和格式</span></span><br><span class="line">    sendfile          on;      <span class="comment"># 用于开启文件高效传输模式，一般设置为on，若nginx是用来进行磁盘IO负载应用时，可以设置为off，降低系统负载</span></span><br><span class="line">    tcp_nopush        on;      <span class="comment"># 减少网络报文段数量，当有数据时，先别着急发送, 确保数据包已经装满数据, 避免了网络拥塞</span></span><br><span class="line">    tcp_nodelay       on;      <span class="comment"># 提高I/O性能，确保数据尽快发送, 提高可数据传输效率</span></span><br><span class="line">    <span class="comment"># gzip              on;      # 是否开启 gzip 压缩</span></span><br><span class="line">    keepalive_timeout  65;     <span class="comment"># 设置长连接的超时时间，请求完成之后还要保持连接多久，不是请求时间多久，目的是保持长连接，减少创建连接过程给系统带来的性能损耗，类似于线程池，数据库连接池</span></span><br><span class="line">    types_hash_max_size 4096;  <span class="comment"># 影响散列表的冲突率。types_hash_max_size 越大，就会消耗更多的内存，但散列key的冲突率会降低，检索速度就更快。types_hash_max_size越小，消耗的内存就越小，但散列key的冲突率可能上升</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 加载子配置文件</span></span><br><span class="line">    <span class="comment"># include /usr/local/nginx-1.22.1/conf/conf.d/*.conf;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># http反向代理示例</span></span><br><span class="line">    include conf.d/http/tomcat.conf</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 虚拟服务器的相关设置</span></span><br><span class="line">    server &#123;</span><br><span class="line">        listen      80;        <span class="comment"># 设置监听的端口</span></span><br><span class="line">        server_name  localhost;        <span class="comment"># 设置绑定的主机名、域名或ip地址</span></span><br><span class="line">        <span class="comment">#charset koi8-r;        # 设置编码字符</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">#access_log  logs/host.access.log  main;</span></span><br><span class="line"></span><br><span class="line">        location / &#123;</span><br><span class="line">            root  html;           <span class="comment"># 设置服务器默认网站的根目录位置</span></span><br><span class="line">            index  index.html index.htm;    <span class="comment"># 设置默认打开的文档</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment"># error_page 404 /404.html;</span></span><br><span class="line"></span><br><span class="line">        error_page  500 502 503 504  /50x.html; <span class="comment"># 设置错误信息返回页面</span></span><br><span class="line">        location = /50x.html &#123;</span><br><span class="line">            root html</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment"># proxy the PHP scripts to Apache listening on 127.0.0.1:80</span></span><br><span class="line">        <span class="comment">#</span></span><br><span class="line">        <span class="comment">#location ~ \.php$ &#123;</span></span><br><span class="line">        <span class="comment">#    proxy_pass   http://127.0.0.1;</span></span><br><span class="line">        <span class="comment">#&#125;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000</span></span><br><span class="line">        <span class="comment">#</span></span><br><span class="line">        <span class="comment">#location ~ \.php$ &#123;</span></span><br><span class="line">        <span class="comment">#    root           html;</span></span><br><span class="line">        <span class="comment">#    fastcgi_pass   127.0.0.1:9000;</span></span><br><span class="line">        <span class="comment">#    fastcgi_index  index.php;</span></span><br><span class="line">        <span class="comment">#    fastcgi_param  SCRIPT_FILENAME  /scripts$fastcgi_script_name;</span></span><br><span class="line">        <span class="comment">#    include        fastcgi_params;</span></span><br><span class="line">        <span class="comment">#&#125;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># deny access to .htaccess files, if Apache&#x27;s document root</span></span><br><span class="line">        <span class="comment"># concurs with nginx&#x27;s one</span></span><br><span class="line">        <span class="comment">#</span></span><br><span class="line">        <span class="comment">#location ~ /\.ht &#123;</span></span><br><span class="line">        <span class="comment">#    deny  all;</span></span><br><span class="line">        <span class="comment">#&#125;</span></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment"># HTTPS server</span></span><br><span class="line">    <span class="comment">#</span></span><br><span class="line">    <span class="comment">#server &#123;</span></span><br><span class="line">    <span class="comment">#    listen       443 ssl;</span></span><br><span class="line">    <span class="comment">#    server_name  localhost;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">#    ssl_certificate      cert.pem;</span></span><br><span class="line">    <span class="comment">#    ssl_certificate_key  cert.key;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">#    ssl_session_cache    shared:SSL:1m;</span></span><br><span class="line">    <span class="comment">#    ssl_session_timeout  5m;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">#    ssl_ciphers  HIGH:!aNULL:!MD5;</span></span><br><span class="line">    <span class="comment">#    ssl_prefer_server_ciphers  on;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">#    location / &#123;</span></span><br><span class="line">    <span class="comment">#        root   html;</span></span><br><span class="line">    <span class="comment">#        index  index.html index.htm;</span></span><br><span class="line">    <span class="comment">#    &#125;</span></span><br><span class="line">    <span class="comment">#&#125;</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul class="lvl-0"><li class="lvl-2"><p>tomcat.conf</p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">upstream tomcats &#123;</span><br><span class="line">    server 192.168.0.1:8080;</span><br><span class="line">    server 192.168.0.2:8080;</span><br><span class="line">&#125;</span><br><span class="line">server &#123;</span><br><span class="line">        listen       8088;</span><br><span class="line">        server_name  localhost tomcat.domain;</span><br><span class="line"></span><br><span class="line">        location / &#123;</span><br><span class="line">            proxy_pass http://tomcats; <span class="comment">#这个名称和要上面 upstream tomcats 对应</span></span><br><span class="line">            proxy_redirect     default;</span><br><span class="line">            proxy_http_version 1.1;</span><br><span class="line"></span><br><span class="line">            proxy_set_header   Host              <span class="variable">$host</span>;</span><br><span class="line">            proxy_set_header   X-Real-IP         <span class="variable">$remote_addr</span>;</span><br><span class="line">            proxy_set_header   X-Forwarded-For   <span class="variable">$proxy_add_x_forwarded_for</span>;</span><br><span class="line">            proxy_set_header   X-Forwarded-Proto <span class="variable">$scheme</span>;</span><br><span class="line">            proxy_max_temp_file_size 0;</span><br><span class="line"></span><br><span class="line">            <span class="comment">#this is the maximum upload size</span></span><br><span class="line">            client_max_body_size       10m;</span><br><span class="line">            client_body_buffer_size    128k;</span><br><span class="line"></span><br><span class="line">            proxy_connect_timeout      90;</span><br><span class="line">            proxy_send_timeout         90;</span><br><span class="line">            proxy_read_timeout         90;</span><br><span class="line">            proxy_buffering            off;</span><br><span class="line">            proxy_request_buffering    off; <span class="comment"># Required for HTTP CLI commands</span></span><br><span class="line">            proxy_set_header Connection <span class="string">&quot;&quot;</span>; <span class="comment"># Clear for keepalive</span></span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul class="lvl-0"><li class="lvl-2"><p>redis.conf</p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">upstream redis&#123;</span><br><span class="line">    server 192.168.0.1:6379;</span><br><span class="line">    server 192.168.0.2:6379;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">server &#123;</span><br><span class="line">    listen 8888; <span class="comment">#监听本机所有IP的8888端口</span></span><br><span class="line">    proxy_connect_timeout 10s; <span class="comment">#连接超时时间</span></span><br><span class="line">    proxy_timeout 10s; <span class="comment">#转发超时时间</span></span><br><span class="line">    proxy_pass redis; <span class="comment">#这个名称和要上面 upstream redis 对应</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul class="lvl-0"><li class="lvl-2"><p><code>upstream</code>配置说明</p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">upstream还可以为每个设备设置状态值，这些状态值的含义分别如下：</span><br><span class="line">- down：表示当前的server暂时不参与负载.</span><br><span class="line">- weight：默认为1，weight越大，负载的权重就越大。</span><br><span class="line">- max_fails：允许请求失败的次数默认为1.当超过最大次数时，返回proxy_next_upstream 模块定义的错误.</span><br><span class="line">- fail_timeout : max_fails次失败后，暂停的时间。</span><br><span class="line">- backup： 其它所有的非backup机器down或者忙的时候，请求backup机器。所以这台机器压力会最轻。</span><br><span class="line">- ip_hash（访问ip）:每个请求按访问ip的<span class="built_in">hash</span>结果分配，这样每个访客固定访问一个后端服务器，可以解决session的问题。</span><br><span class="line"></span><br><span class="line">示例：</span><br><span class="line">upstream tomcats&#123;</span><br><span class="line">    ip_hash;</span><br><span class="line">    server 127.0.0.1:9001 down;</span><br><span class="line">    server 127.0.0.1:9002 backup;</span><br><span class="line">    server 127.0.0.1:9003 weight=2;</span><br><span class="line">    server 127.0.0.1:9004 max_fails=2 fail_timeout=60s;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="配置为系统服务">配置为系统服务</h2><ul class="lvl-0"><li class="lvl-2"><p>yum安装自带系统服务</p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 进入service服务目录</span></span><br><span class="line"><span class="built_in">cd</span> /etc/init.d</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建并编辑nginx文件</span></span><br><span class="line">vim nginx</span><br><span class="line"><span class="comment"># 写入如下内容：</span></span><br><span class="line">    <span class="built_in">set</span> -e</span><br><span class="line">    PATH=/usr/local/sbin:/usr/local/bin:/sbin:/bin:/usr/sbin:/usr/bin</span><br><span class="line">    DESC=<span class="string">&quot;nginx daemon&quot;</span></span><br><span class="line">    NAME=nginx</span><br><span class="line">    DAEMON=/usr/local/nginx-1.22.1/sbin/<span class="variable">$NAME</span></span><br><span class="line">    SCRIPTNAME=/etc/init.d/<span class="variable">$NAME</span></span><br><span class="line">    <span class="built_in">test</span> -x <span class="variable">$DAEMON</span> || <span class="built_in">exit</span> 0</span><br><span class="line">    <span class="function"><span class="title">d_start</span></span>()&#123;</span><br><span class="line">        <span class="variable">$DAEMON</span> || <span class="built_in">echo</span> -n <span class="string">&quot; already running&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="title">d_stop</span></span>() &#123;</span><br><span class="line">        <span class="variable">$DAEMON</span> -s quit || <span class="built_in">echo</span> -n <span class="string">&quot; not running&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="title">d_reload</span></span>() &#123;</span><br><span class="line">        <span class="variable">$DAEMON</span> -s reload || <span class="built_in">echo</span> -n <span class="string">&quot; counld not reload&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="title">d_status</span></span>() &#123;</span><br><span class="line">        pid=`ps ax | grep -i <span class="string">&#x27;nginx: master&#x27;</span> | grep -v grep | awk <span class="string">&#x27;&#123;print $1&#125;&#x27;</span>`</span><br><span class="line">        <span class="keyword">if</span> [ -z <span class="string">&quot;<span class="variable">$pid</span>&quot;</span> ] ; <span class="keyword">then</span></span><br><span class="line">            <span class="built_in">echo</span> -n <span class="string">&quot;No nginx-server running.&quot;</span></span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            <span class="built_in">echo</span> -n <span class="string">&quot;The nginx-server(<span class="variable">$&#123;pid&#125;</span>) is running&quot;</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">fi</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">&quot;<span class="variable">$1</span>&quot;</span> <span class="keyword">in</span></span><br><span class="line">        start)</span><br><span class="line">            <span class="built_in">echo</span> -n <span class="string">&quot;Starting <span class="variable">$DESC</span>:<span class="variable">$NAME</span>&quot;</span></span><br><span class="line">            d_start</span><br><span class="line">            <span class="built_in">echo</span> <span class="string">&quot;.&quot;</span></span><br><span class="line">        ;;</span><br><span class="line">        stop)</span><br><span class="line">            <span class="built_in">echo</span> -n <span class="string">&quot;Stopping <span class="variable">$DESC</span>:<span class="variable">$NAME</span>&quot;</span></span><br><span class="line">            d_stop</span><br><span class="line">            <span class="built_in">echo</span> <span class="string">&quot;.&quot;</span></span><br><span class="line">        ;;</span><br><span class="line">        reload)</span><br><span class="line">            <span class="built_in">echo</span> -n <span class="string">&quot;Reloading <span class="variable">$DESC</span> configuration...&quot;</span></span><br><span class="line">            d_reload</span><br><span class="line">            <span class="built_in">echo</span> <span class="string">&quot;reloaded.&quot;</span></span><br><span class="line">        ;;</span><br><span class="line">        restart)</span><br><span class="line">            <span class="built_in">echo</span> -n <span class="string">&quot;Restarting <span class="variable">$DESC</span>: <span class="variable">$NAME</span>&quot;</span></span><br><span class="line">            d_stop</span><br><span class="line">            <span class="built_in">sleep</span> 2</span><br><span class="line">            d_start</span><br><span class="line">            <span class="built_in">echo</span> <span class="string">&quot;.&quot;</span></span><br><span class="line">        ;;</span><br><span class="line">        status)</span><br><span class="line">            <span class="built_in">echo</span> -n <span class="string">&quot;Check <span class="variable">$DESC</span> status...&quot;</span></span><br><span class="line">            d_status</span><br><span class="line">            <span class="built_in">echo</span> <span class="string">&quot;.&quot;</span></span><br><span class="line">        ;;</span><br><span class="line">        *)</span><br><span class="line">            <span class="built_in">echo</span> <span class="string">&quot;Usage: <span class="variable">$SCRIPTNAME</span> &#123;start|stop|restart|reload|status&#125;&quot;</span> &gt;&amp;2</span><br><span class="line">            <span class="built_in">exit</span> 3</span><br><span class="line">        ;;</span><br><span class="line">    <span class="keyword">esac</span></span><br><span class="line">    <span class="built_in">exit</span> 0</span><br><span class="line"></span><br><span class="line"><span class="comment"># 授予执行权限</span></span><br><span class="line"><span class="built_in">chmod</span> +x nginx</span><br><span class="line"></span><br><span class="line"><span class="comment"># 服务管理</span></span><br><span class="line">service nginx start</span><br><span class="line">service nginx stop</span><br><span class="line">service nginx reload</span><br><span class="line">service nginx restart</span><br><span class="line"></span><br><span class="line"><span class="comment"># 加入开机启动</span></span><br><span class="line">chkconfig nginx on</span><br><span class="line"></span><br><span class="line"><span class="comment"># 关闭开启启动</span></span><br><span class="line">chkconfig nginx off</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;!--
 **加粗**
 *斜体*
 ***加粗并斜体***
 ~~删除线~~
 ==突出显示==
 `突出显示(推荐)`
 ++下划线++
 ~下标~
 ^上标^
 脚注，参考文献[^1]，然后在文档最下方要添加这个1对应的内容，如：[^1]: My reference.
 图片设置宽度和高度 ![](https://upic-oss.oss-cn-beijing.aliyuncs.com/uPic/innodb_buffer_pool.png =900x600)

 +++ **点击折叠**
 这是被隐藏的内容
 +++

::: tips success warning danger
这里是容器内的内容
:::

% note info % success warning danger
这里是容器内的内容
% endnote %

引用本地其它文章连接{}
 大括号开始% post_link 文件名称(不包含.md) %大括号结束
 --&gt;
&lt;h2 id=&quot;摘要&quot;&gt;摘要&lt;/h2&gt;
&lt;ul class=&quot;lvl-0&quot;&gt;
&lt;li class=&quot;lvl-2&quot;&gt;
&lt;p&gt;虽然绝大部分软件都可以通过&lt;code&gt;rpm&lt;/code&gt;或者&lt;code&gt;yum&lt;/code&gt;的方式进行安装，但是由于yum中的版本不一定是最新版，或者软件开发商没有将软件放到yum源中，所有也有一些软件需要通过源代码的方式进行安装。&lt;/p&gt;
&lt;/li&gt;
&lt;li class=&quot;lvl-2&quot;&gt;
&lt;p&gt;本文以源代码安装nginx为例说明如何通过源代码安装软件。&lt;/p&gt;
&lt;/li&gt;
&lt;li class=&quot;lvl-2&quot;&gt;
&lt;p&gt;本文基于&lt;code&gt;CentOS8(x86_64)&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;</summary>
    
    
    
    <category term="技术" scheme="https://blog.hanqunfeng.com/categories/%E6%8A%80%E6%9C%AF/"/>
    
    <category term="linux" scheme="https://blog.hanqunfeng.com/categories/%E6%8A%80%E6%9C%AF/linux/"/>
    
    <category term="linux常用命令" scheme="https://blog.hanqunfeng.com/categories/%E6%8A%80%E6%9C%AF/linux/linux%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/"/>
    
    
    <category term="linux常用命令" scheme="https://blog.hanqunfeng.com/tags/linux%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/"/>
    
  </entry>
  
  <entry>
    <title>Linux常用命令--rpm与yum</title>
    <link href="https://blog.hanqunfeng.com/2023/03/17/linux-command08-rpm-yum/"/>
    <id>https://blog.hanqunfeng.com/2023/03/17/linux-command08-rpm-yum/</id>
    <published>2023-03-17T13:30:05.000Z</published>
    <updated>2023-03-24T02:36:53.215Z</updated>
    
    <content type="html"><![CDATA[<!-- **加粗** *斜体* ***加粗并斜体*** ~~删除线~~ ==突出显示== `突出显示(推荐)` ++下划线++ ~下标~ ^上标^ 脚注，参考文献[^1]，然后在文档最下方要添加这个1对应的内容，如：[^1]: My reference. 图片设置宽度和高度 ![](https://upic-oss.oss-cn-beijing.aliyuncs.com/uPic/innodb_buffer_pool.png =900x600) +++ **点击折叠** 这是被隐藏的内容 +++::: tips success warning danger这里是容器内的内容:::% note info % success warning danger这里是容器内的内容% endnote %引用本地其它文章连接{} 大括号开始% post_link 文件名称(不包含.md) %大括号结束 --><h2 id="摘要">摘要</h2><ul class="lvl-0"><li class="lvl-2"><p>在Linux发行版中，几乎每一个发行版都有自己的软件包管理系统。</p></li><li class="lvl-2"><p>常见的有适用于<code>debian</code>、<code>Ubuntu</code>等系统的<code>dpkg</code>、<code>apt-get</code>以及它们的前端<code>aptitude</code>，以及适用于<code>RedHat</code>、<code>Fedora</code>系统的<code>rpm</code>以及它的前端<code>yum</code>。</p></li><li class="lvl-2"><p><code>CentOS</code>系统从属于<code>RedHat</code>系列，其软件包管理系统有RPM和YUM，本文基于<code>CentOS8(x86_64)</code>介绍它们的使用方法。</p></li><li class="lvl-2"><p>从CentOS 8开始，系统默认的软件包管理器是<code>dnf</code>，系统提供的<code>yum</code>命令仅为<code>dnf</code>命令的软链接。<code>dnf</code>是<code>dandified yum</code>的简称，是基于rpm软件包的Linux发行版本的软件包管理器。</p></li></ul><span id="more"></span><h2 id="RPM">RPM</h2><ul class="lvl-0"><li class="lvl-2"><p>RPM，全称RPM Package Manager，是由Red Hat推出的软件包管理系统，现在在各种发行版中普遍适用。</p></li><li class="lvl-2"><p>RRM软件包是将程序源代码经过编译和封装以后形成的包文件，在软件包里面会封装软件的二进制程序、配置文件、帮助手册、库文件以及头文件等。</p></li><li class="lvl-2"><p><code>rpm</code>默认安装，但是RPM存在依赖关系问题</p></li></ul><h3 id="rpm参数说明">rpm参数说明</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">rpm ［options］ /path/to/rpmfile</span><br><span class="line">　　</span><br><span class="line">option：</span><br><span class="line">　　-i|--install：      安装指定软件</span><br><span class="line">　　-v|--verbose：      显示安装过程</span><br><span class="line">　　-e|--erase：        卸载指定的软件</span><br><span class="line">　　-h|--<span class="built_in">hash</span>：         以<span class="comment">#的方式显示安装进度条，一个#为2%</span></span><br><span class="line">　　-q|--query：        查询rpm相关信息</span><br><span class="line">　　--nodeps：          不检测依赖性安装。软件安装时会检测依赖性，确定所需的底层软件是否安装，如果没有安装则会报错。如果不管依赖性，想强制安装，则可以使用这个选项。注意，这样不检测依赖性安装的软件基本上是不能使用的，所以不建议这样做。</span><br><span class="line">　　--<span class="built_in">test</span>：            测试安装。不会实际安装，只是检测一下依赖性。</span><br><span class="line">　　-U：                升级+安装（如果之前有安装则升级，如果之前没有安装则安装）</span><br><span class="line">　　-F：                升级（如果之前有安装则升级，如果之前没安装则不做任何操作）</span><br><span class="line">　　--replacepkgs：     替换软件包安装。如果软件包已经安装，那么此选项可以把软件包重复安装一遍。</span><br><span class="line">　　--replacefiles：    替换文件安装。如果要安装软件包，但是包中的部分文件已经存在，那么在正常安装时会报<span class="string">&quot;某个文件已经存在&quot;</span>的错误，从而导致软件无法安装。使用这个选项可以忽略这个报错而覆盖安装。</span><br><span class="line">　　--force：           在软件包的安装或升级过程中，如果出现某个文件已经安装或者某一个软件已经安装时</span><br><span class="line">　　                    可以使用 --force 选项强制安装，等同于 --replacepkgs --replacefiles --oldpackage 同时使用</span><br></pre></td></tr></table></figure><h3 id="安装rpm">安装rpm</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 这里以安装jdk举例，先下载jdk的rpm包</span></span><br><span class="line">curl -o ./jdk-17_linux-x64_bin.rpm https://download.oracle.com/java/17/latest/jdk-17_linux-x64_bin.rpm</span><br><span class="line"><span class="comment"># -ivh 安装rpm包，建议安装前先查询当前系统是否已经安装了相关的软件包</span></span><br><span class="line">rpm -ivh jdk-17_linux-x64_bin.rpm</span><br><span class="line"><span class="comment"># --test 只对安装进行测试，不实际安装</span></span><br><span class="line">rpm -ivh --<span class="built_in">test</span> jdk-17_linux-x64_bin.rpm</span><br><span class="line"><span class="comment"># --nodeps 安装时忽略依赖，软件有可能不可用</span></span><br><span class="line">rpm -ivh --nodeps jdk-17_linux-x64_bin.rpm</span><br><span class="line"><span class="comment"># --force 强制安装，如果已经安装过该软件或者有文件冲突都进行强制安装</span></span><br><span class="line">rpm -ivh --force jdk-17_linux-x64_bin.rpm</span><br><span class="line"><span class="comment"># --prefix 指定安装路径，而不使用默认的安装路径，不推荐</span></span><br><span class="line">rpm -ivh --prefix /usr/local/soft/jdk17 jdk-17_linux-x64_bin.rpm</span><br><span class="line"></span><br><span class="line"><span class="comment"># 升级安装</span></span><br><span class="line">rpm -Uvh jdk-17_linux-x64_bin.rpm</span><br></pre></td></tr></table></figure><div class="tips"><p><em><strong>RPM 包默认安装路径</strong></em></p><table><thead><tr><th>安装路径</th><th>含 义</th></tr></thead><tbody><tr><td>/etc/</td><td>配置文件安装目录</td></tr><tr><td>/usr/bin/</td><td>可执行的命令安装目录</td></tr><tr><td>/usr/lib/</td><td>程序所使用的函数库保存位置</td></tr><tr><td>/usr/share/doc/</td><td>基本的软件使用手册保存位置</td></tr><tr><td>/usr/share/man/</td><td>帮助文件保存位置</td></tr></tbody></table></div><h3 id="rpm-q：查询软件包是否安装">rpm -q：查询软件包是否安装</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 查询当前系统已经安装的所有包</span></span><br><span class="line">rpm -qa</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查询当前系统是否安装了软件包名称中含有jdk的软件包</span></span><br><span class="line">rpm -qa | grep jdk</span><br><span class="line"><span class="comment"># 也可以通过包名查询，就是版本号前面那部分，这里版本号就是17.0.6，与包名之间用-分隔</span></span><br><span class="line">rpm -q jdk-17</span><br><span class="line"><span class="comment"># 通过命令查询是否安装，一般通过yum安装的软件可以通过这种方式进行查询</span></span><br><span class="line">rpm -q zip</span><br></pre></td></tr></table></figure><h3 id="rpm-qp：查询rpm包安装后的软件包名称">rpm -qp：查询rpm包安装后的软件包名称</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 查询rpm包安装后的软件包名称，p 表示查询的是rpm文件</span></span><br><span class="line">rpm -qp jdk-17_linux-x64_bin.rpm</span><br></pre></td></tr></table></figure><h3 id="rpm-qi：查询软件包的详细信息">rpm -qi：查询软件包的详细信息</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 查询软件包描述信息，通过rpm文件名称</span></span><br><span class="line">rpm -qip jdk-17_linux-x64_bin.rpm</span><br><span class="line"><span class="comment"># 查询软件包描述信息，通过安装后的软件包名称，此时可以不加后面的.x86_64后缀，下面的命令也是这样</span></span><br><span class="line">rpm -qi jdk-17-17.0.6-9.x86_64</span><br><span class="line"><span class="comment"># 也可以通过包名查询，就是版本号前面那部分，这里版本号就是17.0.6，与包名之间用-分隔</span></span><br><span class="line">rpm -qi jdk-17</span><br><span class="line"><span class="comment"># 通过命令查询，一般通过yum安装的软件可以通过这种方式进行查询</span></span><br><span class="line">rpm -qi zip</span><br></pre></td></tr></table></figure><h3 id="rpm-ql：命令查询软件包的文件列表">rpm -ql：命令查询软件包的文件列表</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 查询软件包中的文件列表，通过rpm文件名称</span></span><br><span class="line">rpm -qlp jdk-17_linux-x64_bin.rpm</span><br><span class="line"><span class="comment"># 查询软件包中的文件列表，通过安装后的软件包名称</span></span><br><span class="line">rpm -ql jdk-17-17.0.6-9.x86_64</span><br><span class="line"><span class="comment"># 也可以通过包名查询，就是版本号前面那部分，这里版本号就是17.0.6，与包名之间用-分隔</span></span><br><span class="line">rpm -ql jdk-17</span><br><span class="line"><span class="comment"># 通过命令查询，一般通过yum安装的软件可以通过这种方式进行查询</span></span><br><span class="line">rpm -ql zip</span><br></pre></td></tr></table></figure><h3 id="rpm-qd：查询被标注为文档的文件列表">rpm -qd：查询被标注为文档的文件列表</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 显示被标注为文档的文件列表</span></span><br><span class="line">rpm -qdp jdk-17_linux-x64_bin.rpm</span><br><span class="line">rpm -qd jdk-17-17.0.6-9.x86_64</span><br><span class="line"><span class="comment"># 也可以通过包名查询，就是版本号前面那部分，这里版本号就是17.0.6，与包名之间用-分隔</span></span><br><span class="line">rpm -qd jdk-17</span><br><span class="line"><span class="comment"># 通过命令查询，一般通过yum安装的软件可以通过这种方式进行查询</span></span><br><span class="line">rpm -qd zip</span><br></pre></td></tr></table></figure><h3 id="rpm-qc：查询被标注为配置文件的文件列表">rpm -qc：查询被标注为配置文件的文件列表</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 显示被标注为配置文件的文件列表</span></span><br><span class="line">rpm -qcp jdk-17_linux-x64_bin.rpm</span><br><span class="line">rpm -qc jdk-17-17.0.6-9.x86_64</span><br><span class="line"><span class="comment"># 也可以通过包名查询，就是版本号前面那部分，这里版本号就是17.0.6，与包名之间用-分隔</span></span><br><span class="line">rpm -qc jdk-17</span><br><span class="line"><span class="comment"># 通过命令查询，一般通过yum安装的软件可以通过这种方式进行查询</span></span><br><span class="line">rpm -qc zip</span><br></pre></td></tr></table></figure><h3 id="rpm-qf：命令查询系统文件属于哪个RPM包">rpm -qf：命令查询系统文件属于哪个RPM包</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 查询系统文件属于哪个RPM包</span></span><br><span class="line">rpm -qf /usr/lib/jvm/jdk-17-oracle-x64/bin/java</span><br></pre></td></tr></table></figure><ul class="lvl-0"><li class="lvl-2"><p>这里注意，只能通过真实文件进行查询，软连接是查询不到的</p></li></ul><h3 id="rpm-qR：查询软件包的依赖关系">rpm -qR：查询软件包的依赖关系</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 查询软件包的依赖关系</span></span><br><span class="line">rpm -qRp jdk-17_linux-x64_bin.rpm</span><br><span class="line">rpm -qR jdk-17-17.0.6-9.x86_64</span><br><span class="line"><span class="comment"># 也可以通过包名查询，就是版本号前面那部分，这里版本号就是17.0.6，与包名之间用-分隔</span></span><br><span class="line">rpm -qR jdk-17</span><br><span class="line"><span class="comment"># 通过命令查询，一般通过yum安装的软件可以通过这种方式进行查询</span></span><br><span class="line">rpm -qR zip</span><br></pre></td></tr></table></figure><h3 id="卸载rpm">卸载rpm</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 通过包名卸载指定的软件，此时会检查是否有其它软件对该软件有依赖，如果有依赖则不允许卸载</span></span><br><span class="line">rpm -e jdk-17-17.0.6-9.x86_64</span><br><span class="line"><span class="comment"># 也可以通过包名查询，就是版本号前面那部分，这里版本号就是17.0.6，与包名之间用-分隔</span></span><br><span class="line">rpm -e jdk-17</span><br><span class="line"><span class="comment"># --nodeps :不考虑依赖，强行卸载，不推荐使用，因为这样会导致其它依赖该软件的软件不可用</span></span><br><span class="line">rpm -e --nodeps jdk-17-17.0.6-9.x86_64</span><br></pre></td></tr></table></figure><h3 id="解压rpm">解压rpm</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 解压安装包中的全部文件到当前目录</span></span><br><span class="line">rpm2cpio jdk-17_linux-x64_bin.rpm | cpio -idv</span><br><span class="line"><span class="comment"># 解压安装包中的指定文件到当前目录，/usr/lib/jvm/jdk-17-oracle-x64/bin/java是rpm包中的文件路径，注意前面要加一个点</span></span><br><span class="line">rpm2cpio jdk-17_linux-x64_bin.rpm | cpio -idv ./usr/lib/jvm/jdk-17-oracle-x64/bin/java</span><br></pre></td></tr></table></figure><ul class="lvl-0"><li class="lvl-2"><p>说明</p><ul class="lvl-2"><li class="lvl-6"><code>rpm2cpio</code> : 将rpm包转换为<code>cpio</code>命令能处理的归档包格式。归档包，也可称为文件库，其实就是 <code>cpio</code> 或 <code>tar</code> 格式的文件。</li><li class="lvl-6"><code>cpio</code> 命令可以看做是备份或还原命令，因为它可以将数据（文件）备份到 cpio 归档包，也可以利用 cpio 文档库对数据进行恢复。</li></ul>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">各选项的含义为：</span><br><span class="line">-i：copy-in 模式，还原；</span><br><span class="line">-v：显示还原过程；</span><br><span class="line">-d：还原时自动新建目录；</span><br></pre></td></tr></table></figure></li></ul><h3 id="rpm查看已安装的文件是否被修改过">rpm查看已安装的文件是否被修改过</h3><ul class="lvl-0"><li class="lvl-2"><p>通过该命令可以快速查询通过<code>rpm</code>或<code>yum</code>安装的软件的相关文件(一般为配置文件)被修改过。</p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 查询系统中已安装的所有软件包</span></span><br><span class="line">$ rpm -Va</span><br><span class="line">.M....G..  g /var/log/lastlog</span><br><span class="line">S.5....T.  c /etc/ssh/sshd_config</span><br><span class="line">S.5....T.  c /etc/NetworkManager/NetworkManager.conf</span><br><span class="line">S.5....T.  c /etc/sudoers</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查询指定软件包</span></span><br><span class="line">$ rpm -V openssh-server</span><br><span class="line">S.5....T.  c /etc/ssh/sshd_config  <span class="comment"># 配置文件 sshd_config 的大小、内容、修改时间被人为修改过。因为我们修改了端口。</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 校验某个系统文件是否被修改</span></span><br><span class="line">$ rpm -Vf /etc/ssh/sshd_config</span><br><span class="line">S.5....T.  c /etc/ssh/sshd_config</span><br><span class="line"></span><br><span class="line">可以看到，结果显示了文件被修改的信息。该信息可分为以下 3 部分：</span><br><span class="line">1.最前面的 8 个字符（S.5....T）都属于验证信息，各字符的具体含义如下：</span><br><span class="line">S：文件大小是否改变。</span><br><span class="line">M：文件的类型或文件的权限（rwx）是否改变。</span><br><span class="line">5：文件MD5校验和是否改变（可以看成文件内容是否改变）。</span><br><span class="line">D：设备的主从代码是否改变。</span><br><span class="line">L：文件路径是否改变。</span><br><span class="line">U：文件的属主（所有者）是否改变。</span><br><span class="line">G：文件的属组是否改变。</span><br><span class="line">T：文件的修改时间是否改变。</span><br><span class="line">.：若相关项没发生改变，用 . 表示。</span><br><span class="line"></span><br><span class="line">2.被修改文件类型，大致可分为以下几类：</span><br><span class="line">c：配置文件（configuration file）。</span><br><span class="line">d：普通文档（documentation）。</span><br><span class="line">g：<span class="string">&quot;鬼&quot;</span>文件（ghost file），很少见，就是该文件不应该被这个 RPM 包包含。</span><br><span class="line">l：授权文件（license file）。</span><br><span class="line">r：描述文件（<span class="built_in">read</span> me）。</span><br><span class="line"></span><br><span class="line">3.被修改文件所在绝对路径（包含文件名）。</span><br></pre></td></tr></table></figure><h3 id="rpm导入-安装-数字证书-公钥">rpm导入(安装)数字证书(公钥)</h3><ul class="lvl-0"><li class="lvl-2"><p>数字证书，又称数字签名，由软件开发商直接发布。Linux 系统安装数字证书后，若 RPM 包做了修改，此包携带的数字证书也会改变，将无法与系统成功匹配，软件无法安装。</p></li><li class="lvl-2"><p>系统默认证书在 <code>/efc/pki/rpm-gpg/</code> 下</p></li><li class="lvl-2"><p>导入证书</p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 安装本机证书，一般这个都会默认安装</span></span><br><span class="line">rpm --import /efc/pki/rpm-gpg/RPM-GPG-KEY-centosofficial</span><br><span class="line"><span class="comment"># 安装第三方证书，如jenkins</span></span><br><span class="line">rpm --import https://pkg.jenkins.io/redhat-stable/jenkins.io.key</span><br></pre></td></tr></table></figure><ul class="lvl-0"><li class="lvl-2"><p>可以通过 <code>rpm -qa|grep gpg-pubkey</code> 查看已经导入的证书</p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ rpm -qa|grep gpg-pubkey</span><br><span class="line">gpg-pubkey-8483c65d-5ccc5b19</span><br><span class="line">gpg-pubkey-45f2c3d5-5e81efb9</span><br></pre></td></tr></table></figure><ul class="lvl-0"><li class="lvl-2"><p>数字证书本身也是一个 RPM 包，因此可以用 rpm 命令查询数字证书的详细信息，也可以将其卸载。</p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 查看证书信息</span></span><br><span class="line">rpm -qi gpg-pubkey-8483c65d-5ccc5b19</span><br><span class="line"><span class="comment"># 卸载证书</span></span><br><span class="line">rpm -e gpg-pubkey-8483c65d-5ccc5b19</span><br></pre></td></tr></table></figure><h2 id="YUM">YUM</h2><ul class="lvl-0"><li class="lvl-2"><p><code>yum</code>，全称<code>Yellow dog Updater, Modified</code>，是一个专门为了解决包的依赖关系而存在的软件包管理器。</p></li><li class="lvl-2"><p><code>yum</code>是Linux中的 <em><strong>应用市场</strong></em> ，不仅可以通过<code>yum</code>完成软件包的下载、安装、卸载等，还解决了软件之间的依赖，当安装的软件包需要依赖其它软件包时，会一并进行安装。</p></li><li class="lvl-2"><p><code>yum</code>命令一般为默认安装，<code>yum</code>底层就是基于<code>rpm</code>实现的软件包管理</p></li><li class="lvl-2"><p>使用 yum 安装软件包之前，需指定好 yum 下载 RPM 包的位置，此位置称为 yum 源。换句话说，yum 源指的就是软件安装包的来源</p></li><li class="lvl-2"><p>yum 源既可以使用网络 yum 源，也可以将本地光盘作为 yum 源。</p></li><li class="lvl-2"><p>yum 源默认都是配置好的网络 yum 源，配置文件位于 <code>/etc/yum.repos.d/</code> 目录下，文件扩展名为 <code>*.repo</code></p></li><li class="lvl-2"><p>但是CentOS Linux 8 已经于 2021年12月31日 到期，Linux社区已不再维护该操作系统版本和软件源，所以我们可以将yum源切换到阿里云。</p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 备份原有的源文件</span></span><br><span class="line">rename <span class="string">&#x27;.repo&#x27;</span> <span class="string">&#x27;.repo.bak&#x27;</span> /etc/yum.repos.d/*.repo</span><br><span class="line"></span><br><span class="line"><span class="comment"># 下载阿里云的yum源文件，这里下载Centos-8的源文件，其它版本可以在 https://mirrors.aliyun.com/repo/ 中查找</span></span><br><span class="line">curl -o /etc/yum.repos.d/CentOS-Base.repo http://mirrors.aliyun.com/repo/Centos-8.repo</span><br><span class="line"><span class="comment"># 非官方扩展源，这个也可以不提前下载，可以在配置好yum源后，通过 yum install -y epel-release 进行安装</span></span><br><span class="line"><span class="comment"># 如果在安装软件的时候，没有在Centos-8.repo中找到官方的下载链接，那么yum会自动去epel-release指向的链接处去查找，相当于epel-release给yum提供了更多的下载渠道。</span></span><br><span class="line">curl -o /etc/yum.repos.d/epel-archive-8.repo https://mirrors.aliyun.com/repo/epel-archive-8.repo</span><br><span class="line"></span><br><span class="line"><span class="comment"># 清理yum缓存并重新建立缓存</span></span><br><span class="line">yum clean all &amp;&amp; yum makecache</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看当前的yum源信息</span></span><br><span class="line">yum repolist</span><br><span class="line"></span><br><span class="line">仓库 <span class="built_in">id</span>                      仓库名称</span><br><span class="line">AppStream                    CentOS-8 - AppStream - mirrors.aliyun.com</span><br><span class="line">base                         CentOS-8 - Base - mirrors.aliyun.com</span><br><span class="line">epel-archive                 Extra Packages <span class="keyword">for</span> Enterprise Linux 8 - x86_64</span><br><span class="line">extras                       CentOS-8 - Extras - mirrors.aliyun.com</span><br></pre></td></tr></table></figure><h3 id="yum配置文件">yum配置文件</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cat</span> /etc/yum.conf</span><br><span class="line"></span><br><span class="line">[main]</span><br><span class="line">cachedir=/var/cache/yum    <span class="comment">#yum下载的RPM包的缓存目录</span></span><br><span class="line">keepcache=0                <span class="comment">#缓存的RPM是否保存，1保存，0不保存。</span></span><br><span class="line">reposdir=/etc/yum.repos.d/ <span class="comment">#指定 .repo 文件的绝对路径</span></span><br><span class="line">debuglevel=2               <span class="comment">#调试级别(0-10)，默认为2(具体调试级别的应用，我也不了解)。</span></span><br><span class="line">logfile=/var/log/yum.log   <span class="comment">#yum的日志文件所在的位置</span></span><br><span class="line">exactarch=1                <span class="comment">#在更新的时候，是否允许更新不同版本的RPM包，</span></span><br><span class="line">                           <span class="comment">#比如是否在i386上更新i686的RPM包。</span></span><br><span class="line">obsoletes=1                <span class="comment">#这是一个update的参数，具体请参阅yum(8)，</span></span><br><span class="line">                           <span class="comment">#简单的说就是相当于upgrade，允许更新陈旧的RPM包。</span></span><br><span class="line">gpgcheck=1                 <span class="comment">#是否检查GPG(GNU Private Guard)，一种密钥方式签名。</span></span><br><span class="line">plugins=1                  <span class="comment">#是否允许使用插件，默认是0不允许，</span></span><br><span class="line">                           <span class="comment">#但是我们一般会用yum-fastestmirror这个插件。</span></span><br><span class="line">installonly_limit=3        <span class="comment">#允许保留多少个内核包。</span></span><br><span class="line">exclude=selinux*           <span class="comment">#屏蔽不想更新的RPM包，可用通配符，多个RPM包之间使用空格分离。</span></span><br><span class="line">distroverpkg=system-release <span class="comment">#指定一个软件包，yum 会根据这个包判断你的发行版本</span></span><br><span class="line"><span class="built_in">timeout</span>=5                  <span class="comment">#下载超时，秒</span></span><br><span class="line">retries=7                  <span class="comment">#下载重试次数</span></span><br><span class="line">proxy=http://0.0.0.0:8080  <span class="comment">#配置代理</span></span><br></pre></td></tr></table></figure><h3 id="yum搜索软件">yum搜索软件</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 显示yum源中可以安装的全部软件</span></span><br><span class="line">yum list</span><br><span class="line"></span><br><span class="line"><span class="comment"># 搜索指定软件，显示软件名称、版本，以及所属仓库名称</span></span><br><span class="line">yum list zip</span><br><span class="line"><span class="comment"># 搜索指定软件，显示软件名称和简介</span></span><br><span class="line">yum search zip</span><br></pre></td></tr></table></figure><ul class="lvl-0"><li class="lvl-2"><p>搜索时推荐使用<code>yum list zip</code>的形式</p></li></ul><h3 id="yum安装">yum安装</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 安装过程中需要确认是否安装</span></span><br><span class="line">yum install zip</span><br><span class="line"><span class="comment"># 不需要确认直接安装</span></span><br><span class="line">yum install zip -y</span><br><span class="line"><span class="comment"># 重新安装yum</span></span><br><span class="line">yum reinstall zip</span><br></pre></td></tr></table></figure><h3 id="yum卸载">yum卸载</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 卸载软件，会询问是否卸载</span></span><br><span class="line">yum remove zip</span><br><span class="line"><span class="comment"># 不询问直接卸载</span></span><br><span class="line">yum remove zip -y</span><br></pre></td></tr></table></figure><ul class="lvl-0"><li class="lvl-2"><p><code>yum</code>卸载会同时卸载掉依赖包，可以使用<code>rpm</code>卸载单独的软件</p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">rpm -qa | grep ^zip</span><br><span class="line">zip-3.0-23.el8.x86_64</span><br><span class="line"></span><br><span class="line">rpm -e --nodeps zip-3.0-23.el8.x86_64</span><br></pre></td></tr></table></figure><h3 id="yum升级与降级">yum升级与降级</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 检查是否有软件需要升级</span></span><br><span class="line">yum check-update</span><br><span class="line"><span class="comment"># 检测指定软件是否可以升级</span></span><br><span class="line">yum check-update zip</span><br><span class="line"><span class="comment"># 升级指定软件包，-y 不询问</span></span><br><span class="line">yum upgrade zip -y</span><br><span class="line"><span class="comment"># 升级全部软件包，-y 不询问</span></span><br><span class="line">yum upgrade -y</span><br><span class="line"><span class="comment"># 升级指定软件包，-y 不询问</span></span><br><span class="line">yum update zip -y</span><br><span class="line"><span class="comment"># 升级全部软件包，-y 不询问</span></span><br><span class="line">yum update -y</span><br><span class="line"></span><br><span class="line"><span class="comment"># 降级，降回到升级前的版本，-y 不询问</span></span><br><span class="line">yum downgrade zip -y</span><br></pre></td></tr></table></figure><div class="tips"><p><em><strong><code>yum upgrade</code>与<code>yum update</code>的区别</strong></em></p><ul class="lvl-1"><li class="lvl-2"><code>yum</code>配置文件<code>/etc/yum.conf</code>中，如果<code>obsoletes=1</code>，此时两者没有区别，都表示更新旧的rpm包的同时会删除旧包</li><li class="lvl-2">如果<code>obsoletes=0</code>，<code>yum upgrade</code>会删除旧版本的包，而<code>yum update</code>则会保留旧版本的包</li><li class="lvl-2">生产环境中建议使用<code>yum update</code>，防止因为替换，导致旧的软件包依赖出现问题</li></ul></div><h3 id="yum查看软件依赖关系">yum查看软件依赖关系</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum deplist zip</span><br></pre></td></tr></table></figure><h3 id="yum查看软件包描述信息">yum查看软件包描述信息</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 类似于 rpm -qi</span></span><br><span class="line">yum info zip</span><br></pre></td></tr></table></figure><h3 id="yum下载rpm包">yum下载rpm包</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># yumdownloader 命令在软件包 yum-utils 里面</span></span><br><span class="line">yum -y install yum-utils</span><br><span class="line"></span><br><span class="line"><span class="comment"># 会将docker的rpm包及其相关依赖的rpm包都下载到当前目录</span></span><br><span class="line">yumdownloader --resolve docker</span><br><span class="line"></span><br><span class="line"><span class="comment"># --destdir 下载到指定目录</span></span><br><span class="line">yumdownloader --resolve docker --destdir dockerDir</span><br></pre></td></tr></table></figure><h3 id="yum组：一次安装一组软件">yum组：一次安装一组软件</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 查看可用组，会列出可用组名称</span></span><br><span class="line">yum grouplist</span><br><span class="line">yum group list</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查询组信息，会列出组内包含的所有软件，比如这里查询组名为 Development Tools 的信息</span></span><br><span class="line">yum groupinfo <span class="string">&quot;Development Tools&quot;</span></span><br><span class="line">yum group info <span class="string">&quot;Development Tools&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 安装组内所有软件</span></span><br><span class="line">yum groupinstall <span class="string">&quot;Development Tools&quot;</span></span><br><span class="line">yum group install <span class="string">&quot;Development Tools&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 卸载组内所有软件</span></span><br><span class="line">yum groupremove <span class="string">&quot;Development Tools&quot;</span></span><br><span class="line">yum group remove <span class="string">&quot;Development Tools&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 升级软件组</span></span><br><span class="line">yum groupupdate <span class="string">&quot;Development Tools&quot;</span></span><br><span class="line">yum group update <span class="string">&quot;Development Tools&quot;</span></span><br></pre></td></tr></table></figure><h3 id="重建yum元数据缓存">重建yum元数据缓存</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 清理无效信息</span></span><br><span class="line">yum clean all</span><br><span class="line"></span><br><span class="line"><span class="comment"># 重建缓存</span></span><br><span class="line">yum makecache</span><br><span class="line"><span class="comment"># 或者</span></span><br><span class="line">yum --refresh -v repolist</span><br></pre></td></tr></table></figure><h3 id="yum查看仓库配置">yum查看仓库配置</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 显示启用的仓库简介信息</span></span><br><span class="line">yum repolist</span><br><span class="line"></span><br><span class="line"><span class="comment"># 显示全部的仓库简介信息，包括禁用的</span></span><br><span class="line">yum repolist all</span><br><span class="line"></span><br><span class="line"><span class="comment"># 显示详细信息</span></span><br><span class="line">yum -v repolist</span><br><span class="line"></span><br><span class="line"><span class="comment"># --refresh 显示信息前先重建缓存</span></span><br><span class="line">yum --refresh -v repolist</span><br></pre></td></tr></table></figure><h3 id="yum源配置">yum源配置</h3><ul class="lvl-0"><li class="lvl-2"><p>参数说明</p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">[xxx]：xxx为源仓库名称，一定要放在[]中。</span><br><span class="line">name：源仓库说明，可以自己随便写。</span><br><span class="line">mirrorlist：镜像站点列表，配置了这个就不需要配置baseurl</span><br><span class="line">baseurl：yum 源仓库服务的地址。</span><br><span class="line">enabled：此源仓库是否生效，如果不写或写成 enabled=1 则表示生效，写成 enabled=0 则表示不生效。</span><br><span class="line">gpgcheck：如果为 1 则表示 RPM 的数字证书生效；如果为 0 则表示 RPM 的数字证书不生效。</span><br><span class="line">gpgkey：数字证书的公钥文件保存位置。gpgcheck=1时需要指定地址，gpgcheck=0时，可以不配置。</span><br></pre></td></tr></table></figure><ul class="lvl-0"><li class="lvl-2"><p>使用光盘配置本地源</p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">mkdir</span> /mnt/cdrom</span><br><span class="line"><span class="comment"># 挂载光盘到/mnt/cdrom目录下，也可以将cdrom下的文件拷贝到任意路径下</span></span><br><span class="line">mount /dev/cdrom /mnt/cdrom/</span><br><span class="line"></span><br><span class="line"><span class="built_in">cd</span> /etc/yum.repos.d</span><br><span class="line"><span class="comment"># 备份原有的源文件</span></span><br><span class="line">rename <span class="string">&#x27;.repo&#x27;</span> <span class="string">&#x27;.repo.bak&#x27;</span> /etc/yum.repos.d/*.repo</span><br><span class="line"></span><br><span class="line">vi local-yum.repo</span><br><span class="line"></span><br><span class="line"><span class="comment"># 内容为：可以参考 CentOS-Linux-Media.repo进行配置</span></span><br><span class="line">[local-yum]</span><br><span class="line">name=local-yum,<span class="built_in">source</span> from cdrom</span><br><span class="line"><span class="comment">#使用光盘挂载的方式  mount /dev/cdrom /mnt/cdrom ，也可以将cdrom下的文件拷贝到任意路径下</span></span><br><span class="line">baseurl=file:///mnt/cdrom</span><br><span class="line"><span class="comment"># 假若你不想软件库缺省是被启用的，可以配置为 enabled=0，此时可以通过 yum --enablerepo mlocal-yum install zip 的方式访问该软件库。</span></span><br><span class="line">enabled=1</span><br><span class="line"><span class="comment"># 不进行数字证书校验</span></span><br><span class="line">gpgcheck=0</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 清理yum缓存并重新建立缓存</span></span><br><span class="line">yum clean all &amp;&amp; yum makecache</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看当前的yum源信息</span></span><br><span class="line">yum repolist</span><br></pre></td></tr></table></figure><div class="tips"><p><em><strong>小贴士</strong></em><br>如果没有光驱，可将系统iso文件上传到服务器，比如在/mnt下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">mkdir</span> /mnt/os</span><br><span class="line">mount -t iso9660 -o loop /mnt/CentOS-6.5-x86_64-bin-DVD1.iso /mnt/os</span><br></pre></td></tr></table></figure><p>然后将 baseurl 配置为 file:///mnt/os 即可。</p></div><ul class="lvl-0"><li class="lvl-2"><p>增加网络仓库源<br>有些时候，我们安装的软件并不在我们配置好的yum源中，此时我们可以在软件的官方网站上查看到yum安装的相关说明，比如jenkins: <a href="https://pkg.jenkins.io/redhat/">https://pkg.jenkins.io/redhat/</a>，我们只需要按照说明将对应的源添加到系统中即可。</p><ul class="lvl-2"><li class="lvl-6">1.添加镜像源</li></ul>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wget -O /etc/yum.repos.d/jenkins.repo https://pkg.jenkins.io/redhat-stable/jenkins.repo</span><br></pre></td></tr></table></figure><ul class="lvl-2"><li class="lvl-6">2.导入jenkins公钥</li></ul>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rpm --import https://pkg.jenkins.io/redhat-stable/jenkins.io.key</span><br></pre></td></tr></table></figure><ul class="lvl-2"><li class="lvl-6">3.安装依赖</li></ul>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 安装依赖，如果已经安装则可以跳过此步，jdk版本大于1.8即可</span></span><br><span class="line">yum install fontconfig java-11-openjdk</span><br></pre></td></tr></table></figure><ul class="lvl-2"><li class="lvl-6">4.安装jenkins</li></ul>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install -y jenkins</span><br></pre></td></tr></table></figure><ul class="lvl-2"><li class="lvl-6">5.查看jenkins安装目录</li></ul>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rpm -ql jenkins</span><br></pre></td></tr></table></figure><ul class="lvl-2"><li class="lvl-6">6.启动jenkins</li></ul>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 默认8080端口，用户：admin 初始密码在 /var/lib/jenkins/secrets/initialAdminPassword</span></span><br><span class="line">systemctl start jenkins</span><br><span class="line">systemctl status jenkins</span><br></pre></td></tr></table></figure><ul class="lvl-2"><li class="lvl-6">7.插件下载源更换(海外服务器不需要更换)</li></ul>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Dashboard--Manage Jenkins--Manage Plugins--Advanced settings--Update Site</span><br><span class="line"></span><br><span class="line"><span class="comment"># jenkins插件默认下载站点</span></span><br><span class="line">https://updates.jenkins.io/update-center.json</span><br><span class="line"><span class="comment"># 清华源</span></span><br><span class="line">https://mirrors.tuna.tsinghua.edu.cn/jenkins/updates/update-center.json</span><br></pre></td></tr></table></figure></li></ul><h2 id="DNF">DNF</h2><ul class="lvl-0"><li class="lvl-2"><p>从CentOS 8开始，系统默认的软件包管理器是<code>dnf</code>，系统提供的<code>yum</code>命令仅为<code>dnf</code>命令的软链接。<code>dnf</code>是<code>dandified yum</code>的简称，是基于rpm软件包的Linux发行版本的软件包管理器。</p></li><li class="lvl-2"><p><code>dnf</code>与<code>yum</code>命令的使用和配置方式基本一致，上面介绍的<code>yum</code>命令，直接替换为<code>dnf</code>即可</p></li><li class="lvl-2"><p><code>dnf</code>与<code>yum</code>的区别在于：</p><ul class="lvl-2"><li class="lvl-6">(1)yum禁止删除正在使用的内核，而dnf允许删除所有内核，包括正在使用的内核；</li><li class="lvl-6">(2)在更新软件包时，yum不进行依赖包相关性的检查，而dnf如果检查到存在不相关的依赖包，则不会进行软件包更新。</li><li class="lvl-6">(3)yum在解决依赖包问题时，存在性能较差、内存占用大等问题，而dnf采用了由 SUSE 开发的“libsolv”库，用以提升依赖包解析性能，其依赖包解析速度比yum更快，且比yum消耗更少内存。</li><li class="lvl-6">(4)dnf代码比yum简单，约有29000行代码，而yum代码有59000多行。</li></ul></li></ul>]]></content>
    
    
    <summary type="html">&lt;!--
 **加粗**
 *斜体*
 ***加粗并斜体***
 ~~删除线~~
 ==突出显示==
 `突出显示(推荐)`
 ++下划线++
 ~下标~
 ^上标^
 脚注，参考文献[^1]，然后在文档最下方要添加这个1对应的内容，如：[^1]: My reference.
 图片设置宽度和高度 ![](https://upic-oss.oss-cn-beijing.aliyuncs.com/uPic/innodb_buffer_pool.png =900x600)

 +++ **点击折叠**
 这是被隐藏的内容
 +++

::: tips success warning danger
这里是容器内的内容
:::

% note info % success warning danger
这里是容器内的内容
% endnote %

引用本地其它文章连接{}
 大括号开始% post_link 文件名称(不包含.md) %大括号结束
 --&gt;
&lt;h2 id=&quot;摘要&quot;&gt;摘要&lt;/h2&gt;
&lt;ul class=&quot;lvl-0&quot;&gt;
&lt;li class=&quot;lvl-2&quot;&gt;
&lt;p&gt;在Linux发行版中，几乎每一个发行版都有自己的软件包管理系统。&lt;/p&gt;
&lt;/li&gt;
&lt;li class=&quot;lvl-2&quot;&gt;
&lt;p&gt;常见的有适用于&lt;code&gt;debian&lt;/code&gt;、&lt;code&gt;Ubuntu&lt;/code&gt;等系统的&lt;code&gt;dpkg&lt;/code&gt;、&lt;code&gt;apt-get&lt;/code&gt;以及它们的前端&lt;code&gt;aptitude&lt;/code&gt;，以及适用于&lt;code&gt;RedHat&lt;/code&gt;、&lt;code&gt;Fedora&lt;/code&gt;系统的&lt;code&gt;rpm&lt;/code&gt;以及它的前端&lt;code&gt;yum&lt;/code&gt;。&lt;/p&gt;
&lt;/li&gt;
&lt;li class=&quot;lvl-2&quot;&gt;
&lt;p&gt;&lt;code&gt;CentOS&lt;/code&gt;系统从属于&lt;code&gt;RedHat&lt;/code&gt;系列，其软件包管理系统有RPM和YUM，本文基于&lt;code&gt;CentOS8(x86_64)&lt;/code&gt;介绍它们的使用方法。&lt;/p&gt;
&lt;/li&gt;
&lt;li class=&quot;lvl-2&quot;&gt;
&lt;p&gt;从CentOS 8开始，系统默认的软件包管理器是&lt;code&gt;dnf&lt;/code&gt;，系统提供的&lt;code&gt;yum&lt;/code&gt;命令仅为&lt;code&gt;dnf&lt;/code&gt;命令的软链接。&lt;code&gt;dnf&lt;/code&gt;是&lt;code&gt;dandified yum&lt;/code&gt;的简称，是基于rpm软件包的Linux发行版本的软件包管理器。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;</summary>
    
    
    
    <category term="技术" scheme="https://blog.hanqunfeng.com/categories/%E6%8A%80%E6%9C%AF/"/>
    
    <category term="linux" scheme="https://blog.hanqunfeng.com/categories/%E6%8A%80%E6%9C%AF/linux/"/>
    
    <category term="linux常用命令" scheme="https://blog.hanqunfeng.com/categories/%E6%8A%80%E6%9C%AF/linux/linux%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/"/>
    
    
    <category term="linux常用命令" scheme="https://blog.hanqunfeng.com/tags/linux%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/"/>
    
  </entry>
  
  <entry>
    <title>Linux常用命令--管道符&quot;|&quot;、&quot;xargs&quot;、文件描述符与重定向</title>
    <link href="https://blog.hanqunfeng.com/2023/03/15/linux-command07-xargs/"/>
    <id>https://blog.hanqunfeng.com/2023/03/15/linux-command07-xargs/</id>
    <published>2023-03-15T13:30:05.000Z</published>
    <updated>2023-03-24T02:37:03.029Z</updated>
    
    <content type="html"><![CDATA[<!-- **加粗** *斜体* ***加粗并斜体*** ~~删除线~~ ==突出显示== `突出显示(推荐)` ++下划线++ ~下标~ ^上标^ 脚注，参考文献[^1]，然后在文档最下方要添加这个1对应的内容，如：[^1]: My reference. 图片设置宽度和高度 ![](https://upic-oss.oss-cn-beijing.aliyuncs.com/uPic/innodb_buffer_pool.png =900x600) +++ **点击折叠** 这是被隐藏的内容 +++::: tips success warning danger这里是容器内的内容:::% note info % success warning danger这里是容器内的内容% endnote %引用本地其它文章连接{} 大括号开始% post_link 文件名称(不包含.md) %大括号结束 --><h2 id="摘要">摘要</h2><ul class="lvl-0"><li class="lvl-2"><p>本文介绍管道符&quot;|&quot;与&quot;xargs&quot;的使用方法。</p></li><li class="lvl-2"><p>以及文件描述符与重定向操作符的使用方法。</p></li><li class="lvl-2"><p>本文基于<code>CentOS8(x86_64)</code></p></li></ul><span id="more"></span><h2 id="管道符">管道符&quot;|&quot;</h2><ul class="lvl-0"><li class="lvl-2"><p>管道符主要用于多重命令处理，前面命令的输出结果作为后面命令的输入</p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 该命令的作用就是查看文本后排序，然后再去重，最后过滤出含有hello的行并输出</span></span><br><span class="line"><span class="built_in">cat</span> test.txt | <span class="built_in">sort</span> | <span class="built_in">uniq</span> | grep <span class="string">&quot;hello&quot;</span></span><br></pre></td></tr></table></figure><ul class="lvl-0"><li class="lvl-2"><p>以上的cat、sort、uniq、grep等命令均支持管道符，一般情况下，处理文本的命令，例如sort、uniq、grep、awk、sed等命令均支持管道，是因为这些命令均可从标准输入中读取要处理的文本（即从标准输入中读取参数）</p></li><li class="lvl-2"><p>而对于不是处理文本的命令，例如ls、rm、kill等则不支持从标准输入中读取参数，只支持从命令行中读取参数，而要使其也能从标准输入中读取参数则需要使用<code>xargs</code></p></li><li class="lvl-2"><p>命令行参数优先于标准输入即管道符，如<code>cat a.txt | sort b.txt</code>，此时<code>sort</code>仅仅会处理<code>b.txt</code></p></li><li class="lvl-2"><p><code>- </code> 表示标准输入，例如 <code>cat a.txt | sort b.txt -</code>，相当于 <code>sort a.txt b.txt</code></p></li></ul><div class="tips"><p><em><strong>命令行参数和标准输入的区别</strong></em></p><ul class="lvl-1"><li class="lvl-2">命令行参数<blockquote><p>命令行参数就是命令后面的参数<br>例如<code>rm test.sh</code>，<code>rm</code>是命令，<code>test.sh</code>就是命令行参数</p></blockquote></li><li class="lvl-2">标准输入<blockquote><p>标准输入一般指的是键盘输入，也可用于表示管道符之前命令的输出结果（即打印在屏幕的文本）作为之后命令的标准输入</p></blockquote></li></ul></div><h2 id="xargs">xargs</h2><ul class="lvl-0"><li class="lvl-2"><p><code>xargs</code>的作用是接收管道符前面命令的输出进行处理后作为命令行参数传递给后续命令，而并不是作为标准输入传递给后续命令。</p></li><li class="lvl-2"><p><code>xargs</code>以空白字符（空格，tap，换行符均算空白字符）分隔从管道接收的文本，并且将分隔后文本均作为参数</p></li><li class="lvl-2"><p><code>xargs</code>常用选项</p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">参数    解释</span><br><span class="line">-d    指定分隔符，不指定默认为空白字符</span><br><span class="line">-p    先打印即将执行的命令并询问是否执行</span><br><span class="line">-n    指定每次传输给后续命令的参数个数，不指定则全部传递</span><br></pre></td></tr></table></figure><ul class="lvl-0"><li class="lvl-2"><p>示例</p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 假设当前目录下有a.txt和b.txt，则该命令的含义就是 cat a.txt b.txt</span></span><br><span class="line"><span class="built_in">ls</span> *.txt | xargs <span class="built_in">cat</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 等价于 按顺序执行 cat a.txt 和 cat b.txt</span></span><br><span class="line"><span class="built_in">ls</span> *.txt | xargs -n 1 <span class="built_in">cat</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除文件，执行前先打印命令并询问是否执行，输入y回车后可以执行，仅仅回车不执行</span></span><br><span class="line"><span class="built_in">ls</span> *.txt | xargs -p <span class="built_in">rm</span> -rf</span><br><span class="line"></span><br><span class="line"><span class="comment"># 杀掉进程</span></span><br><span class="line">ps -ef | grep <span class="string">&#x27;test.sh&#x27;</span> | grep -v <span class="string">&#x27;grep&#x27;</span>| awk <span class="string">&#x27;&#123;print $2&#125;&#x27;</span> | xargs <span class="built_in">kill</span></span><br></pre></td></tr></table></figure><h2 id="文件描述符">文件描述符</h2><ul class="lvl-0"><li class="lvl-2"><p>在 Linux 系统中，进程通过文件描述符来管理文件，文件描述符就是一个数字以及与之相关联的一堆数据</p></li><li class="lvl-2"><p>一个进程打开一个文件，就会创建一个新的文件描述符，这个数字一般是自增的，进程如果关闭文件，这个描述符是可以重复利用的</p></li><li class="lvl-2"><p>查看进程关联的文件描述符</p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 比如查看`mysqld`的文件描述符</span></span><br><span class="line"><span class="comment"># 先获得mysqld的PID，这里是823</span></span><br><span class="line">$ ps aux | grep mysqld | grep -v <span class="string">&quot;grep&quot;</span></span><br><span class="line">mysql      823  0.0  7.0 1653908 64080 ?       Ssl  3月01   7:50 /usr/sbin/mysqld</span><br><span class="line"></span><br><span class="line"><span class="comment"># 进入如下目录</span></span><br><span class="line">$ <span class="built_in">cd</span> /proc/823/fd</span><br><span class="line"><span class="comment"># 列出PID为823的进程关联的文件描述符</span></span><br><span class="line">$ <span class="built_in">ls</span></span><br><span class="line">0   12  16  2   23  27  30  34  38  41  45  49  52  56  6   63  67  70  9</span><br><span class="line">1   13  17  20  24  28  31  35  39  42  46  5   53  57  60  64  68  71</span><br><span class="line">10  14  18  21  25  29  32  36  4   43  47  50  54  58  61  65  69  72</span><br><span class="line">11  15  19  22  26  3   33  37  40  44  48  51  55  59  62  66  7   8</span><br><span class="line"></span><br><span class="line"><span class="comment"># 通过ls -l可以查看到实际关联的文件，这里对文件描述符按数字大小做了排序</span></span><br><span class="line">$ <span class="built_in">ls</span> -l | grep <span class="string">&quot;^l&quot;</span> | <span class="built_in">sort</span> -k 9n | <span class="built_in">head</span> -n 5</span><br><span class="line">lr-x------ 1 mysql mysql 64 3月  13 04:06 0 -&gt; /dev/null</span><br><span class="line">lrwx------ 1 mysql mysql 64 3月  13 04:06 1 -&gt; socket:[16837]</span><br><span class="line">lrwx------ 1 mysql mysql 64 3月  13 04:06 2 -&gt; socket:[16837]</span><br><span class="line">lrwx------ 1 mysql mysql 64 3月  13 04:06 3 -&gt; /var/lib/mysql/aria_log_control</span><br><span class="line">lr-x------ 1 mysql mysql 64 3月  13 04:06 4 -&gt; /var/lib/mysql</span><br></pre></td></tr></table></figure><ul class="lvl-0"><li class="lvl-2"><p>每一个进程启动的时候，都会默认打开三个文件，用<code>0,1,2</code>来当做他们的描述符</p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">0 : 标准输入文件(stdin)，代表标准输入，默认指键盘输入</span><br><span class="line">1 : 标准输出文件(stdout)，代表标准输出，标准输出就是命令的输出，默认指向终端屏幕</span><br><span class="line">2 : 标准错误文件(stderr)，代表错误输出，标准错误是命令错误信息的输出，默认指向终端屏幕</span><br></pre></td></tr></table></figure><ul class="lvl-0"><li class="lvl-2"><p>进程操作所有文件的过程都是一样的，都是先打开一个文件，给他一个文件描述符，然后针对这个描述符进行读或者写</p></li><li class="lvl-2"><p>在Linux里，键盘输入这种操作会变成一个文件操作，就类似普通的文件那样，这就是Linux的设计，一切皆是文件</p></li><li class="lvl-2"><p>不仅仅键盘操作和屏幕打印是文件操作，网络连接读取数据等等，也都是文件操作，这些也都会产生文件描述符</p></li><li class="lvl-2"><p>一个进程同时拥有的文件描述符是有上限的，这个上限可以设置。</p></li><li class="lvl-2"><p>我们来解读下面这个命令的执行过程</p>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cat</span> test.txt | grep <span class="string">&quot;hello&quot;</span></span><br></pre></td></tr></table></figure><ul class="lvl-2"><li class="lvl-6">1.<code>cat</code>这个程序打开了test.txt这个文件，将其内容写入 <code>1</code> 这个文件(标准输出)，也就是屏幕上</li><li class="lvl-6">2.管道符<code>|</code>的作用就是将前一个程序的 <code>1</code> (标准输出)绑定到后一个程序的<code>0</code>(标准输入)，这里就是将<code>cat</code>的<code>1</code>绑定到<code>grep</code>的<code>0</code></li><li class="lvl-6">3.然后<code>grep</code> 这个程序就试图从 <code>0</code> 这个文件(标准输入)中读取数据，然后找到包含<code>hello</code>的行，然后把找到的行写入到 <code>1</code> 这个文件(标准输出)中，也就是屏幕上</li></ul></li></ul><h3 id="设置文件描述符上限">设置文件描述符上限</h3><ul class="lvl-0"><li class="lvl-2"><p>文件描述符上限设置分为三个限制级别：系统限制、用户限制、会话限制，最终的上限是这三个限制级别中最小的值</p></li><li class="lvl-2"><p>查看及设置系统上限</p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 查看</span></span><br><span class="line"><span class="built_in">cat</span> /proc/sys/fs/file-max</span><br><span class="line">或者</span><br><span class="line">sysctl fs.file-max</span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置</span></span><br><span class="line"><span class="built_in">echo</span> fs.file-max=65535 &gt;&gt; /etc/sysctl.conf</span><br><span class="line">sysctl -p <span class="comment"># 立即生效</span></span><br></pre></td></tr></table></figure><ul class="lvl-0"><li class="lvl-2"><p>查看及设置用户上限</p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 查看</span></span><br><span class="line"><span class="built_in">cat</span> /etc/security/limits.conf</span><br><span class="line"><span class="comment"># 设置格式为：</span></span><br><span class="line">　　　　　　username|@groupname <span class="built_in">type</span> resource <span class="built_in">limit</span></span><br><span class="line">　　　　　　username|@groupname：设置需要被限制的用户名，组名前面加@和用户名区别。也可以用通配符*来做所有用户的限制。</span><br><span class="line">　　　　　　<span class="built_in">type</span>：有 soft，hard 和 -，soft 指的是当前系统生效的设置值。hard 表明系统中所能设定的最大值。soft 的限制不能比hard 限制高。用 - 就表明同时设置了 soft 和 hard 的值</span><br><span class="line">　　　　　　resource: 为资源类型有多种。 nofile为最大打开文件数。</span><br><span class="line">　　　　　　例如：* -  nofile 65535  将所有用户的最大打开文件数的soft和hard都设为65535</span><br><span class="line"><span class="comment"># 对/etc/security/limit.conf的修改会在新的会话期中生效</span></span><br><span class="line"><span class="comment"># 设置时一般在文件最后添加如下内容</span></span><br><span class="line">root soft nofile 65535</span><br><span class="line">root hard nofile 65535</span><br><span class="line">* soft nofile 65535</span><br><span class="line">* hard nofile 65535</span><br></pre></td></tr></table></figure><ul class="lvl-0"><li class="lvl-2"><p>查看及设置会话上限 :默认继承自用户限制级别</p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 查看</span></span><br><span class="line"><span class="built_in">ulimit</span> -Sn :查看会话期最大文件描述符soft限制</span><br><span class="line"><span class="built_in">ulimit</span> -Hn :查看会话期最大文件描述符hard限制，hard限制是soft的上限。</span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置</span></span><br><span class="line"><span class="comment"># 用ulimit所做的修改在会话期结束后都将失效</span></span><br><span class="line"><span class="built_in">ulimit</span> -Sn 2046 :限制当前会话期内能打开的文件数为2046（如果其中一个进程打开了2046个，其他进程再打文件都将失败）</span><br></pre></td></tr></table></figure><ul class="lvl-0"><li class="lvl-2"><p>文件描述符使用上限最大能设置多大呢？当然你可以把它往大了设，但是同时打开的文件描述符越多，内存开销就越大。那怎样设置一个合理的上限呢？一个经验算法是 256个fd 需4M内存。例如8G内存，<code>8*1024/4*256=524288</code>。</p></li><li class="lvl-2"><p>如果我们在一台机器上部署了自己的网络服务，我们只需按下面步骤修改就可以了：</p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">　　1. 计算 fdmax = 物理内存大小(m为单位) / 4 * 256  ,假设内存为8G,fdmax=524288</span><br><span class="line">　　2. 执行命令: <span class="built_in">echo</span> fs.file-max=524288 &gt;&gt; /etc/sysctl.conf</span><br><span class="line">　　3. 执行命令: sysctl -p</span><br><span class="line">　　4. 执行命令: <span class="built_in">echo</span>  * soft nofile  524286 &gt;&gt; /etc/security/limits.conf</span><br><span class="line">　　5. 执行命令: <span class="built_in">echo</span>  * hard nofile 524287 &gt;&gt; /etc/security/limits.conf</span><br><span class="line">　　6. 结束当前会话期</span><br><span class="line">　　7. 启动新的会话</span><br><span class="line">　　8. 启动我们的服务</span><br></pre></td></tr></table></figure><h2 id="重定向操作符">重定向操作符</h2><ul class="lvl-0"><li class="lvl-2"><p>所谓重定向，其含义就是将不同的文件描述符重新定向到其它文件描述符</p></li><li class="lvl-2"><p>常用的重定向操作符有如下几种:</p><ul class="lvl-2"><li class="lvl-6"><code>&lt;</code> :将文件作为命令的标准输入</li></ul>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cat</span> &lt; test.txt</span><br><span class="line">mysql -uroot -p &lt; databases.sql</span><br></pre></td></tr></table></figure><ul class="lvl-2"><li class="lvl-6"><code>&gt;</code> :将命令的输出结果输出到指定文件中，就是将标准输出重定向，且覆盖原文件内容</li></ul>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 以下两个命令的作用是一样的，都是将标准输出重定向到文件</span></span><br><span class="line"><span class="built_in">cat</span> test.txt | grep <span class="string">&quot;hello&quot;</span> &gt; result.txt</span><br><span class="line"><span class="built_in">cat</span> test.txt | grep <span class="string">&quot;hello&quot;</span> 1&gt; result.txt</span><br><span class="line"></span><br><span class="line"><span class="comment"># 标准输出与标准错误都重定向到文件</span></span><br><span class="line">sh test.sh 1&gt; run.log 2&gt; error.log</span><br></pre></td></tr></table></figure><ul class="lvl-2"><li class="lvl-6"><code>&gt;&gt;</code> :将命令的输出结果以 <em><strong>追加</strong></em> 的方式输出到指定文件中</li></ul>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 以下两个命令的作用是一样的，都是将标准输出重定向到文件</span></span><br><span class="line"><span class="built_in">cat</span> test.txt | grep <span class="string">&quot;hello&quot;</span> &gt;&gt; result.txt</span><br><span class="line"><span class="built_in">cat</span> test.txt | grep <span class="string">&quot;hello&quot;</span> 1&gt;&gt; result.txt</span><br><span class="line"></span><br><span class="line"><span class="comment"># 标准输出与标准错误都重定向到文件</span></span><br><span class="line">sh test.sh &gt;&gt; run.log 2&gt;&gt; error.log</span><br></pre></td></tr></table></figure><ul class="lvl-2"><li class="lvl-6"><code>&gt;&amp;</code> :将命令的输出结果或者一个文件描述符重新定向到另一个文件描述符</li></ul>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 以下两个命令的作用是一样的，都是将标准输出重定向到文件，标准错误重定向且等同于标准输出</span></span><br><span class="line"><span class="built_in">cat</span> test.txt | grep <span class="string">&quot;hello&quot;</span> &gt; result.txt 2&gt;&amp;1</span><br><span class="line"><span class="built_in">cat</span> test.txt | grep <span class="string">&quot;hello&quot;</span> 1&gt; result.txt 2&gt;&amp;1</span><br><span class="line"></span><br><span class="line"><span class="comment"># 标准输出重定向到文件，标准错误重定向且等同于标准输出</span></span><br><span class="line">sh test.sh &gt;&gt; run.log 2&gt;&amp;1</span><br><span class="line"></span><br><span class="line"><span class="comment"># 标准输出重定向到空设备文件，也就是不输出也不显示任何信息，标准错误重定向且等同于标准输出，也就是标准错误也重定向到空设备中</span></span><br><span class="line">sh test.sh 1&gt;/dev/null 2&gt;&amp;1</span><br></pre></td></tr></table></figure></li><li class="lvl-2"><p>使用重定向操作符时的注意事项</p>  <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">1.标准输入0、标准输出1、标准错误2 需要分别重定向，一个重定向只能改变它们其中一个。</span><br><span class="line">2.文件描述符在重定向符号左侧时可以省略。</span><br><span class="line">3.文件描述符与重定向符号之间不能有空格。</span><br></pre></td></tr></table></figure></li></ul>]]></content>
    
    
    <summary type="html">&lt;!--
 **加粗**
 *斜体*
 ***加粗并斜体***
 ~~删除线~~
 ==突出显示==
 `突出显示(推荐)`
 ++下划线++
 ~下标~
 ^上标^
 脚注，参考文献[^1]，然后在文档最下方要添加这个1对应的内容，如：[^1]: My reference.
 图片设置宽度和高度 ![](https://upic-oss.oss-cn-beijing.aliyuncs.com/uPic/innodb_buffer_pool.png =900x600)

 +++ **点击折叠**
 这是被隐藏的内容
 +++

::: tips success warning danger
这里是容器内的内容
:::

% note info % success warning danger
这里是容器内的内容
% endnote %

引用本地其它文章连接{}
 大括号开始% post_link 文件名称(不包含.md) %大括号结束
 --&gt;
&lt;h2 id=&quot;摘要&quot;&gt;摘要&lt;/h2&gt;
&lt;ul class=&quot;lvl-0&quot;&gt;
&lt;li class=&quot;lvl-2&quot;&gt;
&lt;p&gt;本文介绍管道符&amp;quot;|&amp;quot;与&amp;quot;xargs&amp;quot;的使用方法。&lt;/p&gt;
&lt;/li&gt;
&lt;li class=&quot;lvl-2&quot;&gt;
&lt;p&gt;以及文件描述符与重定向操作符的使用方法。&lt;/p&gt;
&lt;/li&gt;
&lt;li class=&quot;lvl-2&quot;&gt;
&lt;p&gt;本文基于&lt;code&gt;CentOS8(x86_64)&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;</summary>
    
    
    
    <category term="技术" scheme="https://blog.hanqunfeng.com/categories/%E6%8A%80%E6%9C%AF/"/>
    
    <category term="linux" scheme="https://blog.hanqunfeng.com/categories/%E6%8A%80%E6%9C%AF/linux/"/>
    
    <category term="linux常用命令" scheme="https://blog.hanqunfeng.com/categories/%E6%8A%80%E6%9C%AF/linux/linux%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/"/>
    
    
    <category term="linux常用命令" scheme="https://blog.hanqunfeng.com/tags/linux%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/"/>
    
  </entry>
  
  <entry>
    <title>Linux常用命令--各种符号</title>
    <link href="https://blog.hanqunfeng.com/2023/03/13/linux-command06-$/"/>
    <id>https://blog.hanqunfeng.com/2023/03/13/linux-command06-$/</id>
    <published>2023-03-13T14:40:05.000Z</published>
    <updated>2023-03-24T05:38:07.521Z</updated>
    
    <content type="html"><![CDATA[<!-- **加粗** *斜体* ***加粗并斜体*** ~~删除线~~ ==突出显示== `突出显示(推荐)` ++下划线++ ~下标~ ^上标^ 脚注，参考文献[^1]，然后在文档最下方要添加这个1对应的内容，如：[^1]: My reference. 图片设置宽度和高度 ![](https://upic-oss.oss-cn-beijing.aliyuncs.com/uPic/innodb_buffer_pool.png =900x600) +++ **点击折叠** 这是被隐藏的内容 +++::: tips success warning danger这里是容器内的内容:::% note info % success warning danger这里是容器内的内容% endnote % --><h2 id="摘要">摘要</h2><ul class="lvl-0"><li class="lvl-2"><p>文本介绍linux编程中会用到的各种符号的使用方法</p></li><li class="lvl-2"><p>特殊变量: $0、$?、$*、$@、$#、$$、$_、$!</p></li><li class="lvl-2"><p>&amp;和&amp;&amp;、|和||</p></li><li class="lvl-2"><p>命令替换: $( ) 与 ``</p></li><li class="lvl-2"><p>整数运算: $(( )) 与 $[ ]</p></li><li class="lvl-2"><p>条件判断: (( ))、[ ]与[[ ]]</p></li><li class="lvl-2"><p>变量引用: $ 与 ${ }</p></li><li class="lvl-2"><p>本文基于<code>CentOS8(x86_64)</code></p></li></ul><span id="more"></span><h2 id="特殊变量-0、-、-、-、-、-、">特殊变量: <code>$0、$?、$*、$@、$#、$$、$!</code></h2><ul class="lvl-0"><li class="lvl-2"><p><code>$0</code> : 当前脚本的文件名（间接运行时还包括绝对路径）。</p></li><li class="lvl-2"><p><code>$n</code> : 传递给脚本或函数的参数。n 是一个数字，表示第几个参数。例如，第一个参数是 $1 。</p></li><li class="lvl-2"><p><code>$#</code> : 传递给脚本或函数的参数个数。</p></li><li class="lvl-2"><p><code>$*</code> : 传递给脚本或函数的所有参数。</p></li><li class="lvl-2"><p><code>$@</code> : 传递给脚本或函数的所有参数。被双引号 <code>&quot;$@&quot;</code> 包含时，与 <code>&quot;$*&quot;</code> 不同，下面将会讲到。</p></li><li class="lvl-2"><p><code>$?</code> : 上个命令的退出状态(0:success 非0:error)，或函数的返回值。</p></li><li class="lvl-2"><p><code>$$</code> : 当前 Shell 进程 ID。对于 Shell 脚本，就是这些脚本所在的进程 ID。</p></li><li class="lvl-2"><p><code>$_</code> : 上一个命令的最后一个参数</p></li><li class="lvl-2"><p><code>$!</code> : 后台运行的最后一个进程的 ID 号</p></li></ul><blockquote><p><code>$*</code> 和 <code>$@</code> 都表示传递给函数或脚本的所有参数，不被双引号 <code>&quot;&quot;</code> 包含时，都以独立个体<code>&quot;$1&quot; &quot;$2&quot; … &quot;$n&quot;</code> 的形式输出所有参数。<br>但是当它们被双引号 <code>&quot;&quot;</code> 包含时，<code>&quot;$*&quot;</code>会将所有的参数作为一个整体输出，<code>&quot;$@&quot;</code>依旧会以独立个体<code>&quot;$1&quot; &quot;$2&quot; … &quot;$n&quot;</code> 的形式输出所有参数。</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># $*</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> $*</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$i</span></span><br><span class="line"><span class="keyword">done</span></span><br><span class="line"><span class="comment"># sh test.sh 1 2 3 4，此时输出</span></span><br><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line"></span><br><span class="line"><span class="comment"># &quot;$*&quot;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="string">&quot;$*&quot;</span></span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="variable">$i</span></span><br><span class="line"><span class="keyword">done</span></span><br><span class="line"><span class="comment"># sh test.sh 1 2 3 4，此时输出</span></span><br><span class="line">1 2 3 4</span><br><span class="line"></span><br><span class="line"><span class="comment"># $@</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="variable">$@</span></span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="variable">$i</span></span><br><span class="line"><span class="keyword">done</span></span><br><span class="line"><span class="comment"># sh test.sh 1 2 3 4，此时输出</span></span><br><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line"></span><br><span class="line"><span class="comment"># &quot;$@&quot;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="string">&quot;<span class="variable">$@</span>&quot;</span></span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="variable">$i</span></span><br><span class="line"><span class="keyword">done</span></span><br><span class="line"><span class="comment"># sh test.sh 1 2 3 4，此时输出</span></span><br><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td></tr></table></figure><blockquote><p>获取参数数量：</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">paramSize=<span class="variable">$&#123;#@&#125;</span></span><br></pre></td></tr></table></figure><h2 id="和-、-和"><code>&amp;</code>和<code>&amp;&amp;</code>、<code>|</code>和<code>||</code></h2><ul class="lvl-0"><li class="lvl-2"><p><code>&amp;</code>  表示任务在后台执行，如要在后台运行redis-server,则有 <code>redis-server &amp;</code></p></li><li class="lvl-2"><p><code>&amp;&amp;</code> 表示前一条命令执行成功时，才执行后一条命令 ，如 <code>make &amp;&amp; make install</code></p></li><li class="lvl-2"><p><code>|</code> 表示管道，上一条命令的输出，作为下一条命令参数，如 <code>cat text.txt | wc -l</code></p></li><li class="lvl-2"><p><code>||</code> 表示上一条命令执行失败后，才执行下一条命令，如 <code>grep &quot;success&quot; run.log || echo &quot;fail&quot;</code></p></li></ul><h2 id="命令替换-与">命令替换: <code>$( )</code> 与 ``</h2><ul class="lvl-0"><li class="lvl-2"><p><code>$( )</code> 与 `` 都是用来作命令替换的，优先执行括号或者反引号中的命令，并将结果替换出来组成新的命令</p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 以下命令效果相同</span></span><br><span class="line"><span class="built_in">echo</span> today is `<span class="built_in">date</span> <span class="string">&quot;+%Y-%m-%d&quot;</span>`</span><br><span class="line"><span class="built_in">echo</span> today is $(<span class="built_in">date</span> <span class="string">&quot;+%Y-%m-%d&quot;</span>)</span><br><span class="line"></span><br><span class="line">today=`<span class="built_in">date</span> <span class="string">&quot;+%Y-%m-%d&quot;</span>`</span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$today</span></span><br><span class="line">today=$(<span class="built_in">date</span> <span class="string">&quot;+%Y-%m-%d&quot;</span>)</span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$today</span></span><br></pre></td></tr></table></figure><ul class="lvl-0"><li class="lvl-2"><p>推荐使用<code>$( )</code>，因为在多层次的复合替换中，内部的`` 必须要进行转义，而$( )比较直观</p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#  cmd3 `cmd2 \`cmd1\``</span></span><br><span class="line">sh echo.sh <span class="string">&quot;`echo today is \`date &quot;</span>+%Y-%m-%d<span class="string">&quot;\``&quot;</span></span><br><span class="line"><span class="comment">#  cmd3 $(cmd2 $(cmd1))</span></span><br><span class="line">sh echo.sh <span class="string">&quot;<span class="subst">$(echo today is $(date <span class="string">&quot;+%Y-%m-%d&quot;</span>)</span>)&quot;</span></span><br></pre></td></tr></table></figure><h2 id="整数运算-与">整数运算: <code>$(( ))</code> 与 <code>$[ ]</code></h2><ul class="lvl-0"><li class="lvl-2"><p><code>$(( ))</code>用于执行整数计算，等价于<code>$[ ]</code></p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">echo</span> $(( <span class="number">3</span>+<span class="number">5</span> ))</span><br><span class="line"><span class="built_in">echo</span> $[ 3+5 ]</span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> $(( (<span class="number">3</span>+<span class="number">5</span>)*<span class="number">4</span>/<span class="number">2</span> ))</span><br><span class="line"><span class="built_in">echo</span> $[ (3+5)*4/2 ]</span><br></pre></td></tr></table></figure><h2 id="条件判断-、-和">条件判断: <code>(( ))</code>、<code>[ ]</code>和<code>[[ ]]</code></h2><ul class="lvl-0"><li class="lvl-2"><p>在使用<code>if</code>或<code>while</code>等语句时，需要进行条件判断，<code>(( ))</code>、<code>[ ]</code>和<code>[[ ]]</code>都可以用来进行条件判断，那么他们之间有什么区别吗？</p><ul class="lvl-2"><li class="lvl-6"><code>[ ]</code>是<code>test</code>命令的另一种形式，例如 <code>test a == b</code> 等同于 <code>[ a == b ]</code>，注意 <code>[</code> 后和 <code>]</code> 前都需要有空格，并且<code>==</code>两边也都要有空格</li></ul>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">test</span> <span class="string">&#x27;hello&#x27;</span> != <span class="string">&#x27;world&#x27;</span> ==&gt;  [ <span class="string">&#x27;hello&#x27;</span> != <span class="string">&#x27;world&#x27;</span> ]</span><br><span class="line"><span class="built_in">test</span> ! -e test.sh       ==&gt;  [ ! -e test.sh ]</span><br><span class="line"><span class="built_in">test</span> <span class="variable">$i</span> -lt 5           ==&gt;  [ <span class="variable">$i</span> -lt 5 ]</span><br></pre></td></tr></table></figure><ul class="lvl-2"><li class="lvl-6"><code>[[ ]]</code>是<code>[ ]</code>的增强版，其在如下几个方面进行了增强:<ul class="lvl-4"><li class="lvl-10">1.在<code>[[ ]]</code>中使用<code>&gt;</code>、<code>&lt;</code> 进行数值比较时不需要转义，但是不支持<code>&gt;=</code>、<code>&lt;=</code></li><li class="lvl-10">2.支持<code>&amp;&amp;</code>和<code>||</code></li></ul>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 以下三种作用相同</span></span><br><span class="line">[[ <span class="variable">$a</span> &gt; 3 &amp;&amp; <span class="variable">$a</span> != 10 ]]</span><br><span class="line">[ <span class="variable">$a</span> &gt; 3 -a <span class="variable">$a</span> != 10 ]</span><br><span class="line">[ <span class="variable">$a</span> &gt; 3 ] &amp;&amp; [ <span class="variable">$a</span> != 10 ]</span><br></pre></td></tr></table></figure><ul class="lvl-4"><li class="lvl-10">3.<code>[[ ]]</code>在比较字符串时支持正则匹配和通配符匹配</li></ul>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 通配符匹配</span></span><br><span class="line">a=<span class="string">&quot;linux&quot;</span></span><br><span class="line">[[ <span class="variable">$a</span> == l?nu? ]] <span class="comment"># 0</span></span><br><span class="line">[[ <span class="variable">$a</span> != li* ]]   <span class="comment"># 1</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 正则匹配 `=~`</span></span><br><span class="line">a=<span class="string">&quot;linux&quot;</span></span><br><span class="line">[[ <span class="variable">$a</span> =~ ^li ]]</span><br><span class="line">[[ <span class="variable">$a</span> =~ ^li[abn]ux ]]</span><br></pre></td></tr></table></figure></li><li class="lvl-6"><code>(( ))</code> 用于条件判断时只能进行数值比较，运算符不需要转义，而且不支持<code>-lt</code>、<code>-gt</code>等等  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(( <span class="variable">$i</span> &lt;= 5 ))</span><br></pre></td></tr></table></figure></li></ul><div class="tips"><p><em><strong>小贴士</strong></em><br><code>(( ))</code>除了用于条件判断外，还有三种用法：<br>1.与<code>$</code>结合使用进行数学运算 : <code>$(( ))</code><br>2.在<code>for</code>循环命令中控制循环 : <code>for((i=1;i&lt;10;i++))</code><br>3.改变变量的值，且变量前不需要<code>$</code> : <code>((i++))</code></p></div></li><li class="lvl-2"><p>推荐在进行条件判断时使用<code>[[ ]]</code>，运算符不需要转义，而且支持正则</p></li></ul><h2 id="变量引用-与">变量引用: <code>$</code> 与 <code>$&#123; &#125;</code></h2><ul class="lvl-0"><li class="lvl-2"><p><code>$</code>与<code>$&#123; &#125;</code>都是用来引用变量的，<code>$&#123; &#125;</code>通常用于划定变量名的边界，当执行 <code>echo &quot;$aa&quot;</code>的时候系统会打印变量<code>$aa</code>的值，当执行<code>echo &quot;$&#123;a&#125;a&quot;</code>时打印的是<code>$&#123;a&#125;</code>和字母a，如果不需要为变量名划分边界的话，<code>$a</code>和<code>$&#123;a&#125;</code>是完全相等的。</p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">today=`<span class="built_in">date</span> <span class="string">&quot;+%Y-%m-%d&quot;</span>`</span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$today</span></span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$&#123;today&#125;</span>_now</span><br></pre></td></tr></table></figure><ul class="lvl-0"><li class="lvl-2"><p><code>$&#123; &#125;</code>还有一个重要的功能，就是文本处理:</p><ul class="lvl-2"><li class="lvl-6">1.获取字符串长度</li></ul>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">str=<span class="string">&#x27;hello&#x27;</span></span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$&#123;#str&#125;</span> <span class="comment"># 5</span></span><br></pre></td></tr></table></figure><ul class="lvl-2"><li class="lvl-6">2.字符串切片<code>$&#123;a:b:c&#125;</code>: 将字符串变量<code>a</code>从第<code>b</code>个位置开始向后截取<code>c</code>个字符，b是指下标，下标从0开始，<code>c</code>可以不指定，表示截取到字符串末尾</li></ul>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">a=<span class="string">&#x27;hello world!&#x27;</span></span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$&#123;a:0:5&#125;</span> <span class="comment"># hello</span></span><br><span class="line"><span class="comment"># 不指定c，表示从第6个字符开始截取到字符串末尾</span></span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$&#123;a:6&#125;</span> <span class="comment"># world!</span></span><br><span class="line"><span class="comment"># 截取从倒数第一个字符开始到字符串末尾的字符</span></span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$&#123;a:(-1)&#125;</span> <span class="comment"># !</span></span><br><span class="line"><span class="comment"># 截取从倒数第 6 个字符后的 5 个字符</span></span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$&#123;a:(-6):5&#125;</span> <span class="comment"># world</span></span><br></pre></td></tr></table></figure><ul class="lvl-2"><li class="lvl-6">3.替换字符串<code>$&#123;a/b/c&#125;</code>: 将变量<code>a</code>中的<code>b</code>全部替换为<code>c</code>，开头一个正斜杠为只匹配第一个字符串，两个正斜杠为匹配所有字符。</li></ul>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">a=<span class="string">&#x27;hello hello world&#x27;</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;<span class="variable">$&#123;a/hello/hi&#125;</span>&quot;</span> <span class="comment"># hi hello world</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;<span class="variable">$&#123;a//hello/hi&#125;</span>&quot;</span> <span class="comment"># hi hi world</span></span><br><span class="line"><span class="comment"># 支持正则</span></span><br><span class="line">str=123abc</span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$&#123;str//[^0-9]/&#125;</span> <span class="comment"># 123，将非数字替换为空</span></span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$&#123;str//[0-9]/&#125;</span> <span class="comment"># abc，将数字替换为空</span></span><br></pre></td></tr></table></figure><ul class="lvl-2"><li class="lvl-6">4.字符串截取</li></ul>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 格式：</span></span><br><span class="line"><span class="comment"># 删除匹配前缀</span></span><br><span class="line"><span class="variable">$&#123;parameter#word&#125;</span></span><br><span class="line"><span class="variable">$&#123;parameter##word&#125;</span></span><br><span class="line"><span class="comment"># 删除匹配后缀</span></span><br><span class="line"><span class="variable">$&#123;parameter%word&#125;</span></span><br><span class="line"><span class="variable">$&#123;parameter%%word&#125;</span></span><br><span class="line"><span class="comment"># 去掉左边，#最短匹配模式，##最长匹配模式。</span></span><br><span class="line">% 去掉右边，%最短匹配模式，%%最长匹配模式。</span><br><span class="line"></span><br><span class="line"><span class="comment"># 示例</span></span><br><span class="line">URL=<span class="string">&quot;http://www.baidu.com/baike/user.html&quot;</span></span><br><span class="line"><span class="comment"># 匹配http://，以//为分隔符截取出右边字符串</span></span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$&#123;URL#*//&#125;</span> <span class="comment"># www.baidu.com/baike/user.html</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 以/为分隔符截取右边字符串，##表示尽可能多的删除，保留最少内容</span></span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$&#123;URL##*/&#125;</span> <span class="comment"># user.html</span></span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$&#123;URL#*/&#125;</span>  <span class="comment"># /www.baidu.com/baike/user.html</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 以/为分隔符截取左边字符串，%%表示尽可能多的删除，即保留最少内容</span></span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$&#123;URL%%/*&#125;</span> <span class="comment"># http:</span></span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$&#123;URL%/*&#125;</span> <span class="comment"># http://www.baidu.com/baike</span></span><br></pre></td></tr></table></figure><ul class="lvl-2"><li class="lvl-6">5.变量状态赋值</li></ul>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 格式</span></span><br><span class="line"><span class="variable">$&#123;VAR:-string&#125;</span> <span class="comment"># 如果 VAR 变量为空则返回 string</span></span><br><span class="line"><span class="variable">$&#123;VAR:+string&#125;</span> <span class="comment"># 如果 VAR 变量不为空则返回 string</span></span><br><span class="line"><span class="variable">$&#123;VAR:=string&#125;</span> <span class="comment"># 如果 VAR 变量为空则重新赋值 VAR 变量值为 string</span></span><br><span class="line"><span class="variable">$&#123;VAR:?string&#125;</span> <span class="comment"># 如果 VAR 变量为空则将 string 输出到 stderr</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 示例</span></span><br><span class="line"><span class="comment"># 如果变量为空就返回 hello world!</span></span><br><span class="line">VAR=</span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$&#123;VAR:-&#x27;hello world!&#x27;&#125;</span> <span class="comment"># hello world!</span></span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$VAR</span> <span class="comment"># 空</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 如果变量不为空就返回 hello world!</span></span><br><span class="line">VAR=<span class="string">&quot;hello&quot;</span></span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$&#123;VAR:+&#x27;hello world!&#x27;&#125;</span> <span class="comment"># hello world!</span></span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$VAR</span> <span class="comment"># hello</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#如果变量为空就重新赋值：</span></span><br><span class="line">VAR=</span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$&#123;VAR:=hello&#125;</span> <span class="comment"># hello</span></span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$VAR</span> <span class="comment"># hello</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 如果变量为空就将信息输出 stderr</span></span><br><span class="line">VAR=</span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$&#123;VAR:?value is null&#125;</span> <span class="comment"># -bash: VAR: value is null</span></span><br></pre></td></tr></table></figure></li></ul>]]></content>
    
    
    <summary type="html">&lt;!--
 **加粗**
 *斜体*
 ***加粗并斜体***
 ~~删除线~~
 ==突出显示==
 `突出显示(推荐)`
 ++下划线++
 ~下标~
 ^上标^
 脚注，参考文献[^1]，然后在文档最下方要添加这个1对应的内容，如：[^1]: My reference.
 图片设置宽度和高度 ![](https://upic-oss.oss-cn-beijing.aliyuncs.com/uPic/innodb_buffer_pool.png =900x600)

 +++ **点击折叠**
 这是被隐藏的内容
 +++

::: tips success warning danger
这里是容器内的内容
:::

% note info % success warning danger
这里是容器内的内容
% endnote %

 --&gt;
&lt;h2 id=&quot;摘要&quot;&gt;摘要&lt;/h2&gt;
&lt;ul class=&quot;lvl-0&quot;&gt;
&lt;li class=&quot;lvl-2&quot;&gt;
&lt;p&gt;文本介绍linux编程中会用到的各种符号的使用方法&lt;/p&gt;
&lt;/li&gt;
&lt;li class=&quot;lvl-2&quot;&gt;
&lt;p&gt;特殊变量: $0、$?、$*、$@、$#、$$、$_、$!&lt;/p&gt;
&lt;/li&gt;
&lt;li class=&quot;lvl-2&quot;&gt;
&lt;p&gt;&amp;amp;和&amp;amp;&amp;amp;、|和||&lt;/p&gt;
&lt;/li&gt;
&lt;li class=&quot;lvl-2&quot;&gt;
&lt;p&gt;命令替换: $( ) 与 ``&lt;/p&gt;
&lt;/li&gt;
&lt;li class=&quot;lvl-2&quot;&gt;
&lt;p&gt;整数运算: $(( )) 与 $[ ]&lt;/p&gt;
&lt;/li&gt;
&lt;li class=&quot;lvl-2&quot;&gt;
&lt;p&gt;条件判断: (( ))、[ ]与[[ ]]&lt;/p&gt;
&lt;/li&gt;
&lt;li class=&quot;lvl-2&quot;&gt;
&lt;p&gt;变量引用: $ 与 ${ }&lt;/p&gt;
&lt;/li&gt;
&lt;li class=&quot;lvl-2&quot;&gt;
&lt;p&gt;本文基于&lt;code&gt;CentOS8(x86_64)&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;</summary>
    
    
    
    <category term="技术" scheme="https://blog.hanqunfeng.com/categories/%E6%8A%80%E6%9C%AF/"/>
    
    <category term="linux" scheme="https://blog.hanqunfeng.com/categories/%E6%8A%80%E6%9C%AF/linux/"/>
    
    <category term="linux常用命令" scheme="https://blog.hanqunfeng.com/categories/%E6%8A%80%E6%9C%AF/linux/linux%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/"/>
    
    
    <category term="linux常用命令" scheme="https://blog.hanqunfeng.com/tags/linux%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/"/>
    
  </entry>
  
  <entry>
    <title>Linux常用命令--shell编程</title>
    <link href="https://blog.hanqunfeng.com/2023/03/13/linux-command06-shell/"/>
    <id>https://blog.hanqunfeng.com/2023/03/13/linux-command06-shell/</id>
    <published>2023-03-13T13:30:05.000Z</published>
    <updated>2023-03-24T02:37:12.877Z</updated>
    
    <content type="html"><![CDATA[<!-- **加粗** *斜体* ***加粗并斜体*** ~~删除线~~ ==突出显示== `突出显示(推荐)` ++下划线++ ~下标~ ^上标^ 脚注，参考文献[^1]，然后在文档最下方要添加这个1对应的内容，如：[^1]: My reference. 图片设置宽度和高度 ![](https://upic-oss.oss-cn-beijing.aliyuncs.com/uPic/innodb_buffer_pool.png =900x600) +++ **点击折叠** 这是被隐藏的内容 +++::: tips success warning danger这里是容器内的内容:::% note info % success warning danger这里是容器内的内容% endnote %引用本地其它文章连接{} 大括号开始% post_link 文件名称(不包含.md) %大括号结束 --><h2 id="摘要">摘要</h2><ul class="lvl-0"><li class="lvl-2"><p>本文介绍shell编程的语法规则。</p></li><li class="lvl-2"><p>本文基于<code>CentOS8(x86_64)</code></p></li></ul><span id="more"></span><h2 id="文件头">文件头</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/sh :指定执行脚步的shell路径</span></span><br><span class="line"><span class="comment">#!/usr/bin/env bash :从env中查找指定的shell路径</span></span><br></pre></td></tr></table></figure><blockquote><p>如果没有为脚本设置文件头指定执行脚本的shell路径，则默认使用运行脚本的用户的shell</p></blockquote><h2 id="注释语法">注释语法</h2><ul class="lvl-0"><li class="lvl-2"><p><code>#</code> : 使用<code>#</code>进行单行注释，要讲某行注释，就在该行行首添加<code>#</code></p></li></ul><h2 id="特殊变量">特殊变量</h2><ul class="lvl-0"><li class="lvl-2"><p><code>$0</code> : 当前脚本的文件名（间接运行时还包括绝对路径）。</p></li><li class="lvl-2"><p><code>$n</code> : 传递给脚本或函数的参数。n 是一个数字，表示第几个参数。例如，第一个参数是 $1 。</p></li><li class="lvl-2"><p><code>$#</code> : 传递给脚本或函数的参数个数。</p></li><li class="lvl-2"><p><code>$*</code> : 传递给脚本或函数的所有参数。</p></li><li class="lvl-2"><p><code>$@</code> : 传递给脚本或函数的所有参数。被双引号 <code>&quot;$@&quot;</code> 包含时，与 <code>&quot;$*&quot;</code> 不同，下面将会讲到。</p></li><li class="lvl-2"><p><code>$?</code> : 上个命令的退出状态(0:success 非0:error)，或函数的返回值。</p></li><li class="lvl-2"><p><code>$$</code> : 当前 Shell 进程 ID。对于 Shell 脚本，就是这些脚本所在的进程 ID。</p></li><li class="lvl-2"><p><code>$_</code> : 上一个命令的最后一个参数</p></li><li class="lvl-2"><p><code>$!</code> : 后台运行的最后一个进程的 ID 号</p></li></ul><div class="tips"><p><em><strong>小贴士</strong></em><br><code>$*</code> 和 <code>$@</code> 都表示传递给函数或脚本的所有参数，不被双引号 <code>&quot;&quot;</code> 包含时，都以独立个体<code>&quot;$1&quot; &quot;$2&quot; … &quot;$n&quot;</code> 的形式输出所有参数。<br>但是当它们被双引号 <code>&quot;&quot;</code> 包含时，<code>&quot;$*&quot;</code>会将所有的参数作为一个整体输出，<code>&quot;$@&quot;</code>依旧会以独立个体<code>&quot;$1&quot; &quot;$2&quot; … &quot;$n&quot;</code> 的形式输出所有参数。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># $*</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> $*</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$i</span></span><br><span class="line"><span class="keyword">done</span></span><br><span class="line"><span class="comment"># sh test.sh 1 2 3 4，此时输出</span></span><br><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line"></span><br><span class="line"><span class="comment"># &quot;$*&quot;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="string">&quot;$*&quot;</span></span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="variable">$i</span></span><br><span class="line"><span class="keyword">done</span></span><br><span class="line"><span class="comment"># sh test.sh 1 2 3 4，此时输出</span></span><br><span class="line">1 2 3 4</span><br><span class="line"></span><br><span class="line"><span class="comment"># $@</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="variable">$@</span></span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="variable">$i</span></span><br><span class="line"><span class="keyword">done</span></span><br><span class="line"><span class="comment"># sh test.sh 1 2 3 4，此时输出</span></span><br><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line"></span><br><span class="line"><span class="comment"># &quot;$@&quot;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="string">&quot;<span class="variable">$@</span>&quot;</span></span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="variable">$i</span></span><br><span class="line"><span class="keyword">done</span></span><br><span class="line"><span class="comment"># sh test.sh 1 2 3 4，此时输出</span></span><br><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td></tr></table></figure><p>获取参数数量：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">paramSize=<span class="variable">$&#123;#@&#125;</span></span><br></pre></td></tr></table></figure></div><h2 id="自定义变量">自定义变量</h2><h3 id="字符串">字符串</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 定义一个字符串变量</span></span><br><span class="line">s1=<span class="string">&quot;content&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 定义一个变量接收之前定义过的变量，使用变量时需要使用 $+变量名称</span></span><br><span class="line">s2=<span class="variable">$s1</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 定义一个变量为之前定义过的变量与其它字符串的组合，此时可以使用 &#123;&#125; 将变量名称括起来以避免歧义</span></span><br><span class="line">s3=<span class="string">&quot;<span class="variable">$&#123;s1&#125;</span>_test&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 定义一个变量接收日期字符串，``括起来的内容会优先执行，并把结果赋值给变量</span></span><br><span class="line">s4=`<span class="built_in">date</span> +%F<span class="string">&#x27; &#x27;</span>%T`</span><br><span class="line">now=`<span class="built_in">date</span> +%Y%m%d_%H%M%S`</span><br></pre></td></tr></table></figure><div class="tips"><p><em><strong>小贴士</strong></em><br><code>$</code>与<code>$&#123; &#125;</code>都是用来引用变量的，<code>$&#123; &#125;</code>通常用于划定变量名的边界<br>当执行 <code>echo &quot;$aa&quot;</code>的时候系统会打印变量<code>$aa</code>的值，当执行<code>echo &quot;$&#123;a&#125;a&quot;</code>时打印的是<code>$&#123;a&#125;</code>和字母a，如果不需要为变量名划分边界的话，<code>$a</code>和<code>$&#123;a&#125;</code>是完全相等的。<br>除此之外，<code>$&#123; &#125;</code>还有一个重要的功能，就是文本处理:</p><ul class="lvl-1"><li class="lvl-2">1.获取字符串长度</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">str=<span class="string">&#x27;hello&#x27;</span></span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$&#123;#str&#125;</span> <span class="comment"># 5</span></span><br></pre></td></tr></table></figure><ul class="lvl-1"><li class="lvl-2">2.字符串切片<code>$&#123;a:b:c&#125;</code>: 将字符串变量<code>a</code>从第<code>b</code>个位置开始向后截取<code>c</code>个字符，b是指下标，下标从0开始，<code>c</code>可以不指定，表示截取到字符串末尾</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">a=<span class="string">&#x27;hello world!&#x27;</span></span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$&#123;a:0:5&#125;</span> <span class="comment"># hello</span></span><br><span class="line"><span class="comment"># 不指定c，表示从第6个字符开始截取到字符串末尾</span></span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$&#123;a:6&#125;</span> <span class="comment"># world!</span></span><br><span class="line"><span class="comment"># 截取从倒数第一个字符开始到字符串末尾的字符</span></span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$&#123;a:(-1)&#125;</span> <span class="comment"># !</span></span><br><span class="line"><span class="comment"># 截取从倒数第 6 个字符后的 5 个字符</span></span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$&#123;a:(-6):5&#125;</span> <span class="comment"># world</span></span><br></pre></td></tr></table></figure><ul class="lvl-1"><li class="lvl-2">3.替换字符串<code>$&#123;a/b/c&#125;</code>: 将变量<code>a</code>中的<code>b</code>全部替换为<code>c</code>，开头一个正斜杠为只匹配第一个字符串，两个正斜杠为匹配所有字符。</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">a=<span class="string">&#x27;hello hello world&#x27;</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;<span class="variable">$&#123;a/hello/hi&#125;</span>&quot;</span> <span class="comment"># hi hello world</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;<span class="variable">$&#123;a//hello/hi&#125;</span>&quot;</span> <span class="comment"># hi hi world</span></span><br><span class="line"><span class="comment"># 支持正则</span></span><br><span class="line">str=123abc</span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$&#123;str//[^0-9]/&#125;</span> <span class="comment"># 123，将非数字替换为空</span></span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$&#123;str//[0-9]/&#125;</span> <span class="comment"># abc，将数字替换为空</span></span><br></pre></td></tr></table></figure><ul class="lvl-1"><li class="lvl-2">4.字符串截取</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 格式：</span></span><br><span class="line"><span class="comment"># 删除匹配前缀</span></span><br><span class="line"><span class="variable">$&#123;parameter#word&#125;</span></span><br><span class="line"><span class="variable">$&#123;parameter##word&#125;</span></span><br><span class="line"><span class="comment"># 删除匹配后缀</span></span><br><span class="line"><span class="variable">$&#123;parameter%word&#125;</span></span><br><span class="line"><span class="variable">$&#123;parameter%%word&#125;</span></span><br><span class="line"><span class="comment"># 去掉左边，#最短匹配模式，##最长匹配模式。</span></span><br><span class="line">% 去掉右边，%最短匹配模式，%%最长匹配模式。</span><br><span class="line"></span><br><span class="line"><span class="comment"># 示例</span></span><br><span class="line">URL=<span class="string">&quot;http://www.baidu.com/baike/user.html&quot;</span></span><br><span class="line"><span class="comment"># 匹配http://，以//为分隔符截取出右边字符串</span></span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$&#123;URL#*//&#125;</span> <span class="comment"># www.baidu.com/baike/user.html</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 以/为分隔符截取右边字符串，##表示尽可能多的删除，保留最少内容</span></span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$&#123;URL##*/&#125;</span> <span class="comment"># user.html</span></span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$&#123;URL#*/&#125;</span>  <span class="comment"># /www.baidu.com/baike/user.html</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 以/为分隔符截取左边字符串，%%表示尽可能多的删除，即保留最少内容</span></span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$&#123;URL%%/*&#125;</span> <span class="comment"># http:</span></span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$&#123;URL%/*&#125;</span> <span class="comment"># http://www.baidu.com/baike</span></span><br></pre></td></tr></table></figure><ul class="lvl-1"><li class="lvl-2">5.变量状态赋值</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 格式</span></span><br><span class="line"><span class="variable">$&#123;VAR:-string&#125;</span> <span class="comment"># 如果 VAR 变量为空则返回 string</span></span><br><span class="line"><span class="variable">$&#123;VAR:+string&#125;</span> <span class="comment"># 如果 VAR 变量不为空则返回 string</span></span><br><span class="line"><span class="variable">$&#123;VAR:=string&#125;</span> <span class="comment"># 如果 VAR 变量为空则重新赋值 VAR 变量值为 string</span></span><br><span class="line"><span class="variable">$&#123;VAR:?string&#125;</span> <span class="comment"># 如果 VAR 变量为空则将 string 输出到 stderr</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 示例</span></span><br><span class="line"><span class="comment"># 如果变量为空就返回 hello world!</span></span><br><span class="line">VAR=</span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$&#123;VAR:-&#x27;hello world!&#x27;&#125;</span> <span class="comment"># hello world!</span></span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$VAR</span> <span class="comment"># 空</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 如果变量不为空就返回 hello world!</span></span><br><span class="line">VAR=<span class="string">&quot;hello&quot;</span></span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$&#123;VAR:+&#x27;hello world!&#x27;&#125;</span> <span class="comment"># hello world!</span></span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$VAR</span> <span class="comment"># hello</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#如果变量为空就重新赋值：</span></span><br><span class="line">VAR=</span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$&#123;VAR:=hello&#125;</span> <span class="comment"># hello</span></span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$VAR</span> <span class="comment"># hello</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 如果变量为空就将信息输出 stderr</span></span><br><span class="line">VAR=</span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$&#123;VAR:?value is null&#125;</span> <span class="comment"># -bash: VAR: value is null</span></span><br></pre></td></tr></table></figure></div><h3 id="数字">数字</h3><ul class="lvl-0"><li class="lvl-2"><p>整数运算</p><blockquote><p>支持<code>let</code>、<code>$(( ))</code>、<code>$[ ]</code>和<code>expr</code>四种方式</p></blockquote>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 定义一个数字</span></span><br><span class="line">a1=10</span><br><span class="line"></span><br><span class="line"><span class="comment"># 进行数字运算时，可以使用以下是几种运算方式中的一种</span></span><br><span class="line"><span class="comment"># 加法和减法</span></span><br><span class="line">a2=$((<span class="variable">$a1</span> + <span class="number">5</span>)) or a2=$((a1 + <span class="number">5</span>))</span><br><span class="line">a3=$[<span class="variable">$a1</span> + 5] or a3=$[a1 + 5]</span><br><span class="line"><span class="comment"># expr 要求运算符之间要有空格</span></span><br><span class="line">a4=`<span class="built_in">expr</span> <span class="variable">$a1</span> - 5` or a4=$(<span class="built_in">expr</span> <span class="variable">$a1</span> - 5)</span><br><span class="line"><span class="comment"># let在引用变量时不需要$，另外运算符之间不能有空格</span></span><br><span class="line"><span class="built_in">let</span> a5=a1-5</span><br><span class="line"></span><br><span class="line"><span class="comment"># 乘法，注意使用expr方式时，* 要转义，</span></span><br><span class="line">a2=$((a1 * <span class="number">5</span>))</span><br><span class="line">a3=$[a1 * 5]</span><br><span class="line"><span class="comment"># expr 要求运算符之间要有空格</span></span><br><span class="line">a4=`<span class="built_in">expr</span> <span class="variable">$a1</span> \* 5`</span><br><span class="line"><span class="comment"># let在引用变量时不需要$，另外运算符之间不能有空格</span></span><br><span class="line"><span class="built_in">let</span> a5=a1*5</span><br><span class="line"></span><br><span class="line"><span class="comment"># 除法</span></span><br><span class="line">a2=$((a1 / <span class="number">5</span>))</span><br><span class="line">a3=$[a1 / 5]</span><br><span class="line"><span class="comment"># expr 要求运算符之间要有空格</span></span><br><span class="line">a4=`<span class="built_in">expr</span> <span class="variable">$a1</span> / 5`</span><br><span class="line"><span class="comment"># let在引用变量时不能有$，运算符之间不能有空格</span></span><br><span class="line"><span class="built_in">let</span> a5=a1/5</span><br></pre></td></tr></table></figure><blockquote><p><code>let</code>、<code>$(( ))</code>或<code>$[ ]</code>中的变量都可以不加<code>$</code>前缀<br>在进行整数运算时，<code>$(( ))</code>和<code>$[ ]</code>的作用是等价的<br>建议使用<code>let</code>、<code>$(( ))</code>或<code>$[ ]</code>的形式进行运算，其支持正常的运算逻辑，expr稍显笨拙，比如在进行带括号的运算时</p></blockquote>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">a2=$(((a1 - <span class="number">5</span>) * <span class="number">5</span>))</span><br><span class="line">a3=$[(a1 - 5) * 5]</span><br><span class="line"></span><br><span class="line"><span class="comment"># expr 要求运算符之间要有空格</span></span><br><span class="line"><span class="comment"># expr需要分开独立计算</span></span><br><span class="line">a4_1=`<span class="built_in">expr</span> <span class="variable">$a1</span> - 5`</span><br><span class="line">a4_2=`<span class="built_in">expr</span> <span class="variable">$&#123;a4_1&#125;</span> \* 5`</span><br><span class="line"><span class="comment"># let在引用变量时不需要$，另外运算符之间不能有空格</span></span><br><span class="line"><span class="built_in">let</span> a5=(a1-5)*5</span><br></pre></td></tr></table></figure><div class="tips"><p><em><strong>小贴士</strong></em><br><code>$()</code>和 `` 的作用一致，都是用来做命令替换用，一般用于将命令返回的结果传递给变量</p></div></li><li class="lvl-2"><p>浮点数计算</p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">x=10</span><br><span class="line">y=3.211</span><br><span class="line">a1=`<span class="built_in">echo</span> <span class="string">&quot;<span class="variable">$x</span> * 2 / <span class="variable">$y</span>&quot;</span> | bc`  <span class="comment"># a1为6</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># scale=2 保留两位小数，相当于截断不会四舍五入</span></span><br><span class="line">a2=`<span class="built_in">echo</span> <span class="string">&quot;scale=2; <span class="variable">$x</span> * 2 / <span class="variable">$y</span>&quot;</span> | bc` <span class="comment"># a2为6.22</span></span><br><span class="line"><span class="comment"># awk的计算会四舍五入</span></span><br><span class="line">a2=`<span class="built_in">echo</span> <span class="string">&quot;<span class="variable">$x</span> <span class="variable">$y</span>&quot;</span> | awk <span class="string">&#x27;&#123;printf &quot;%.2f\n&quot;,$1*2/$2&#125;&#x27;</span>` <span class="comment">#a2为6.23</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># bc运算时，整数位小于1不会显示</span></span><br><span class="line">a3=`<span class="built_in">echo</span> <span class="string">&quot;scale=2;  2 / 3&quot;</span> | bc` <span class="comment"># a3为.66，不会显示为0.66</span></span><br><span class="line"><span class="comment"># awk可以正确显示</span></span><br><span class="line">a3=`<span class="built_in">echo</span> 2 3 | awk <span class="string">&#x27;&#123;printf &quot;%.2f\n&quot;,$1/$2&#125;&#x27;</span>` <span class="comment">#a3为0.67</span></span><br></pre></td></tr></table></figure><blockquote><p><code>awk</code> 的计算方式比 <code>bc</code> 更好一些，支持精度更为准确<br><code>bc</code>和<code>awk</code>的计算方式同样支持整数</p></blockquote><h3 id="数组">数组</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#使用小括号定义数组，(元素之间用空格分隔)</span></span><br><span class="line">array=(Zero One Two Three)</span><br><span class="line"><span class="comment"># 打印数组长度</span></span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$&#123;#array[@]&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 遍历数组</span></span><br><span class="line"><span class="comment"># while遍历</span></span><br><span class="line">i=0</span><br><span class="line"><span class="keyword">while</span> [ <span class="variable">$i</span> -lt <span class="variable">$&#123;#array[@]&#125;</span> ];<span class="keyword">do</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="variable">$&#123;array[$i]&#125;</span></span><br><span class="line">    <span class="built_in">let</span> i=i+1</span><br><span class="line"><span class="keyword">done</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># for遍历</span></span><br><span class="line"><span class="keyword">for</span>((i=0;i&lt;<span class="variable">$&#123;#array[@]&#125;</span>;i++))</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="variable">$&#123;array[i]&#125;</span></span><br><span class="line"><span class="keyword">done</span></span><br></pre></td></tr></table></figure><h3 id="从键盘设置变量-read">从键盘设置变量:read</h3><ul class="lvl-0"><li class="lvl-2"><p>read命令格式</p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">read</span> [选项] [变量名]</span><br><span class="line">    选项：</span><br><span class="line">    -p “提示信息”：在等待<span class="built_in">read</span>输入时，输出提示信息</span><br><span class="line">    -t “秒数”： <span class="built_in">read</span>命令会一致等待用户输入，使用此选项可以指定等待时间</span><br><span class="line">    -n “字符数”： <span class="built_in">read</span>命令只接受指定的字符数，就会执行</span><br><span class="line">    -s： 隐藏输入的数据，适用于机密信息的输入</span><br></pre></td></tr></table></figure><ul class="lvl-0"><li class="lvl-2"><p>示例</p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">read</span> a <span class="comment"># 此时会等待用户键入变量值，比如此时输入: 3</span></span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$a</span> <span class="comment"># 3</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">read</span> -t 30 -p <span class="string">&quot;Please input your username:&quot;</span> username</span><br><span class="line"><span class="built_in">read</span> -s -t 30 -p <span class="string">&quot;Please input your passsword:&quot;</span> password</span><br><span class="line"></span><br><span class="line"><span class="built_in">read</span> a b c <span class="comment"># 可以设置多个变量，比如此时输入: 1 2 3</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;<span class="variable">$&#123;a&#125;</span>_<span class="variable">$&#123;b&#125;</span>_<span class="variable">$&#123;c&#125;</span>&quot;</span> <span class="comment"># 1_2_3</span></span><br></pre></td></tr></table></figure><h2 id="test命令"><code>test</code>命令</h2><ul class="lvl-0"><li class="lvl-2"><p><code>test</code>作用检查某个条件是否成立，返回值为<code>0</code>（真）或者其他值（假），可通过<code>echo $?</code>查看返回值，也常用于循环和条件语句。</p></li><li class="lvl-2"><p><code>test</code>一般有三种用法：</p><blockquote><p>测试文件或者文件夹是否存在<br>字符串比较<br>数值比较</p></blockquote></li></ul><h3 id="测试文件或者文件夹是否存在">测试文件或者文件夹是否存在</h3><ul class="lvl-0"><li class="lvl-2"><p>参数说明</p></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">-d dir :是否为目录，是目录为真</span><br><span class="line">-f file :是否为常规文件，是文件为真</span><br><span class="line">-x file/dir :是否可执行，可执行为真</span><br><span class="line">-r file/dir :是否可读，可读为真</span><br><span class="line">-w file/dir :是否可写，可写为真</span><br><span class="line">-a file/dir :文件或目录是否存在，存在为真</span><br><span class="line">-e file/dir :文件或目录是否存在，存在为真</span><br><span class="line">-s file :文件大小是否非0，非0为真</span><br></pre></td></tr></table></figure><ul class="lvl-0"><li class="lvl-2"><p>示例</p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">test</span> -f test.sh</span><br><span class="line">$ <span class="built_in">echo</span> $?</span><br><span class="line"></span><br><span class="line">$ <span class="built_in">test</span> -d <span class="built_in">dir</span></span><br><span class="line">$ <span class="built_in">echo</span> $?</span><br></pre></td></tr></table></figure><h3 id="字符串比较">字符串比较</h3><ul class="lvl-0"><li class="lvl-2"><p>参数说明</p></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">参数    说明</span><br><span class="line">-z      当str为空时返回真</span><br><span class="line">-n    当str为非空时返回真</span><br><span class="line">=    两个字符串相等时返回真</span><br><span class="line">==    两个字符串相等时返回真，同=</span><br><span class="line">!=    两个字符串不相等时返回真</span><br></pre></td></tr></table></figure><ul class="lvl-0"><li class="lvl-2"><p>示例</p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">test</span> -z <span class="string">&#x27;&#x27;</span></span><br><span class="line">$ <span class="built_in">echo</span> $?  <span class="comment"># 输出0</span></span><br><span class="line"></span><br><span class="line">$ <span class="built_in">test</span> -n <span class="string">&#x27;hello&#x27;</span></span><br><span class="line">$ <span class="built_in">echo</span> $?  <span class="comment"># 输出0</span></span><br><span class="line"></span><br><span class="line">$ <span class="built_in">test</span> <span class="string">&#x27;hello&#x27;</span> == <span class="string">&#x27;world&#x27;</span></span><br><span class="line">$ <span class="built_in">echo</span> $?  <span class="comment"># 输出1</span></span><br><span class="line"></span><br><span class="line">$ <span class="built_in">test</span> <span class="string">&#x27;hello&#x27;</span> != <span class="string">&#x27;world&#x27;</span></span><br><span class="line">$ <span class="built_in">echo</span> $?  <span class="comment"># 输出0</span></span><br></pre></td></tr></table></figure><h3 id="数值比较">数值比较</h3><ul class="lvl-0"><li class="lvl-2"><p>参数说明，使用<code>&gt;</code>、<code>&lt;</code>等运算符时需要转义 <code>\&gt;</code>、<code>\&lt;</code>，或者使用如下参数替换对应的运算符</p></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">参数    说明</span><br><span class="line">-eq    等于时返回真 ==</span><br><span class="line">-ne    不等于时返回真 !=</span><br><span class="line">-lt    小于时返回真 &lt;</span><br><span class="line">-le    小于等于时返回真 &lt;=</span><br><span class="line">-gt    大于时返回真 &gt;</span><br><span class="line">-ge    大于等于时返回真 &gt;=</span><br></pre></td></tr></table></figure><ul class="lvl-0"><li class="lvl-2"><p>示例</p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">test</span> 1 -lt 2</span><br><span class="line">$ <span class="built_in">echo</span> $?  <span class="comment"># 输出0</span></span><br></pre></td></tr></table></figure><h3 id="逻辑运算">逻辑运算</h3><ul class="lvl-0"><li class="lvl-2"><p>参数说明</p></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">参数  说明</span><br><span class="line">-a    逻辑与，二者都为真则为真</span><br><span class="line">-o    逻辑或，二者任意一个为真则为真</span><br><span class="line">!    逻辑非</span><br></pre></td></tr></table></figure><ul class="lvl-0"><li class="lvl-2"><p>示例</p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">test</span> ! -e test.sh</span><br><span class="line">$ <span class="built_in">echo</span> $?</span><br><span class="line"></span><br><span class="line">$ <span class="built_in">test</span> -f test.sh -a -d <span class="built_in">dir</span></span><br><span class="line">$ <span class="built_in">echo</span> $?</span><br></pre></td></tr></table></figure><h3 id="shell中的用法">shell中的用法</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">i=<span class="variable">$1</span></span><br><span class="line"><span class="keyword">if</span> <span class="built_in">test</span> <span class="variable">$i</span> -lt 5;<span class="keyword">then</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&quot;<span class="variable">$i</span> &lt; 5&quot;</span></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&quot;<span class="variable">$i</span> &gt;= 5&quot;</span></span><br><span class="line"><span class="keyword">fi</span></span><br></pre></td></tr></table></figure><h2 id="条件判断">条件判断</h2><ul class="lvl-0"><li class="lvl-2"><p>在使用<code>if</code>或<code>while</code>等语句时，需要进行条件判断，上面我们已经见到一个<code>while</code>的例子，其使用<code>[ ]</code>来定义条件判断</p></li><li class="lvl-2"><p>实际上除了<code>[ ]</code>以外，我们还可以使用<code>test</code>、<code>(( ))</code>和<code>[[ ]]</code>来进行条件判断，那么他们之间有什么区别吗？</p><ul class="lvl-2"><li class="lvl-6"><code>[ ]</code>是<code>test</code>命令的另一种形式，例如 <code>test a == b</code> 等同于 <code>[ a == b ]</code>，注意 <code>[</code> 后和 <code>]</code> 前都需要有空格，并且<code>==</code>两边也都要有空格</li></ul>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">test</span> <span class="string">&#x27;hello&#x27;</span> != <span class="string">&#x27;world&#x27;</span> ==&gt;  [ <span class="string">&#x27;hello&#x27;</span> != <span class="string">&#x27;world&#x27;</span> ]</span><br><span class="line"><span class="built_in">test</span> ! -e test.sh       ==&gt;  [ ! -e test.sh ]</span><br><span class="line"><span class="built_in">test</span> <span class="variable">$i</span> -lt 5           ==&gt;  [ <span class="variable">$i</span> -lt 5 ]</span><br></pre></td></tr></table></figure><ul class="lvl-2"><li class="lvl-6"><code>[[ ]]</code>是<code>[ ]</code>的增强版，其在如下几个方面进行了增强:<ul class="lvl-4"><li class="lvl-10">1.在<code>[[ ]]</code>中使用<code>&gt;</code>、<code>&lt;</code> 进行数值比较时不需要转义，但是不支持<code>&gt;=</code>、<code>&lt;=</code></li><li class="lvl-10">2.支持<code>&amp;&amp;</code>和<code>||</code></li></ul>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 以下三种作用相同</span></span><br><span class="line">[[ <span class="variable">$a</span> &gt; 3 &amp;&amp; <span class="variable">$a</span> != 10 ]]</span><br><span class="line">[ <span class="variable">$a</span> &gt; 3 -a <span class="variable">$a</span> != 10 ]</span><br><span class="line">[ <span class="variable">$a</span> &gt; 3 ] &amp;&amp; [ <span class="variable">$a</span> != 10 ]</span><br></pre></td></tr></table></figure><ul class="lvl-4"><li class="lvl-10">3.<code>[[ ]]</code>在比较字符串时支持正则匹配和通配符匹配</li></ul>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 通配符匹配</span></span><br><span class="line">a=<span class="string">&quot;linux&quot;</span></span><br><span class="line">[[ <span class="variable">$a</span> == l?nu? ]] <span class="comment"># 0</span></span><br><span class="line">[[ <span class="variable">$a</span> != li* ]]   <span class="comment"># 1</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 正则匹配 `=~`</span></span><br><span class="line">a=<span class="string">&quot;linux&quot;</span></span><br><span class="line">[[ <span class="variable">$a</span> =~ ^li ]]</span><br><span class="line">[[ <span class="variable">$a</span> =~ ^li[abn]ux ]]</span><br></pre></td></tr></table></figure></li><li class="lvl-6"><code>(( ))</code> 用于条件判断时只能进行数值比较，运算符不需要转义，而且不支持<code>-lt</code>、<code>-gt</code>等等  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(( <span class="variable">$i</span> &lt;= 5 ))</span><br></pre></td></tr></table></figure></li></ul><div class="tips"><p><em><strong>小贴士</strong></em><br><code>(( ))</code>除了用于条件判断外，还有三种用法：<br>1.与<code>$</code>结合使用进行数学运算 : <code>$(( ))</code><br>2.在<code>for</code>循环命令中控制循环 : <code>for((i=1;i&lt;10;i++))</code><br>3.改变变量的值，且变量前不需要<code>$</code> : <code>((i++))</code></p></div></li><li class="lvl-2"><p>推荐在进行条件判断时使用<code>[[ ]]</code>，运算符不需要转义，而且支持正则</p></li></ul><h2 id="流程控制语句">流程控制语句</h2><h3 id="if语句"><code>if</code>语句</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 语法1</span></span><br><span class="line"><span class="comment"># 因为多个语句写在同一行，所以要用;隔开</span></span><br><span class="line"><span class="keyword">if</span> [[ -d <span class="variable">$path</span> ]];<span class="keyword">then</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&quot;dir&quot;</span></span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"><span class="comment"># 其实也可以这样写</span></span><br><span class="line"><span class="keyword">if</span> [[ -d <span class="variable">$path</span> ]]</span><br><span class="line"><span class="keyword">then</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&quot;dir&quot;</span></span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 语法2</span></span><br><span class="line"><span class="keyword">if</span> [[ -d <span class="variable">$path</span> ]];<span class="keyword">then</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&quot;dir&quot;</span></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&quot;not dir&quot;</span></span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 语法3</span></span><br><span class="line"><span class="keyword">if</span> [[ -d <span class="variable">$path</span> ]];<span class="keyword">then</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&quot;dir&quot;</span></span><br><span class="line"><span class="keyword">elif</span> [[ -f <span class="variable">$path</span> ]];<span class="keyword">then</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&quot;file&quot;</span></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&quot;not match&quot;</span></span><br><span class="line"><span class="keyword">fi</span></span><br></pre></td></tr></table></figure><ul class="lvl-0"><li class="lvl-2"><p>示例</p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 判断参数个数是否正确，只允许输入一个参数</span></span><br><span class="line">paramSize=<span class="variable">$&#123;#@&#125;</span></span><br><span class="line"><span class="keyword">if</span> [[ <span class="variable">$paramSize</span> == 0 || <span class="variable">$paramSize</span> &gt; 1  ]];<span class="keyword">then</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&quot;ERROR:需要一个参数!!!&quot;</span></span><br><span class="line">    <span class="built_in">exit</span> 1</span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 判断参数是否为大于0的数字</span></span><br><span class="line"><span class="keyword">if</span> [ <span class="string">&quot;<span class="variable">$1</span>&quot;</span> -gt 0 ] 2&gt;/dev/null ;<span class="keyword">then</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&quot;<span class="variable">$1</span> id number&quot;</span></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&quot;ERROR: <span class="variable">$1</span> is not number!&quot;</span></span><br><span class="line">    <span class="built_in">exit</span> 1</span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 判断参数是否为整数数字，包含正整数，0，负整数</span></span><br><span class="line"><span class="built_in">expr</span> <span class="variable">$1</span> <span class="string">&quot;+&quot;</span> 0 &amp;&gt; /dev/null</span><br><span class="line"><span class="keyword">if</span> [[ $? == 0 || <span class="variable">$1</span> == 0 ]];<span class="keyword">then</span></span><br><span class="line">  <span class="built_in">echo</span> <span class="string">&quot;<span class="variable">$1</span> is number&quot;</span></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">  <span class="built_in">echo</span> <span class="string">&quot;<span class="variable">$1</span> not number&quot;</span></span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 如果导出文件已经存在则先删除</span></span><br><span class="line"><span class="keyword">if</span> [[ -a <span class="variable">$bookId</span>.tar.gz ]];<span class="keyword">then</span></span><br><span class="line">    <span class="built_in">rm</span> -rf <span class="variable">$bookId</span>.tar.gz</span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 判断字符串是否不为空</span></span><br><span class="line"><span class="keyword">if</span> [[ -n <span class="variable">$str</span> ]];<span class="keyword">then</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&quot;<span class="variable">$str</span> is not null&quot;</span></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&quot;<span class="variable">$str</span> is null&quot;</span></span><br><span class="line"><span class="keyword">fi</span></span><br></pre></td></tr></table></figure><h3 id="case语句"><code>case</code>语句</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">case</span> <span class="string">&quot;<span class="variable">$1</span>&quot;</span> <span class="keyword">in</span></span><br><span class="line">start)</span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&quot;start&quot;</span></span><br><span class="line">;;</span><br><span class="line">reload)</span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&quot;reload&quot;</span></span><br><span class="line">;;</span><br><span class="line">stop)</span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&quot;stop&quot;</span></span><br><span class="line">;;</span><br><span class="line">status)</span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&quot;status&quot;</span></span><br><span class="line">;;</span><br><span class="line">*)</span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&quot;<span class="variable">$0</span>: Usage: &#123;start|status|stop|reload&#125;&quot;</span></span><br><span class="line">    <span class="comment"># 非0，非正常退出，exit 0 :正常退出</span></span><br><span class="line">    <span class="built_in">exit</span> 1</span><br><span class="line">;;</span><br><span class="line"><span class="keyword">esac</span></span><br></pre></td></tr></table></figure><h3 id="select语句"><code>select</code>语句</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># select.sh</span></span><br><span class="line">select var <span class="keyword">in</span> <span class="string">&quot;Linux&quot;</span> <span class="string">&quot;UNIX&quot;</span> <span class="string">&quot;Windows&quot;</span> <span class="string">&quot;Other&quot;</span></span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&quot;You have selected <span class="variable">$var</span>&quot;</span></span><br><span class="line">    <span class="comment"># 跳出循环</span></span><br><span class="line">    <span class="built_in">break</span></span><br><span class="line"><span class="keyword">done</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 运行</span></span><br><span class="line">$ sh select.sh</span><br><span class="line">1) Linux</span><br><span class="line">2) UNIX</span><br><span class="line">3) Windows</span><br><span class="line">4) Other</span><br><span class="line"><span class="comment">#? 2 # 输入2，表示选择第二个</span></span><br><span class="line">You have selected UNIX</span><br></pre></td></tr></table></figure><h3 id="while循环语句"><code>while</code>循环语句</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">a=0</span><br><span class="line"><span class="keyword">while</span> [[ <span class="variable">$a</span> &lt; 5 ]]</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="variable">$a</span></span><br><span class="line">    ((a++))</span><br><span class="line"><span class="keyword">done</span></span><br></pre></td></tr></table></figure><h3 id="until循环语句"><code>until</code>循环语句</h3><ul class="lvl-0"><li class="lvl-2"><p>类似<code>while</code>，不同点是条件判断为假时才执行</p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">a=5</span><br><span class="line"><span class="comment"># 不满足条件时执行</span></span><br><span class="line">until [[ <span class="variable">$a</span> == 0 ]]</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="variable">$a</span></span><br><span class="line">    ((a--))</span><br><span class="line"><span class="keyword">done</span></span><br></pre></td></tr></table></figure><h3 id="for循环语句"><code>for</code>循环语句</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 语法1</span></span><br><span class="line"><span class="keyword">for</span>((i=0;i&lt;=10;i++))</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="variable">$i</span></span><br><span class="line"><span class="keyword">done</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 语法2</span></span><br><span class="line"><span class="comment"># 使用&#123;&#125;和seq生成序列</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> &#123;1..9&#125;   <span class="comment"># 1 2 3 4 5 6 7 8 9</span></span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&quot;this is <span class="variable">$i</span>&quot;</span></span><br><span class="line"><span class="keyword">done</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> &#123;1..9..2&#125;   <span class="comment"># 1 3 5 7 9</span></span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&quot;this is <span class="variable">$i</span>&quot;</span></span><br><span class="line"><span class="keyword">done</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> `<span class="built_in">seq</span> 1 9` <span class="comment"># 1 2 3 4 5 6 7 8 9</span></span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&quot;this is <span class="variable">$i</span>&quot;</span></span><br><span class="line"><span class="keyword">done</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> `<span class="built_in">seq</span> 1 2 9` <span class="comment"># 1 3 5 7 9</span></span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&quot;this is <span class="variable">$i</span>&quot;</span></span><br><span class="line"><span class="keyword">done</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 直接列出要遍历的项</span></span><br><span class="line"><span class="keyword">for</span> day <span class="keyword">in</span> Sun Mon Tue Wed Thu Fri Sat</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&quot;The day is : <span class="variable">$day</span>&quot;</span></span><br><span class="line"><span class="keyword">done</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 将命令执行结果作为要遍历的内容</span></span><br><span class="line"><span class="keyword">for</span> line <span class="keyword">in</span> `<span class="built_in">cat</span> file`</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="variable">$line</span></span><br><span class="line"><span class="keyword">done</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 遍历所有参数</span></span><br><span class="line"><span class="keyword">for</span> p <span class="keyword">in</span> <span class="variable">$@</span></span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="variable">$p</span></span><br><span class="line"><span class="keyword">done</span></span><br></pre></td></tr></table></figure><h3 id="其它语句">其它语句</h3><ul class="lvl-0"><li class="lvl-2"><p><code>break</code> : 退出本层循环，继续执行本层循环体后面的代码，注意是退出本层循环体，如果是嵌套循环，则退出break所在层的循环，并非所有的循环</p></li><li class="lvl-2"><p><code>continue</code> : 跳过本次循环，不再执行continue下面的代码，回到循环判断式判断是否继续执行循环</p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>((i=0;i&lt;=10;i++))</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">    <span class="keyword">if</span> [[ <span class="variable">$i</span> == 0 ]];<span class="keyword">then</span></span><br><span class="line">        <span class="comment"># 不执行后面的语句直接进行下次循环</span></span><br><span class="line">        <span class="built_in">continue</span></span><br><span class="line">    <span class="keyword">fi</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="variable">$i</span></span><br><span class="line">    <span class="keyword">if</span> [[ <span class="variable">$i</span> == 8 ]];<span class="keyword">then</span></span><br><span class="line">        <span class="comment"># 跳出循环体，不再进行循环</span></span><br><span class="line">        <span class="built_in">break</span></span><br><span class="line">    <span class="keyword">fi</span></span><br><span class="line"><span class="keyword">done</span></span><br></pre></td></tr></table></figure><ul class="lvl-0"><li class="lvl-2"><p><code>exit 0</code> : 正常退出</p></li><li class="lvl-2"><p><code>exit 1</code> : 非0，非正常退出</p></li><li class="lvl-2"><p><code>shift</code> : 每执行一次，参数序列顺序左移一个位置，<code>$#</code>的值减1，移出去的参数不再可用</p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># shift.sh</span></span><br><span class="line"><span class="keyword">if</span> (( <span class="variable">$#</span> &lt;= 0 ));<span class="keyword">then</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&quot;Not enough parameters&quot;</span></span><br><span class="line">    <span class="built_in">exit</span> 0</span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"><span class="built_in">sum</span>=0</span><br><span class="line"><span class="keyword">while</span> [[ <span class="variable">$#</span> &gt;= 0 ]]</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">    <span class="built_in">sum</span>=$((sum + <span class="variable">$1</span>))</span><br><span class="line">    <span class="built_in">shift</span> <span class="comment">#因为每次执行shift，所以上面的$1永远都是下一个参数</span></span><br><span class="line"><span class="keyword">done</span></span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$sum</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 执行</span></span><br><span class="line">$ sh shift.sh 1 2 3 4 5 <span class="comment"># 输出 15</span></span><br></pre></td></tr></table></figure><h2 id="shell函数的定义与使用">shell函数的定义与使用</h2><ul class="lvl-0"><li class="lvl-2"><p>shell函数定义</p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 函数定义标准写法</span></span><br><span class="line"><span class="keyword">function</span> <span class="function"><span class="title">name</span></span>() &#123;</span><br><span class="line">    statements</span><br><span class="line">    [<span class="built_in">return</span> value]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> : Shell 中的关键字，专门用来定义函数</span><br><span class="line">name : 函数名</span><br><span class="line">statements : 函数要执行的代码，也就是一组语句；</span><br><span class="line"><span class="built_in">return</span> value : 函数的返回值，其中 <span class="built_in">return</span> 是 Shell 关键字，专门用在函数中返回一个值，这一部分可以写也可以不写。</span><br><span class="line">由&#123; &#125;包围的部分称为函数体，调用一个函数，实际上就是执行函数体中的代码。</span><br><span class="line"></span><br><span class="line"><span class="comment"># 函数定义时也可以不写 function 关键字</span></span><br><span class="line"><span class="function"><span class="title">name</span></span>() &#123;</span><br><span class="line">    statements</span><br><span class="line">    [<span class="built_in">return</span> value]</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment"># 如果写了 function 关键字，也可以省略函数名后面的小括号</span></span><br><span class="line"><span class="keyword">function</span> name &#123;</span><br><span class="line">    statements</span><br><span class="line">    [<span class="built_in">return</span> value]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul class="lvl-0"><li class="lvl-2"><p>shell函数的调用</p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 如果不传递参数，直接给出函数名字即可</span></span><br><span class="line">name</span><br><span class="line"></span><br><span class="line"><span class="comment"># 如果传递参数，多个参数之间以空格分隔</span></span><br><span class="line">name param1 param2 param3</span><br></pre></td></tr></table></figure><blockquote><p>和其它编程语言不同的是，Shell 函数在定义时不能指明参数，但是在调用时却可以传递参数，在方法体内引用时通过$1,$2,……来使用传递过来的参数</p></blockquote><ul class="lvl-0"><li class="lvl-2"><p>示例</p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 函数定义，不需要接收参数</span></span><br><span class="line"><span class="keyword">function</span> <span class="function"><span class="title">start</span></span>()&#123;</span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&quot;start&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment"># 函数调用，在shell脚本中，可以将调用放在定义的前面</span></span><br><span class="line">start</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 函数定义，需要接收参数，假设这里需要接收两个数字并求和</span></span><br><span class="line"><span class="keyword">function</span> <span class="function"><span class="title">sum</span></span>()&#123;</span><br><span class="line">    <span class="built_in">return</span> $(( <span class="variable">$1</span> + <span class="variable">$2</span> ))</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment"># 函数调用</span></span><br><span class="line"><span class="built_in">sum</span> 1 2</span><br><span class="line"><span class="comment"># 输出结果</span></span><br><span class="line"><span class="built_in">echo</span> $?</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 多个参数求和</span></span><br><span class="line"><span class="keyword">function</span> <span class="function"><span class="title">getsum</span></span>()&#123;</span><br><span class="line">    <span class="comment"># 定义局部变量，变量前面要加上local关键字</span></span><br><span class="line">    <span class="built_in">local</span> <span class="built_in">sum</span>=0</span><br><span class="line">    <span class="keyword">for</span> n <span class="keyword">in</span> <span class="variable">$@</span></span><br><span class="line">    <span class="keyword">do</span></span><br><span class="line">        ((<span class="built_in">sum</span>+=n))</span><br><span class="line">    <span class="keyword">done</span></span><br><span class="line">    <span class="built_in">return</span> <span class="variable">$sum</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment"># 函数调用</span></span><br><span class="line">getsum 10 20 55 15  <span class="comment">#调用函数并传递参数</span></span><br><span class="line"><span class="comment"># 输出结果</span></span><br><span class="line"><span class="built_in">echo</span> $?</span><br></pre></td></tr></table></figure><ul class="lvl-0"><li class="lvl-2"><p>shell函数中定义变量，也是全局变量，在函数体外也可以被调用，要是希望在函数体内定义的变量仅能被函数体内调用，则需要在变量前加上<code>local</code>关键字</p></li></ul><h2 id="运行shell">运行shell</h2><ul class="lvl-0"><li class="lvl-2"><p><code>sh test.sh</code> : 运行shell脚本</p></li><li class="lvl-2"><p><code>sh -x test.sh</code> : 执行脚本，并显示全部过程</p></li><li class="lvl-2"><p><code>sh -n test.sh</code> : 不执行脚本，只检查语法错误</p></li><li class="lvl-2"><p>也可以为shell脚本授予执行权限，然后通过<code>.</code>关键字执行，比如<code>. ~/test.sh</code>，或者直接通过脚本路径运行<code>~/test.sh</code>(注意要设置文件头指定shell)</p></li></ul><div class="tips"><p><em><strong>小贴士</strong></em></p><ul class="lvl-1"><li class="lvl-2">如果在windows环境下编写的脚步，上传到linux后需要先执行<code>dos2unix</code>进行编码转换，否则不能正确执行</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dos2unix test.sh</span><br></pre></td></tr></table></figure><ul class="lvl-1"><li class="lvl-2">如果<code>dos2unix</code>命令不存在，可以通过<code>yum</code>进行安装</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install dos2unix -y</span><br></pre></td></tr></table></figure></div>]]></content>
    
    
    <summary type="html">&lt;!--
 **加粗**
 *斜体*
 ***加粗并斜体***
 ~~删除线~~
 ==突出显示==
 `突出显示(推荐)`
 ++下划线++
 ~下标~
 ^上标^
 脚注，参考文献[^1]，然后在文档最下方要添加这个1对应的内容，如：[^1]: My reference.
 图片设置宽度和高度 ![](https://upic-oss.oss-cn-beijing.aliyuncs.com/uPic/innodb_buffer_pool.png =900x600)

 +++ **点击折叠**
 这是被隐藏的内容
 +++

::: tips success warning danger
这里是容器内的内容
:::

% note info % success warning danger
这里是容器内的内容
% endnote %

引用本地其它文章连接{}
 大括号开始% post_link 文件名称(不包含.md) %大括号结束
 --&gt;
&lt;h2 id=&quot;摘要&quot;&gt;摘要&lt;/h2&gt;
&lt;ul class=&quot;lvl-0&quot;&gt;
&lt;li class=&quot;lvl-2&quot;&gt;
&lt;p&gt;本文介绍shell编程的语法规则。&lt;/p&gt;
&lt;/li&gt;
&lt;li class=&quot;lvl-2&quot;&gt;
&lt;p&gt;本文基于&lt;code&gt;CentOS8(x86_64)&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;</summary>
    
    
    
    <category term="技术" scheme="https://blog.hanqunfeng.com/categories/%E6%8A%80%E6%9C%AF/"/>
    
    <category term="linux" scheme="https://blog.hanqunfeng.com/categories/%E6%8A%80%E6%9C%AF/linux/"/>
    
    <category term="linux常用命令" scheme="https://blog.hanqunfeng.com/categories/%E6%8A%80%E6%9C%AF/linux/linux%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/"/>
    
    
    <category term="linux常用命令" scheme="https://blog.hanqunfeng.com/tags/linux%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/"/>
    
  </entry>
  
  <entry>
    <title>Linux常用命令--vim编辑器</title>
    <link href="https://blog.hanqunfeng.com/2023/03/11/linux-command05-vim/"/>
    <id>https://blog.hanqunfeng.com/2023/03/11/linux-command05-vim/</id>
    <published>2023-03-11T13:30:05.000Z</published>
    <updated>2023-03-24T02:37:21.092Z</updated>
    
    <content type="html"><![CDATA[<!-- **加粗** *斜体* ***加粗并斜体*** ~~删除线~~ ==突出显示== `突出显示(推荐)` ++下划线++ ~下标~ ^上标^ 脚注，参考文献[^1]，然后在文档最下方要添加这个1对应的内容，如：[^1]: My reference. 图片设置宽度和高度 ![](https://upic-oss.oss-cn-beijing.aliyuncs.com/uPic/innodb_buffer_pool.png =900x600) +++ **点击折叠** 这是被隐藏的内容 +++::: tips success warning danger这里是容器内的内容:::% note info % success warning danger这里是容器内的内容% endnote %引用本地其它文章连接{} 大括号开始% post_link 文件名称(不包含.md) %大括号结束 --><h2 id="摘要">摘要</h2><ul class="lvl-0"><li class="lvl-2"><p>本文介绍vim编辑器的使用方法。</p></li><li class="lvl-2"><p>本文基于<code>CentOS8(x86_64)</code></p></li></ul><span id="more"></span><h2 id="vim操作模式">vim操作模式</h2><ul class="lvl-0"><li class="lvl-2"><p>vim支持很多种操作模式，常用的有三种操作模式，分别是命令(正常、普通)模式<code>(Command Mode)</code>、插入模式<code>(Insert Mode)</code>和底行模式<code>(Last Line Mode)</code>。</p></li><li class="lvl-2"><p>命令(正常、普通)模式<code>(Command Mode)</code></p><blockquote><p>进入vim之后，就处于<code>(Command Mode)</code>之中，在该模式下可以控制屏幕光标的移动，字符、字或行的删除，移动复制某区段以及进入<code>(Insert Mode)</code>或<code>(Last Line Mode)</code></p></blockquote></li><li class="lvl-2"><p>插入模式<code>(Insert Mode)</code></p><blockquote><p>在命令模式下输入如下字符即可切换至插入模式<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">a:在光标后   A:在本行末</span><br><span class="line">i:在光标前   I:在本行开始</span><br><span class="line">o:在光标下新开一行   O:在光标上新开一行</span><br><span class="line">此时就可以在光标所在处输入字符了</span><br></pre></td></tr></table></figure><br>只有在<code>(Insert Mode)</code>下，才可以做文字输入，按 <code>ESC</code> 键可回到<code>(Command Mode)</code>，该模式是我们用到的最频繁的模式</p></blockquote></li><li class="lvl-2"><p>底行(末行)模式<code>(Last Line Mode)</code></p><blockquote><p>在<code>(Command Mode)</code>下，输入<code>shift + :</code>，其实就是输入 <code>:</code> 即可进入<code>(Last Line Mode)</code><br>在<code>(Last Line Mode)</code>下，输入命令并回车即可执行相应的操作，无论输入的命令是否执行成功都会退出<code>(Last Line Mode)</code>并切换回<code>(Command Mode)</code>，<br>或者输入命令后不想执行，此时可以连按两次<code>Esc</code>键即可切换回<code>(Command Mode)</code>，或者按退格键直到取消<code>:</code>也会回到<code>(Command Mode)</code><br>在<code>(Last Line Mode)</code>下，可以进行文件保存或退出，也可以进行文件替换，找字符串，列出行号等操作</p></blockquote></li><li class="lvl-2"><p>要查看vim的所有操作模式，可以在命令行输入<code>vim</code>，然后在底行模式中输入<code>help vim-modes</code>命令即可。</p></li></ul><h2 id="vim语法">vim语法</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># fileName不存在则创建</span></span><br><span class="line">vim fileName</span><br><span class="line"><span class="comment"># 也可以不加fileName直接打开vim编辑器，此时需要在保存时指定fileName</span></span><br><span class="line">vim</span><br></pre></td></tr></table></figure><h2 id="命令-正常、普通-模式-Command-Mode-相关指令">命令(正常、普通)模式<code>(Command Mode)</code>相关指令</h2><h3 id="移动光标">移动光标</h3><ul class="lvl-0"><li class="lvl-2"><p>vim可以直接用键盘上的上下左右键来移动光标，但正规的vim是用小写英文字母 <code>h 、 j 、 k 、 l</code> ，分别控制光标左、下、上、右移一格</p></li><li class="lvl-2"><p><code>gg</code> :光标移动到第一行开始处</p></li><li class="lvl-2"><p><code>G</code> :光标移动到最后一行开始处</p></li><li class="lvl-2"><p><code>#G</code> : 例如，15G ，表示移动光标至第15行行首</p></li><li class="lvl-2"><p><code>$</code> :移动到光标所在行的行尾</p></li><li class="lvl-2"><p><code>^ (0)</code> :移动到光标所在行的行首</p></li></ul><blockquote><p>上面的比较常用</p></blockquote><ul class="lvl-0"><li class="lvl-2"><p><code>H</code> : 光标移动到当前屏幕中的第一行开始处</p></li><li class="lvl-2"><p><code>L</code> : 光标移动到当前屏幕中的最后一行开始处</p></li><li class="lvl-2"><p><code>M</code> : 光标移动到当前屏幕中的最中间一行开始处</p></li><li class="lvl-2"><p><code>w</code> :光标跳到下个字的开头</p></li><li class="lvl-2"><p><code>e</code> :光标跳到下个字的字尾</p></li><li class="lvl-2"><p><code>b</code> :光标回到上个字的开头</p></li><li class="lvl-2"><p><code>#l</code> :光标移到相对当前光标所在处后的第#个位置，如:当前光标在本行第3个字符处，则5l表示移动到本行第8个字符处</p></li><li class="lvl-2"><p><code>ctrl + b</code> :屏幕往后移动一页</p></li><li class="lvl-2"><p><code>ctrl + f</code> :屏幕往前移动一页</p></li><li class="lvl-2"><p><code>ctrl + u</code> :屏幕往后移动半页</p></li><li class="lvl-2"><p><code>ctrl + d</code> :屏幕往前移动半页</p></li></ul><h3 id="删除文字">删除文字</h3><ul class="lvl-0"><li class="lvl-2"><p><code>x</code> :每按一次，删除光标所在位置的一个字符</p></li><li class="lvl-2"><p><code>dd</code> :删除光标所在行</p></li><li class="lvl-2"><p><code>#dd</code> :从光标所在行开始删除#行</p></li></ul><blockquote><p>上面的比较常用</p></blockquote><ul class="lvl-0"><li class="lvl-2"><p><code>#x</code> :例如，6x 表示删除光标所在位置的后面（包含自己在内）6个字符</p></li><li class="lvl-2"><p><code>X</code> :大写的X，每按一次，删除光标所在位置的前面一个字符</p></li><li class="lvl-2"><p><code>#X</code> :例如，20X 表示删除光标所在位置的前面20个字符</p></li><li class="lvl-2"><p><code>dG</code> :删除光标所在行到末尾的内容</p></li><li class="lvl-2"><p><code>D</code> :删除光标所在处到行尾</p></li></ul><h3 id="复制">复制</h3><ul class="lvl-0"><li class="lvl-2"><p><code>yy</code> :复制光标所在行到缓冲区。</p></li><li class="lvl-2"><p><code>#yy</code> :例如，6yy 表示拷贝从光标所在的该行往下数6行文字</p></li><li class="lvl-2"><p><code>p</code>:将缓冲区内的字符贴到光标所在位置。注意:所有与 <code>y</code> 有关的复制命令都必须与 <code>p</code> 配合才能完成复制与粘贴功能</p></li></ul><blockquote><p>上面的比较常用</p></blockquote><ul class="lvl-0"><li class="lvl-2"><p><code>yw</code> :将光标所在之处到字尾的字符复制到缓冲区中</p></li><li class="lvl-2"><p><code>#yw</code> :复制#个字到缓冲区</p></li></ul><h3 id="替换">替换</h3><ul class="lvl-0"><li class="lvl-2"><p><code>r</code> :替换光标所在处的字符，一次只能替换一个字符</p></li><li class="lvl-2"><p><code>R</code> :替换光标所到之处的字符，直到按下 <code>ESC</code> 键为止</p></li></ul><blockquote><p>不常用，直接进入插入模式修改就行</p></blockquote><h3 id="更改">更改</h3><ul class="lvl-0"><li class="lvl-2"><p><code>cw</code> :更改光标所在处的字到字尾处，标点符号或空格分隔，此时进入<code>(Insert Mode)</code></p></li><li class="lvl-2"><p><code>c#w</code> :例如，c3w 表示更改3个字，标点符号或空格分隔，此时进入<code>(Insert Mode)</code></p></li></ul><blockquote><p>不常用，直接进入插入模式修改就行</p></blockquote><h3 id="撤销或恢复上一次操作">撤销或恢复上一次操作</h3><ul class="lvl-0"><li class="lvl-2"><p><code>u</code> : 如果您误执行一个命令，可以马上按下 <code>u</code> ，回到上一个操作，按多次<code>u</code>可以执行多次恢复。</p></li><li class="lvl-2"><p><code>ctrl + r</code> : 撤销恢复，多次执行<code>ctrl + r</code>，可以多次撤销</p></li></ul><h2 id="底行-末行-模式-Last-Line-Mode-相关指令">底行(末行)模式<code>(Last Line Mode)</code>相关指令</h2><h3 id="列出或取消行号">列出或取消行号</h3><ul class="lvl-0"><li class="lvl-2"><p><code>set nu</code> : 输入 <code>set nu</code> 后，会在文件中的每一行前面列出行号</p></li><li class="lvl-2"><p><code>set nonu</code> : 输入 <code>set nonu</code> 后，会取消文件中的每一行前面列出的行号</p></li></ul><h3 id="跳到文件中的某一行">跳到文件中的某一行</h3><ul class="lvl-0"><li class="lvl-2"><p><code>#</code> : <code>#</code> 号表示一个数字，再冒号后输入一个数字，再按回车键就会跳到该行</p></li></ul><h3 id="查找字符">查找字符</h3><ul class="lvl-0"><li class="lvl-2"><p><code>/ + key</code> : 先按 <code>/</code> 键，再输入您想寻找的字符，如果第一次找的关键字不是您想要的，可以一直按 <code>n</code> 会往 <em><strong>后</strong></em> 寻找到您要的内容，循环往复。</p></li><li class="lvl-2"><p><code>? + key1</code> : 先按 <code>?</code> 键，再输入您想寻找的字符，如果第一次找的关键字不是您想要的，可以一直按 <code>n</code> 会往 <em><strong>前</strong></em> 寻找到您要的内容，循环往复。</p></li><li class="lvl-2"><p><code>set ic</code> :搜索时忽略大小写</p></li><li class="lvl-2"><p><code>set noic</code> :搜索时区分大小写</p></li></ul><h3 id="替换，语法类似于sed的s替换">替换，语法类似于sed的s替换</h3><ul class="lvl-0"><li class="lvl-2"><p><code>n1s/source/target/</code> :<code>n1</code>代表行号，替换第n1行首次出现的source为target</p></li><li class="lvl-2"><p><code>n1s/source/target/i</code> :<code>n1</code>代表行号，替换第n1行首次出现的source为target，<code>i</code>表示不区分大小写</p></li><li class="lvl-2"><p><code>n1s/source/target/g</code> :<code>n1</code>代表行号，替换第n行出现的全部source为target</p></li><li class="lvl-2"><p><code>%s/source/target/g</code> :<code>%</code>代表所有行，配合<code>g</code>表示全文替换，将整个文档中的source替换为target</p></li><li class="lvl-2"><p><code>n1,n2s/source/target/ig</code> :<code>n1,n2</code>代表行号，在n1行到n2行范围内替换指定内容，不区分大小写</p></li><li class="lvl-2"><p>示例</p></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">n1,n2s/^/#/ :行首添加#</span><br><span class="line">n1,n2s/^#// :去除行首#</span><br><span class="line">n1,n2s/^/\/\// :行首添加//</span><br><span class="line">n1,n2s/^\/\/// :去除行首//</span><br></pre></td></tr></table></figure><h3 id="删除，语法类似于sed的d删除">删除，语法类似于sed的d删除</h3><ul class="lvl-0"><li class="lvl-2"><p><code>n1d</code> :n1代表行号，删除指定的行</p></li><li class="lvl-2"><p><code>n1,n2d</code> :n1,n2代表行号，删除指定范围的行</p></li><li class="lvl-2"><p><code>1,$d</code> :删除所有行的全部内容</p></li></ul><h3 id="保存和退出">保存和退出</h3><ul class="lvl-0"><li class="lvl-2"><p><code>w</code> :保存修改，不退出</p></li><li class="lvl-2"><p><code>w new_filename</code> :另存为，新的文件名称为new_filename</p></li><li class="lvl-2"><p><code>wq</code> :保存退出</p></li><li class="lvl-2"><p><code>q!</code> :不保存修改退出</p></li><li class="lvl-2"><p><code>wq!</code> :强制保存修改并退出，文件是只读的时候可以使用该命令强制保存（只有文件所有者有权限这样做）</p></li></ul><h3 id="定义快捷键">定义快捷键</h3><ul class="lvl-0"><li class="lvl-2"><p>我们可以自己定义快捷键，以定制化一个操作，比如在当前行行首添加<code>#</code></p></li><li class="lvl-2"><p>语法为：<code>map ^P I#&lt;ESC&gt;</code> : 定义<code>ctrl + p</code>，其含义为 输入大写字母<code>I</code>进入插入模式,输入<code>#</code>字符后按<code>Esc</code>切换回命令模式，注意，这里定义map时填写的<code>&lt;ESC&gt;</code>是一个字符一个字符写上的，而不是去按一次Esc按键</p><blockquote><p><code>^P</code> 的 输入方法为: <code>ctrl+v+p</code></p></blockquote></li><li class="lvl-2"><p>此时在当前vim的命令模式下，输入<code>ctrl + p</code>会在光标所在行的行首添加<code>#</code></p></li><li class="lvl-2"><p><code>unmap ^P</code> :取消该快捷键</p></li><li class="lvl-2"><p>在底行模式下定义快捷键只对本次vim有效，退出vim就失效了，如要永久生效，可以配置到<code>~/.vimrc</code>中</p></li></ul><h3 id="ab替换">ab替换</h3><ul class="lvl-0"><li class="lvl-2"><p>ab替换可以让我们在使用vim的插入模式编辑内容时，输入指定的字符，vim会自动帮我们替换为指定的内容</p></li><li class="lvl-2"><p>语法为：<code>ab key1 key2</code>，此时我们输入key1,会自动被vim替换为key2</p><blockquote><p>如：<code>ab myemali hanqunfeng@xxx.com</code>，当输入myemail+空格后，会自动替换为hanqunfeng@xxx.com</p></blockquote></li><li class="lvl-2"><p><code>unab myemail</code> :取消</p></li><li class="lvl-2"><p>在底行模式下定义ab替换只对本次vim有效，退出vim就失效了，如要永久生效，可以配置到<code>~/.vimrc</code>中</p></li></ul><h2 id="vim配置">vim配置</h2><ul class="lvl-0"><li class="lvl-2"><p>配置文件的位置</p><blockquote><p>在目录 <code>/etc</code>目录下面，有个名为<code>vimrc</code>的文件，这是系统中公共的vim配置文件，对所有用户都有效。<br>而在每个用户的home目录下，都可以自己建立私有的配置文件，命名为：<code>.vimrc</code><br>私有配置会覆盖公共配置中相同的内容，通常我们只修改私有配置文件</p></blockquote></li><li class="lvl-2"><p>常用配置，注释是行首双引号</p></li></ul><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&quot; 快捷键</span></span><br><span class="line"><span class="keyword">map</span> ^<span class="keyword">P</span> I#<span class="symbol">&lt;ESC&gt;</span></span><br><span class="line"><span class="comment">&quot; ab替换</span></span><br><span class="line"><span class="keyword">ab</span> myemali hanqunfeng@xxx.<span class="keyword">com</span></span><br><span class="line"><span class="comment">&quot; 显示行号</span></span><br><span class="line"><span class="keyword">set</span>  <span class="keyword">nu</span></span><br><span class="line"><span class="comment">&quot; 语法高亮</span></span><br><span class="line"><span class="keyword">syntax</span> <span class="keyword">on</span></span><br><span class="line"><span class="comment">&quot; 缩进为4</span></span><br><span class="line"><span class="keyword">set</span> <span class="built_in">shiftwidth</span>=<span class="number">4</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&quot; 括号和引号的自动补全</span></span><br><span class="line"><span class="keyword">inoremap</span> ( ()<span class="symbol">&lt;ESC&gt;</span>i</span><br><span class="line"><span class="keyword">inoremap</span> [ []<span class="symbol">&lt;ESC&gt;</span>i</span><br><span class="line"><span class="keyword">inoremap</span> &#123; &#123;&#125;<span class="symbol">&lt;ESC&gt;</span>i</span><br><span class="line"><span class="keyword">inoremap</span> <span class="string">&#x27; &#x27;</span><span class="string">&#x27;&lt;ESC&gt;i</span></span><br><span class="line"><span class="string">inoremap &quot; &quot;&quot;&lt;ESC&gt;i</span></span><br></pre></td></tr></table></figure><ul class="lvl-0"><li class="lvl-2"><p>关于vim更为详细的配置请参考 <a href="/2021/01/23/vimrc/" title="vim配置">vim配置</a></p></li></ul>]]></content>
    
    
    <summary type="html">&lt;!--
 **加粗**
 *斜体*
 ***加粗并斜体***
 ~~删除线~~
 ==突出显示==
 `突出显示(推荐)`
 ++下划线++
 ~下标~
 ^上标^
 脚注，参考文献[^1]，然后在文档最下方要添加这个1对应的内容，如：[^1]: My reference.
 图片设置宽度和高度 ![](https://upic-oss.oss-cn-beijing.aliyuncs.com/uPic/innodb_buffer_pool.png =900x600)

 +++ **点击折叠**
 这是被隐藏的内容
 +++

::: tips success warning danger
这里是容器内的内容
:::

% note info % success warning danger
这里是容器内的内容
% endnote %

引用本地其它文章连接{}
 大括号开始% post_link 文件名称(不包含.md) %大括号结束
 --&gt;
&lt;h2 id=&quot;摘要&quot;&gt;摘要&lt;/h2&gt;
&lt;ul class=&quot;lvl-0&quot;&gt;
&lt;li class=&quot;lvl-2&quot;&gt;
&lt;p&gt;本文介绍vim编辑器的使用方法。&lt;/p&gt;
&lt;/li&gt;
&lt;li class=&quot;lvl-2&quot;&gt;
&lt;p&gt;本文基于&lt;code&gt;CentOS8(x86_64)&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;</summary>
    
    
    
    <category term="技术" scheme="https://blog.hanqunfeng.com/categories/%E6%8A%80%E6%9C%AF/"/>
    
    <category term="linux" scheme="https://blog.hanqunfeng.com/categories/%E6%8A%80%E6%9C%AF/linux/"/>
    
    <category term="linux常用命令" scheme="https://blog.hanqunfeng.com/categories/%E6%8A%80%E6%9C%AF/linux/linux%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/"/>
    
    
    <category term="linux常用命令" scheme="https://blog.hanqunfeng.com/tags/linux%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/"/>
    
  </entry>
  
  <entry>
    <title>Linux常用命令--命令行快捷键</title>
    <link href="https://blog.hanqunfeng.com/2023/03/10/linux-command04-ctrl/"/>
    <id>https://blog.hanqunfeng.com/2023/03/10/linux-command04-ctrl/</id>
    <published>2023-03-10T13:30:05.000Z</published>
    <updated>2023-03-24T02:37:27.528Z</updated>
    
    <content type="html"><![CDATA[<!-- **加粗** *斜体* ***加粗并斜体*** ~~删除线~~ ==突出显示== `突出显示(推荐)` ++下划线++ ~下标~ ^上标^ 脚注，参考文献[^1]，然后在文档最下方要添加这个1对应的内容，如：[^1]: My reference. 图片设置宽度和高度 ![](https://upic-oss.oss-cn-beijing.aliyuncs.com/uPic/innodb_buffer_pool.png =900x600) +++ **点击折叠** 这是被隐藏的内容 +++::: tips success warning danger这里是容器内的内容:::% note info % success warning danger这里是容器内的内容% endnote % --><h2 id="摘要">摘要</h2><ul class="lvl-0"><li class="lvl-2"><p>本文介绍常用的命令行快捷键</p></li><li class="lvl-2"><p>本文基于<code>CentOS8(x86_64)</code></p></li></ul><span id="more"></span><h2 id="最最常用的快捷键">最最常用的快捷键</h2><ul class="lvl-0"><li class="lvl-2"><p><code>tab (ctrl + i)</code> : 命令补全</p><blockquote><p>有些命令如果想不起来怎么拼写了，可以只输入前面几个字符，然后按一次tab键，就会自动补全以输入前缀开头的命令<br>按两次tab键，就会显示以输入前缀开头的全部命令</p></blockquote></li><li class="lvl-2"><p><code>ctrl + c</code> : 停止正在执行的任务 或者 取消当前命令行编辑(删除整行)</p></li><li class="lvl-2"><p><code>ctrl + l</code> : 清除屏幕上所有内容，并开始新的一行，相当于执行<code>clear</code>命令</p></li><li class="lvl-2"><p><code>ctrl + a</code> : 光标回到命令行首</p></li><li class="lvl-2"><p><code>ctrl + e</code> : 光标回到命令行末</p></li><li class="lvl-2"><p><code>ctrl + insert</code> : 复制选中内容，mac下是 <code>command + c</code></p></li><li class="lvl-2"><p><code>alt + insert</code> : 粘贴刚才复制的内容到当前光标处，mac下是 <code>command + v</code></p></li><li class="lvl-2"><p>↑<code>(ctrl + p)</code> : 显示上一条历史命令</p></li><li class="lvl-2"><p>↓<code>(ctrl + n )</code> : 显示下一条历史命令</p></li><li class="lvl-2"><p><code>!!</code> : 执行上一条命令，相当于 ↑ + <code>Enter</code></p></li><li class="lvl-2"><p><code>!key</code>  : 执行上一条以<code>key</code>开头的命令</p></li><li class="lvl-2"><p><code>backspace (ctrl + h)</code> : 删除光标前一个字符，mac下是 <code>delete</code>键</p></li></ul><div class="success"><p>记住上面的的这些快捷键，基本上日常操作就没啥问题了，下面的快捷键可以使我们的命令行操作更加高效和便捷，能记多少就记多少吧。</p></div><h2 id="剪切和删除">剪切和删除</h2><ul class="lvl-0"><li class="lvl-2"><p><code>ctrl + k</code> : 剪切光标处到行尾处的字符（有删除的作用）</p></li><li class="lvl-2"><p><code>ctrl + u</code> : 剪切光标处到行首处的字符（有删除的作用）</p></li><li class="lvl-2"><p><code>ctrl + w</code> : 剪切光标前的一个单词（有删除的作用）</p></li><li class="lvl-2"><p><code>alt + d</code> : 剪切光标后的一个单词（有删除的作用），mac下是 <code>Esc + d</code></p></li><li class="lvl-2"><p><code>ctrl + y</code> : 粘贴<code>ctrl + k</code>、<code>ctrl + u</code>、<code>ctrl + w</code>、<code>alt + d</code> 剪切/删除的文本</p></li><li class="lvl-2"><p><code>ctrl + d</code> : 删除光标所在处字符</p></li></ul><h2 id="搜索历史命令">搜索历史命令</h2><ul class="lvl-0"><li class="lvl-2"><p><code>ctrl + r</code> : 搜索历史命令中的命令记录，输入一些关键字，会自动给出匹配到的结果，连续按<code>ctrl + r</code>，给出下一条匹配结果</p><blockquote><p>类似于 <code>history | grep key</code>，但是<code>ctrl + r</code>给出的结果会去重</p></blockquote></li><li class="lvl-2"><p><code>Enter (ctrl + o) (ctrl + m)</code> : 执行匹配结果中的命令</p></li><li class="lvl-2"><p><code>ctrl + g</code> : 从正在执行<code>ctrl + r</code>的搜索中退出，<code>ctrl + c</code>也行</p></li><li class="lvl-2"><p>-&gt;<code>(Esc) (ctrl + j)</code> : 将<code>ctrl + r</code>的搜索中的匹配结果粘贴到命令行，其实好多快捷键都可以达到该效果，随便记住一个吧</p></li></ul><h2 id="前台进程转到后台运行">前台进程转到后台运行</h2><ul class="lvl-0"><li class="lvl-2"><p>假设你发现前台运行的一个进程需要很长的时间，但是你需要干其他的事情，你就可以将当前进程转到后台运行</p></li><li class="lvl-2"><p><code>ctrl + z</code> : 暂停正在运行行中的进程</p>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[1]+ Stopped /root/bin/rsync.sh  <span class="comment"># [1] 表示的是 jobnumber</span></span><br></pre></td></tr></table></figure></li><li class="lvl-2"><p><code>bg</code> : 将暂停中的进程转到后台运行</p><blockquote><p>把当前进程暂停后，可以输入使用<code>bg</code>将该程序转到后台运行<br>如果有多个暂停中的程序，可以输入<code>bg + jobnumber</code>将指定序号的程序转到后台运行</p></blockquote></li><li class="lvl-2"><p><code>jobs</code> : 显示后台运行的进程信息</p></li><li class="lvl-2"><p><code>fg</code> : 将后台运行的进程转到前台运行</p><blockquote><p>把后台运行的进程转到前台运行，可以输入使用<code>fg</code>将该程序转到前台运行<br>如果有多个后台运行中的程序，可以输入<code>fg + jobnumber</code>将指定序号的程序转到前台运行</p></blockquote></li><li class="lvl-2"><p>要将一个进程在运行时就直接放到后台运行，可以在命令最后增加 <code>&amp;</code> 符号，但这个仅在当前会话中有效，一旦会话关闭，当前进程就会中断执行</p></li><li class="lvl-2"><p>可以在命令最前面加上<code>nohup</code>命令，这样进程就会一直在后台运行直到程序运行结束，而不会因为会话关闭而中断</p>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">nohup</span> sh test.sh &amp;</span><br></pre></td></tr></table></figure></li></ul><h2 id="屏幕锁定、-解锁">屏幕锁定、 解锁</h2><ul class="lvl-0"><li class="lvl-2"><p><code>ctrl + s</code> : 锁定界面，停止屏幕打印内容，使终端发呆，静止，可以使快速输出的终端屏幕停下来</p></li><li class="lvl-2"><p><code>ctrl + q</code> : 解开<code>ctrl + s</code> 的锁定界面，继续屏幕打印</p></li></ul><h2 id="光标移动">光标移动</h2><ul class="lvl-0"><li class="lvl-2"><p><code>Esc + .</code> : 获取上一条命令的最后部分（空格分隔）</p></li><li class="lvl-2"><p><code>Esc + b</code> : 移动到当前单词的开头</p></li><li class="lvl-2"><p><code>Esc + f</code> : 移动到当前单词的结尾</p></li><li class="lvl-2"><p>-&gt;<code>(ctrl + f)</code> : 光标向右移动一个字符</p></li><li class="lvl-2"><p>&lt;-<code>(ctrl + b)</code> : 光标向左移动一个字符</p></li><li class="lvl-2"><p><code>ctrl + t</code> : 交换光标位置前的两个字符</p></li></ul><h2 id="其它">其它</h2><ul class="lvl-0"><li class="lvl-2"><p><code>!$</code> : 显示最近的一个参数</p><blockquote><p>比如我先用 <code>cat /etc/sysconfig/network-scripts/ifcfg-eth0</code>，然后我想用 vim 编辑。<br>一般的做法是先用 ↑ 显示最后一条命令，然后用 <code>ctrl + a</code> 移动到命令最前，删除 cat，然后再输入 vim 命令。<br>其实完全可以用 <code>vim !$</code>来代替。</p></blockquote></li></ul>]]></content>
    
    
    <summary type="html">&lt;!--
 **加粗**
 *斜体*
 ***加粗并斜体***
 ~~删除线~~
 ==突出显示==
 `突出显示(推荐)`
 ++下划线++
 ~下标~
 ^上标^
 脚注，参考文献[^1]，然后在文档最下方要添加这个1对应的内容，如：[^1]: My reference.
 图片设置宽度和高度 ![](https://upic-oss.oss-cn-beijing.aliyuncs.com/uPic/innodb_buffer_pool.png =900x600)

 +++ **点击折叠**
 这是被隐藏的内容
 +++

::: tips success warning danger
这里是容器内的内容
:::

% note info % success warning danger
这里是容器内的内容
% endnote %

 --&gt;
&lt;h2 id=&quot;摘要&quot;&gt;摘要&lt;/h2&gt;
&lt;ul class=&quot;lvl-0&quot;&gt;
&lt;li class=&quot;lvl-2&quot;&gt;
&lt;p&gt;本文介绍常用的命令行快捷键&lt;/p&gt;
&lt;/li&gt;
&lt;li class=&quot;lvl-2&quot;&gt;
&lt;p&gt;本文基于&lt;code&gt;CentOS8(x86_64)&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;</summary>
    
    
    
    <category term="技术" scheme="https://blog.hanqunfeng.com/categories/%E6%8A%80%E6%9C%AF/"/>
    
    <category term="linux" scheme="https://blog.hanqunfeng.com/categories/%E6%8A%80%E6%9C%AF/linux/"/>
    
    <category term="linux常用命令" scheme="https://blog.hanqunfeng.com/categories/%E6%8A%80%E6%9C%AF/linux/linux%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/"/>
    
    
    <category term="linux常用命令" scheme="https://blog.hanqunfeng.com/tags/linux%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/"/>
    
  </entry>
  
  <entry>
    <title>Linux常用命令--文本排序和去重相关命令</title>
    <link href="https://blog.hanqunfeng.com/2023/03/06/linux-command03-sort/"/>
    <id>https://blog.hanqunfeng.com/2023/03/06/linux-command03-sort/</id>
    <published>2023-03-06T13:45:05.000Z</published>
    <updated>2023-03-24T02:37:40.368Z</updated>
    
    <content type="html"><![CDATA[<!-- **加粗** *斜体* ***加粗并斜体*** ~~删除线~~ ==突出显示== `突出显示(推荐)` ++下划线++ ~下标~ ^上标^ 脚注，参考文献[^1]，然后在文档最下方要添加这个1对应的内容，如：[^1]: My reference. 图片设置宽度和高度 ![](https://upic-oss.oss-cn-beijing.aliyuncs.com/uPic/innodb_buffer_pool.png =900x600) +++ **点击折叠** 这是被隐藏的内容 +++::: tips success warning danger这里是容器内的内容:::% note info % success warning danger这里是容器内的内容% endnote % --><h2 id="摘要">摘要</h2><ul class="lvl-0"><li class="lvl-2"><p>文本的排序、去重和统计行数等相关命令，如sort、uniq、wc等等</p></li><li class="lvl-2"><p>本文基于<code>CentOS8(x86_64)</code></p></li></ul><span id="more"></span><h2 id="sort">sort</h2><ul class="lvl-0"><li class="lvl-2"><p>sort将文件的每一行作为一个单位，相互比较，比较原则是从首字符向后，依次按ASCII码值进行比较，最后将他们排序输出，默认升序。</p></li></ul><h3 id="sort基本用法">sort基本用法</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 文件内容按ASCII码值进行比较后升序输出</span></span><br><span class="line"><span class="built_in">sort</span> file</span><br><span class="line"></span><br><span class="line"><span class="comment"># 忽略大小写</span></span><br><span class="line"><span class="built_in">sort</span> -f file</span><br><span class="line"></span><br><span class="line"><span class="comment"># -u去重</span></span><br><span class="line"><span class="built_in">sort</span> -u file</span><br><span class="line"></span><br><span class="line"><span class="comment"># -r降序</span></span><br><span class="line"><span class="built_in">sort</span> -r file</span><br><span class="line"></span><br><span class="line"><span class="comment"># -o结果输出到文件，类似于重定向 &gt; ，但是比重定向强的一点是可以输出到源文件</span></span><br><span class="line"><span class="built_in">sort</span> file -o newfile</span><br><span class="line"></span><br><span class="line"><span class="comment"># -n 按数字大小排序，默认按字符比较，所以10比2小，此时可以加上 -n 来告诉sort要以数值来排序</span></span><br><span class="line"><span class="built_in">sort</span> -n file</span><br><span class="line"></span><br><span class="line"><span class="comment"># -M 会以月份来排序，比如JAN小于FEB</span></span><br><span class="line"><span class="built_in">sort</span> -M file</span><br><span class="line"></span><br><span class="line"><span class="comment"># -b 会忽略每一行前面的所有空白部分，从第一个可见字符开始比较</span></span><br><span class="line"><span class="built_in">sort</span> -b file</span><br><span class="line"></span><br><span class="line"><span class="comment"># -c 检查文件是否已经排好序，如果乱序，则输出第一个乱序的行的相关信息，$?值为1</span></span><br><span class="line"><span class="built_in">sort</span> -c file</span><br><span class="line"></span><br><span class="line"><span class="comment"># -C 检查文件是否已经排好序，如果乱序，则不输出任何内容，$?值为1</span></span><br><span class="line"><span class="built_in">sort</span> -C file</span><br><span class="line"></span><br><span class="line"><span class="comment"># 还有一些其它参数</span></span><br><span class="line">-d 只考虑空白区域和字母字</span><br><span class="line">-i 只针对可打印字符进行排序，有些ASCII就是不可打印字符，比如\n是换行，\r是回车等等</span><br></pre></td></tr></table></figure><h3 id="sort高级用法">sort高级用法</h3><ul class="lvl-0"><li class="lvl-2"><p>上面结束的sort用法都是从每行的第一个字符开始比较，如果文本可以被分隔为一列一列的内容，我们想按某一列进行排序该如何处理呢？</p></li><li class="lvl-2"><p>为了说明这个用法，我准备了一份文件</p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">cat</span> file</span><br><span class="line">tom,68,9.1</span><br><span class="line">jack,71,18.7</span><br><span class="line">alex,68,9.8</span><br><span class="line">bar,100,30.6</span><br><span class="line">foo,20,1.2</span><br><span class="line">rucy,100,20.5</span><br></pre></td></tr></table></figure><ul class="lvl-0"><li class="lvl-2"><p>以第二列进行排序，并按数字大小排序</p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -t 分隔符，-k 排序的列号</span></span><br><span class="line">$ <span class="built_in">sort</span> -n -t <span class="string">&quot;,&quot;</span> -k 2 file</span><br><span class="line">foo,20,1.2</span><br><span class="line">tom,68,9.1</span><br><span class="line">alex,68,9.8</span><br><span class="line">jack,71,18.7</span><br><span class="line">rucy,100,20.5</span><br><span class="line">bar,100,30.6</span><br><span class="line"></span><br><span class="line"><span class="comment"># 这里 -n 可以写到 -k中</span></span><br><span class="line"><span class="built_in">sort</span> -t <span class="string">&quot;,&quot;</span> -k 2n file</span><br><span class="line"></span><br><span class="line"><span class="comment"># 也可以将 -r 写到 -k中</span></span><br><span class="line"><span class="built_in">sort</span> -t <span class="string">&quot;,&quot;</span> -k 2nr file</span><br></pre></td></tr></table></figure><ul class="lvl-0"><li class="lvl-2"><p>以第一列的第二个字符进行排序</p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 这里 -k 1.2，表示按第一列的第二个字符排序</span></span><br><span class="line">$ <span class="built_in">sort</span> -t <span class="string">&quot;,&quot;</span> -k 1.2 file</span><br><span class="line">jack,71,18.7</span><br><span class="line">bar,100,30.6</span><br><span class="line">alex,68,9.8</span><br><span class="line">tom,68,9.1</span><br><span class="line">foo,20,1.2</span><br><span class="line">rucy,100,20.5</span><br></pre></td></tr></table></figure><div class="tips"><p><em><strong>小贴士</strong></em></p><ul class="lvl-1"><li class="lvl-2"><code>-k</code> 的语法格式为<code>[ FStart [ .CStart ] ] [ Modifier ] [ , [ FEnd [ .CEnd ] ][ Modifier ] ]</code></li><li class="lvl-2">这个语法格式可以被其中的逗号（“，”）分为两大部分，Start部分和End部分。</li><li class="lvl-2">Start部分也由三部分组成，其中的Modifier部分就是我们之前说过的类似n和r的选项部分，比如<code>-k 2nr</code>，<code>b、d、f、i、n 或 r</code>都可以用在Modifier部分。</li><li class="lvl-2">FStart就是表示使用的域，而CStart则表示在FStart域中从第几个字符开始算“排序首字符”，CStart也是可以省略的，省略的话就表示从本域的开头部分开始。</li><li class="lvl-2">之前例子中的 <code>-k 2</code> 就是省略了CStart而只有FStart，而<code>-k 1.2</code>其中的 <code>1</code> 就是FStart，<code>.2</code> 就是CStart。</li><li class="lvl-2">End的部分的组成同Start。</li><li class="lvl-2">Start用于表示从第几个域的第几个字符开始，End用于表示到第几个域的第几个字符结束，如果不设定End部分，那么就认为End被设定为行尾。</li></ul></div><ul class="lvl-0"><li class="lvl-2"><p>先按第二列升序排序，第二列相同则按第三列降序排序</p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 看了上面的小贴士，应该可以理解这里的含义</span></span><br><span class="line"><span class="comment"># -k 2,2n 表示从第二个域开始到第二个域结束并按数字升序排序，</span></span><br><span class="line"><span class="comment"># -k 3,3nr 表示从第三个域开始到第三个域结束并按数字降序排序，</span></span><br><span class="line">$ <span class="built_in">sort</span> -t <span class="string">&quot;,&quot;</span> -k 2,2n -k 3,3nr file</span><br><span class="line">foo,20,1.2</span><br><span class="line">alex,68,9.8</span><br><span class="line">tom,68,9.1</span><br><span class="line">jack,71,18.7</span><br><span class="line">bar,100,30.6</span><br><span class="line">rucy,100,20.5</span><br></pre></td></tr></table></figure><ul class="lvl-0"><li class="lvl-2"><p><code>-k</code> 和 <code>-u</code> 同时使用要注意，<code>-u</code> 去重时比较的是 <code>-k</code> 指定的区域</p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 此时比较的是从第二个域到行尾是否重复，所以没有可以去掉的行</span></span><br><span class="line">$ <span class="built_in">sort</span> -t <span class="string">&quot;,&quot;</span> -k 2n -u file</span><br><span class="line">foo,20,1.2</span><br><span class="line">tom,68,9.1</span><br><span class="line">alex,68,9.8</span><br><span class="line">jack,71,18.7</span><br><span class="line">rucy,100,20.5</span><br><span class="line">bar,100,30.6</span><br><span class="line"></span><br><span class="line"><span class="comment"># 此时比较的仅仅是第二个域，所以第二列重复的行会被去重</span></span><br><span class="line">$ <span class="built_in">sort</span> -t <span class="string">&quot;,&quot;</span> -k 2,2n -u file</span><br><span class="line">foo,20,1.2</span><br><span class="line">tom,68,9.1</span><br><span class="line">jack,71,18.7</span><br><span class="line">bar,100,30.6</span><br></pre></td></tr></table></figure><h2 id="uniq">uniq</h2><ul class="lvl-0"><li class="lvl-2"><p>uniq命令用于报告或忽略文件中的重复行，一般与sort命令结合使用</p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">cat</span> file</span><br><span class="line">alex; 68; 98</span><br><span class="line">barr;hello; <span class="built_in">test</span></span><br><span class="line">barr;hello; <span class="built_in">test</span></span><br><span class="line">fooo;loveable;s</span><br><span class="line">jack; 71; 87</span><br><span class="line">jack; 71; 87</span><br><span class="line">mytest; Mark; Percent</span><br><span class="line">tom; 69; 91</span><br><span class="line"></span><br><span class="line">$ <span class="built_in">sort</span> file | <span class="built_in">uniq</span></span><br><span class="line">alex; 68; 98</span><br><span class="line">barr;hello; <span class="built_in">test</span></span><br><span class="line">fooo;loveable;s</span><br><span class="line">jack; 71; 87</span><br><span class="line">mytest; Mark; Percent</span><br><span class="line">tom; 69; 91</span><br><span class="line"></span><br><span class="line"><span class="comment"># -c,--count：在每列旁边显示该行重复出现的次数</span></span><br><span class="line">$ <span class="built_in">sort</span> file | <span class="built_in">uniq</span> -c</span><br><span class="line">1 alex; 68; 98</span><br><span class="line">2 barr;hello; <span class="built_in">test</span></span><br><span class="line">1 fooo;loveable;s</span><br><span class="line">2 jack; 71; 87</span><br><span class="line">1 mytest; Mark; Percent</span><br><span class="line">1 tom; 69; 91</span><br><span class="line"></span><br><span class="line"><span class="comment"># -d,--repeated：仅显示重复出现的行</span></span><br><span class="line">$ <span class="built_in">sort</span> file | <span class="built_in">uniq</span> -d</span><br><span class="line">barr;hello; <span class="built_in">test</span></span><br><span class="line">jack; 71; 87</span><br><span class="line"></span><br><span class="line"><span class="comment"># -D, --all-repeated[=delimit-method]，打印重复行的所有行。</span></span><br><span class="line"><span class="comment"># 其中 delimit-method 表示对重复行集合的分隔方式，有三种取值，分别为none、prepend和separate。</span></span><br><span class="line"><span class="comment"># 其中none表示不进行分隔，为默认选项，uniq -D等同于uniq --all-repeated=none；prepend表示在每一个重复行集合前面插入一个空行；separate表示在每个重复行集合间插入一个空行。</span></span><br><span class="line">$ <span class="built_in">sort</span> file | <span class="built_in">uniq</span> -D</span><br><span class="line">barr;hello; <span class="built_in">test</span></span><br><span class="line">barr;hello; <span class="built_in">test</span></span><br><span class="line">jack; 71; 87</span><br><span class="line">jack; 71; 87</span><br><span class="line"></span><br><span class="line">$ <span class="built_in">sort</span> file | <span class="built_in">uniq</span> --all-repeated=separate</span><br><span class="line">barr;hello; <span class="built_in">test</span></span><br><span class="line">barr;hello; <span class="built_in">test</span></span><br><span class="line"></span><br><span class="line">jack; 71; 87</span><br><span class="line">jack; 71; 87</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># -u,--unique：只显示唯一的行，即出现次数等于1的行</span></span><br><span class="line">$ <span class="built_in">sort</span> file | <span class="built_in">uniq</span> -u</span><br><span class="line">alex; 68; 98</span><br><span class="line">fooo;loveable;s</span><br><span class="line">mytest; Mark; Percent</span><br><span class="line">tom; 69; 91</span><br><span class="line"></span><br><span class="line"><span class="comment"># 其它参数</span></span><br><span class="line">-f, --skip-fields=N</span><br><span class="line">忽略前N个字段。字段由空白字符（空格符、Tab）分隔。如果您的文档的行被编号，并且您希望比较行中除行号之外的所有内容。如果指定了选项 -f 1，那么下面相邻的两行：</span><br><span class="line">1 这是一条线</span><br><span class="line">2 这是一条线</span><br><span class="line">将被认为是相同的。如果没有指定 -f 1 选项，它们将被认为是不同的。</span><br><span class="line">-i, --ignore-case</span><br><span class="line">忽略大小写字符的不同。</span><br><span class="line">-s, --skip-chars=N</span><br><span class="line">跳过前面N个字符不比较。</span><br><span class="line">-w, --check-chars=N</span><br><span class="line">指定每行要比较的前N个字符数。</span><br></pre></td></tr></table></figure><h2 id="wc">wc</h2><ul class="lvl-0"><li class="lvl-2"><p>wc（word count）命令用于统计文件字节、字符、单词与行的数量</p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -l, --lines 统计行数，在统计记录数时，很常用</span></span><br><span class="line">$ <span class="built_in">wc</span> -l /etc/passwd</span><br><span class="line">29 /etc/passwd</span><br><span class="line"></span><br><span class="line"><span class="comment"># -w, --words 统计单词出现次数</span></span><br><span class="line">$ <span class="built_in">wc</span> -w /etc/passwd</span><br><span class="line">48 /etc/passwd</span><br><span class="line"></span><br><span class="line"><span class="comment"># -c, --bytes 统计文件的字节数</span></span><br><span class="line">$ <span class="built_in">wc</span> -c /etc/passwd</span><br><span class="line">1387</span><br><span class="line"></span><br><span class="line"><span class="comment"># -m, --chars 统计文件的字符数，如果是 ASCII、Latin-1 等单字节编码的字符，字符数等于字节数</span></span><br><span class="line">$ <span class="built_in">wc</span> -m /etc/passwd</span><br><span class="line">1387</span><br><span class="line"></span><br><span class="line"><span class="comment"># -L, --max-line-length 显示文件中最长行的字符数</span></span><br><span class="line">$ <span class="built_in">wc</span> -L /etc/passwd</span><br><span class="line">85 /etc/passwd</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;!--
 **加粗**
 *斜体*
 ***加粗并斜体***
 ~~删除线~~
 ==突出显示==
 `突出显示(推荐)`
 ++下划线++
 ~下标~
 ^上标^
 脚注，参考文献[^1]，然后在文档最下方要添加这个1对应的内容，如：[^1]: My reference.
 图片设置宽度和高度 ![](https://upic-oss.oss-cn-beijing.aliyuncs.com/uPic/innodb_buffer_pool.png =900x600)

 +++ **点击折叠**
 这是被隐藏的内容
 +++

::: tips success warning danger
这里是容器内的内容
:::

% note info % success warning danger
这里是容器内的内容
% endnote %

 --&gt;
&lt;h2 id=&quot;摘要&quot;&gt;摘要&lt;/h2&gt;
&lt;ul class=&quot;lvl-0&quot;&gt;
&lt;li class=&quot;lvl-2&quot;&gt;
&lt;p&gt;文本的排序、去重和统计行数等相关命令，如sort、uniq、wc等等&lt;/p&gt;
&lt;/li&gt;
&lt;li class=&quot;lvl-2&quot;&gt;
&lt;p&gt;本文基于&lt;code&gt;CentOS8(x86_64)&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;</summary>
    
    
    
    <category term="技术" scheme="https://blog.hanqunfeng.com/categories/%E6%8A%80%E6%9C%AF/"/>
    
    <category term="linux" scheme="https://blog.hanqunfeng.com/categories/%E6%8A%80%E6%9C%AF/linux/"/>
    
    <category term="linux常用命令" scheme="https://blog.hanqunfeng.com/categories/%E6%8A%80%E6%9C%AF/linux/linux%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/"/>
    
    
    <category term="linux常用命令" scheme="https://blog.hanqunfeng.com/tags/linux%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/"/>
    
  </entry>
  
  <entry>
    <title>Linux常用命令--文本分割相关命令</title>
    <link href="https://blog.hanqunfeng.com/2023/03/06/linux-command03-split/"/>
    <id>https://blog.hanqunfeng.com/2023/03/06/linux-command03-split/</id>
    <published>2023-03-06T13:40:05.000Z</published>
    <updated>2023-03-24T02:37:33.557Z</updated>
    
    <content type="html"><![CDATA[<!-- **加粗** *斜体* ***加粗并斜体*** ~~删除线~~ ==突出显示== `突出显示(推荐)` ++下划线++ ~下标~ ^上标^ 脚注，参考文献[^1]，然后在文档最下方要添加这个1对应的内容，如：[^1]: My reference. 图片设置宽度和高度 ![](https://upic-oss.oss-cn-beijing.aliyuncs.com/uPic/innodb_buffer_pool.png =900x600) +++ **点击折叠** 这是被隐藏的内容 +++::: tips success warning danger这里是容器内的内容:::% note info % success warning danger这里是容器内的内容% endnote % --><h2 id="摘要">摘要</h2><ul class="lvl-0"><li class="lvl-2"><p>文本分割合并等相关命令，如tr、cut、paste和split等等</p></li><li class="lvl-2"><p>本文基于<code>CentOS8(x86_64)</code></p></li></ul><span id="more"></span><h2 id="tr">tr</h2><ul class="lvl-0"><li class="lvl-2"><p>tr用来从标准输入中替换、缩减和删除字符，并将结果写到标准输出</p></li><li class="lvl-2"><p>语法</p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">tr</span> [选项]... SET1 [SET2]</span><br></pre></td></tr></table></figure><ul class="lvl-0"><li class="lvl-2"><p>示例</p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cat</span> file | <span class="built_in">tr</span> <span class="string">&#x27;do&#x27;</span> <span class="string">&#x27;hp&#x27;</span> : 将file中内容为<span class="keyword">do</span>替换为hp，替换内容与换内容长度一致</span><br><span class="line"><span class="built_in">cat</span> file | <span class="built_in">tr</span> <span class="string">&#x27;do&#x27;</span> <span class="string">&#x27;hpa&#x27;</span> : 将file中内容为<span class="keyword">do</span>替换为hp，多出的a会内忽略</span><br><span class="line"><span class="built_in">cat</span> file | <span class="built_in">tr</span> <span class="string">&#x27;doABC&#x27;</span> <span class="string">&#x27;hp&#x27;</span> : 将file中内容为<span class="keyword">do</span>替换为hp，ABC都是用替换内容的最后一个字符p进行替换，即doABC替换为hpppp</span><br><span class="line"><span class="built_in">cat</span> file | <span class="built_in">tr</span> <span class="string">&quot;a-z&quot;</span> <span class="string">&quot;A-Z&quot;</span> : 将小写字符替换为大写字符</span><br><span class="line"><span class="built_in">cat</span> file | <span class="built_in">tr</span> <span class="string">&quot;\t&quot;</span> <span class="string">&quot;$&quot;</span> : 支持转义字符，这里将tab替换为$</span><br><span class="line"><span class="built_in">cat</span> file | <span class="built_in">tr</span> -d <span class="string">&#x27;do&#x27;</span> : 将file中内容为<span class="keyword">do</span>的内容删除</span><br><span class="line"><span class="built_in">cat</span> file | <span class="built_in">tr</span> -s <span class="string">&#x27;a-z&#x27;</span> : 去除file中重复的小写字符，只保留第一个</span><br></pre></td></tr></table></figure><h2 id="cut">cut</h2><ul class="lvl-0"><li class="lvl-2"><p>cut命令可以用于分隔每行的内容</p></li><li class="lvl-2"><p>语法</p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cut</span> [选项]... [文件]...</span><br></pre></td></tr></table></figure><ul class="lvl-0"><li class="lvl-2"><p>示例</p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 以空格作为分隔符，打印第一组</span></span><br><span class="line"><span class="built_in">cut</span> -d <span class="string">&quot; &quot;</span> -f1 file</span><br><span class="line">    -d：分隔符，按照指定分隔符分割列。与 -f 一起使用</span><br><span class="line">    -f：依据 -d 的分隔字符将一段信息分割成为数段，用 -f 取出第几段的意思（列号，提取第几列）</span><br><span class="line"></span><br><span class="line"><span class="comment"># 以;作为分隔符，打印第二组和第三组，注意打印多组时，分隔符也会打印</span></span><br><span class="line"><span class="built_in">cut</span> -d <span class="string">&quot;;&quot;</span> -f2,3 file</span><br><span class="line"></span><br><span class="line"><span class="comment"># 从file文件中取出每行的第5~8个字符</span></span><br><span class="line"><span class="built_in">cut</span> -c 5-8 file</span><br><span class="line">    -c : 以字符 (characters) 的单位取出固定字符区间，可以用来分割中文</span><br><span class="line"></span><br><span class="line"><span class="comment"># 从file文件中取出每行的第2,4,6个字节</span></span><br><span class="line"><span class="built_in">cut</span> -b 2,4,6 file</span><br><span class="line">    -b : 以字节为单位进行分割</span><br><span class="line"></span><br><span class="line"><span class="comment"># 从file文件中取出每行的第6个字节之前的内容</span></span><br><span class="line"><span class="built_in">cut</span> -b -6 file</span><br><span class="line"><span class="comment"># 从file文件中取出每行的第3，第4、第5和第8个字节，数字定位的顺序必须由小到大</span></span><br><span class="line"><span class="built_in">cut</span> -b 3-5,8 file</span><br><span class="line"></span><br><span class="line"><span class="comment"># 如果使用-b提取中文，如果提取到的不是一个完整的中文字符所占的字节，就会出现乱码</span></span><br><span class="line"><span class="comment"># 比如在utf8编码下，一个中文占3个字节</span></span><br><span class="line"><span class="built_in">cut</span> -b 1 file : 此时中文字符会出现乱码</span><br><span class="line"><span class="comment"># 如果希望中文也能完整的提取，可以加上 -n</span></span><br><span class="line"><span class="built_in">cut</span> -nb 1 file</span><br></pre></td></tr></table></figure><h2 id="paste">paste</h2><ul class="lvl-0"><li class="lvl-2"><p>将多个文件的相应行用制表符连接起来，并输出到标准输出</p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">cat</span> p1.txt</span><br><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">$ <span class="built_in">cat</span> p2.txt</span><br><span class="line">zhangsan</span><br><span class="line">lisi</span><br><span class="line">wangwu</span><br><span class="line"></span><br><span class="line"><span class="comment"># 默认分隔符为制表符</span></span><br><span class="line">$ <span class="built_in">paste</span> p1.txt p2.txt</span><br><span class="line">1zhangsan</span><br><span class="line">2lisi</span><br><span class="line">3wangwu</span><br><span class="line"></span><br><span class="line"><span class="comment"># 指定逗号为分隔符</span></span><br><span class="line">$ <span class="built_in">paste</span> -d <span class="string">&quot;,&quot;</span> p1.txt p2.txt</span><br><span class="line">1,zhangsan</span><br><span class="line">2,lisi</span><br><span class="line">3,wangwu</span><br><span class="line"></span><br><span class="line"><span class="comment"># 每个文件的内容作为一行</span></span><br><span class="line">$ <span class="built_in">paste</span> -s -d <span class="string">&quot;,&quot;</span> p1.txt p2.txt</span><br><span class="line">1,2,3</span><br><span class="line">zhangsan,lisi,wangwu</span><br></pre></td></tr></table></figure><h2 id="split">split</h2><ul class="lvl-0"><li class="lvl-2"><p>split命令用于将一个文件分割成数个。该指令将大文件分割成较小的文件，在默认情况下将按照每1000行切割成一个小文件。默认前缀为“x”。没有输入，或者当输入为<code>-</code>，则读取标准输入。</p></li><li class="lvl-2"><p>语法</p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">split</span> [选项]... [输入 [前缀]]</span><br></pre></td></tr></table></figure><ul class="lvl-0"><li class="lvl-2"><p>示例</p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 分割为1000行的小文件，文件名格式xaa,xab...</span></span><br><span class="line"><span class="built_in">split</span> file</span><br><span class="line"></span><br><span class="line"><span class="comment">#prefix指定分割后的文件前缀，默认为x</span></span><br><span class="line"><span class="built_in">split</span> file prefix</span><br><span class="line"></span><br><span class="line"><span class="comment"># 分割为指定行数的文件，如100行</span></span><br><span class="line"><span class="built_in">split</span> -l 100 file</span><br><span class="line"></span><br><span class="line"><span class="comment"># 分割为500M大小的文件</span></span><br><span class="line"><span class="built_in">split</span> -b 500M file</span><br><span class="line"></span><br><span class="line"><span class="comment"># 指定分割后小文件名后缀</span></span><br><span class="line"><span class="built_in">split</span> --additional-suffix=.<span class="built_in">log</span> file</span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用数字代替字符文件名，分割后的文件名为x00,x01...的数字形式</span></span><br><span class="line"><span class="built_in">split</span> -d file</span><br><span class="line"></span><br><span class="line"><span class="comment"># 指定分割后小文件名前缀后跟的文件名长度(不含前缀和后缀)，默认长度为2，这里文件名格式为xaaa.log,xaab.log...</span></span><br><span class="line"><span class="comment"># 当分割后文件的数量大于文件名能表达的最大文件数时，会报错</span></span><br><span class="line"><span class="built_in">split</span> -a 3 --additional-suffix=.<span class="built_in">log</span> file</span><br><span class="line"></span><br><span class="line"><span class="comment"># 将分割后的文件合并，如文件名格式为xaaa.log,xaab.log</span></span><br><span class="line"><span class="built_in">cat</span> x*.<span class="built_in">log</span> &gt; newfile</span><br></pre></td></tr></table></figure><ul class="lvl-0"><li class="lvl-2"><p>实战<br>使用split数字命名时，序号是从0开始的，如果希望从1开始，可以使用如下方法：</p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 拆分为每100行一个文件，5位数字序号命名，文件名称为: x00000,x00001 ...</span></span><br><span class="line"><span class="built_in">split</span> -a 5 -d -l 100 content.txt</span><br><span class="line"><span class="comment"># 将每个文件名称中的数字加1后重新命名为: new00001,new00002 ...</span></span><br><span class="line"><span class="built_in">ls</span> -1 | grep ^x | awk -F <span class="string">&#x27;x&#x27;</span> <span class="string">&#x27;&#123;d=sprintf(&quot;%05d&quot; ,$2+1);system(&quot;mv &quot;$0&quot; new&quot;d)&#125;&#x27;</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;!--
 **加粗**
 *斜体*
 ***加粗并斜体***
 ~~删除线~~
 ==突出显示==
 `突出显示(推荐)`
 ++下划线++
 ~下标~
 ^上标^
 脚注，参考文献[^1]，然后在文档最下方要添加这个1对应的内容，如：[^1]: My reference.
 图片设置宽度和高度 ![](https://upic-oss.oss-cn-beijing.aliyuncs.com/uPic/innodb_buffer_pool.png =900x600)

 +++ **点击折叠**
 这是被隐藏的内容
 +++

::: tips success warning danger
这里是容器内的内容
:::

% note info % success warning danger
这里是容器内的内容
% endnote %

 --&gt;
&lt;h2 id=&quot;摘要&quot;&gt;摘要&lt;/h2&gt;
&lt;ul class=&quot;lvl-0&quot;&gt;
&lt;li class=&quot;lvl-2&quot;&gt;
&lt;p&gt;文本分割合并等相关命令，如tr、cut、paste和split等等&lt;/p&gt;
&lt;/li&gt;
&lt;li class=&quot;lvl-2&quot;&gt;
&lt;p&gt;本文基于&lt;code&gt;CentOS8(x86_64)&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;</summary>
    
    
    
    <category term="技术" scheme="https://blog.hanqunfeng.com/categories/%E6%8A%80%E6%9C%AF/"/>
    
    <category term="linux" scheme="https://blog.hanqunfeng.com/categories/%E6%8A%80%E6%9C%AF/linux/"/>
    
    <category term="linux常用命令" scheme="https://blog.hanqunfeng.com/categories/%E6%8A%80%E6%9C%AF/linux/linux%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/"/>
    
    
    <category term="linux常用命令" scheme="https://blog.hanqunfeng.com/tags/linux%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/"/>
    
  </entry>
  
  <entry>
    <title>Linux常用命令--awk</title>
    <link href="https://blog.hanqunfeng.com/2023/03/06/linux-command03-awk/"/>
    <id>https://blog.hanqunfeng.com/2023/03/06/linux-command03-awk/</id>
    <published>2023-03-06T13:35:05.000Z</published>
    <updated>2023-03-24T02:37:58.173Z</updated>
    
    <content type="html"><![CDATA[<!-- **加粗** *斜体* ***加粗并斜体*** ~~删除线~~ ==突出显示== `突出显示(推荐)` ++下划线++ ~下标~ ^上标^ 脚注，参考文献[^1]，然后在文档最下方要添加这个1对应的内容，如：[^1]: My reference. 图片设置宽度和高度 ![](https://upic-oss.oss-cn-beijing.aliyuncs.com/uPic/innodb_buffer_pool.png =900x600) +++ **点击折叠** 这是被隐藏的内容 +++::: tips success warning danger这里是容器内的内容:::% note info % success warning danger这里是容器内的内容% endnote % --><h2 id="摘要">摘要</h2><ul class="lvl-0"><li class="lvl-2"><p>awk命令使用说明</p></li><li class="lvl-2"><p>本文基于<code>CentOS8(x86_64)</code></p></li></ul><span id="more"></span><h2 id="awk">awk</h2><ul class="lvl-0"><li class="lvl-2"><p>awk是一个强大的文本分析工具，在其对数据分析并生成报告时，显得尤为强大。简单来说awk就是把文件逐行的读入，以空格为默认分隔符将每行切片，切开的部分再进行各种分析处理。</p></li><li class="lvl-2"><p>语法</p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">格式：awk [-F  field-separator]  <span class="string">&#x27;commands&#x27;</span>  input-file(s)</span><br><span class="line">其中，commands 是真正awk命令，[-F域分隔符]是可选的。 input-file(s) 是待处理的文件。</span><br><span class="line">在awk中，文件的每一行中，由域分隔符分开的每一项称为一个域。通常，在不指名-F域分隔符的情况下，默认的域分隔符是空格。</span><br><span class="line">如果希望指定两个或两个以上字符为分隔符时，则需要使用[ ]将分隔符括起来，如 -F [::]</span><br></pre></td></tr></table></figure><ul class="lvl-0"><li class="lvl-2"><p>commands的格式: <code>匹配规则&#123;执行命令&#125;</code></p></li><li class="lvl-2"><p>默认情况下，awk 会将如下变量分配给它在文本行中发现的数据字段：</p><blockquote><p>$0 代表整个文本行；<br>$1 代表文本行中的第 1 个数据字段；<br>$2 代表文本行中的第 2 个数据字段；<br>$n 代表文本行中的第 n 个数据字段。</p></blockquote></li></ul><div class="tips"><p><em><strong>小贴士</strong></em><br><code>awk</code>是一种编程语言，它有好几种实现(解释器)，常见的如<code>awk</code>、<code>nawk</code>、<code>mawk</code>、<code>gawk</code>，<br>CentOS、Ubuntu等常用的Linux系统下awk的默认实现就是<code>gawk</code>。</p></div><h3 id="功能参数">功能参数</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">功能参数解释</span><br><span class="line">-F    指定分隔符，默认空格，指定两个或两个以上字符为分隔符时，则需要使用[ ]将分隔符括起来，如 -F [::]</span><br><span class="line">-v    变量赋值</span><br><span class="line"></span><br><span class="line">模式                    解释</span><br><span class="line">/regexp/            匹配满足正则表达式的行</span><br><span class="line">+、-、*、/、%、^      加、减、乘、除、取余、指数</span><br><span class="line">=                    变量赋值</span><br><span class="line">||、&amp;&amp;                或者、并且</span><br><span class="line">~、!~                满足某个正则、不满足某个正则</span><br><span class="line">==、&gt;=、&lt;=、!=、&gt;、&lt; 等于、大于等于、小于等于、不等于、大于、小于</span><br></pre></td></tr></table></figure><ul class="lvl-0"><li class="lvl-2"><p>示例</p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 只是显示/etc/passwd的账户</span></span><br><span class="line">awk -F <span class="string">&#x27;:&#x27;</span> <span class="string">&#x27;&#123;print $1&#125;&#x27;</span> /etc/passwd</span><br><span class="line"></span><br><span class="line"><span class="comment"># 定义一个变量num=3,并参与计算并打印，num也可以设置为一个外部变量，如 num=$a，注意 &#123;&#125;里不能使用外部变量</span></span><br><span class="line">awk -F <span class="string">&#x27;:&#x27;</span> -v num=3 <span class="string">&#x27;&#123;print num*$3&#125;&#x27;</span> /etc/passwd</span><br><span class="line"></span><br><span class="line"><span class="comment"># 只是显示/etc/passwd的账户和账户对应的shell,而账户与shell之间以空格分割</span></span><br><span class="line">awk -F <span class="string">&#x27;:&#x27;</span> <span class="string">&#x27;&#123;print $1,$7&#125;&#x27;</span> /etc/passwd</span><br><span class="line"><span class="comment"># 只是显示/etc/passwd的账户和账户对应的shell,而账户与shell之间以tab分割</span></span><br><span class="line">awk -F <span class="string">&#x27;:&#x27;</span> <span class="string">&#x27;&#123;print $1&quot;\t&quot;$7&#125;&#x27;</span> /etc/passwd</span><br><span class="line"></span><br><span class="line"><span class="comment"># 只是显示/etc/passwd的账户和账户对应的shell,而账户与shell之间以逗号分割</span></span><br><span class="line"><span class="comment"># a.而且在所有行添加列名name,shell</span></span><br><span class="line">awk -F <span class="string">&#x27;:&#x27;</span> <span class="string">&#x27;BEGIN &#123;print &quot;name,shell&quot;&#125; &#123;print $1&quot;,&quot;$7&#125;&#x27;</span> /etc/passwd</span><br><span class="line"></span><br><span class="line"><span class="comment"># b.在最后一行添加&quot;blue,/bin/nosh&quot;。</span></span><br><span class="line">awk -F <span class="string">&#x27;:&#x27;</span> <span class="string">&#x27;&#123;print $1&quot;,&quot;$7&#125; END &#123;print &quot;blue,/bin/nosh&quot;&#125;&#x27;</span> /etc/passwd</span><br><span class="line"></span><br><span class="line"><span class="comment"># c.ab前后都加</span></span><br><span class="line">awk -F <span class="string">&#x27;:&#x27;</span> <span class="string">&#x27;BEGIN &#123;print &quot;name,shell&quot;&#125; &#123;print $1&quot;,&quot;$7&#125; END &#123;print &quot;blue,/bin/nosh&quot;&#125;&#x27;</span> /etc/passwd</span><br><span class="line"></span><br><span class="line"><span class="comment"># 搜索/etc/passwd有root关键字的所有行</span></span><br><span class="line">awk -F <span class="string">&#x27;:&#x27;</span> <span class="string">&#x27;/root/&#x27;</span> /etc/passwd</span><br><span class="line"></span><br><span class="line"><span class="comment"># 搜索/etc/passwd有root关键字的所有行，并显示对应的shell</span></span><br><span class="line">awk -F <span class="string">&#x27;:&#x27;</span> <span class="string">&#x27;/root/&#123;print $1,$7&#125;&#x27;</span> /etc/passwd </span><br><span class="line"><span class="comment"># 多个命令之间加上分号</span></span><br><span class="line">awk -F <span class="string">&#x27;:&#x27;</span> <span class="string">&#x27;/root/&#123;print $7;print $1&#125;&#x27;</span> /etc/passwd</span><br><span class="line"></span><br><span class="line"><span class="comment"># 匹配空白行，如果 test.txt 有 N 个空白行，那么执行此命令会输出 N 个 Blank line</span></span><br><span class="line">awk <span class="string">&#x27;/^$/&#123;print &quot;Blank line&quot;&#125;&#x27;</span> test.txt</span><br><span class="line"></span><br><span class="line"><span class="comment"># 匹配正则的行</span></span><br><span class="line">awk -F <span class="string">&quot;:&quot;</span> <span class="string">&#x27;$1~/root/&#123;print $1,$3,$7&#125;&#x27;</span> /etc/passwd</span><br><span class="line"><span class="comment"># 不匹配正则的行</span></span><br><span class="line">awk -F <span class="string">&quot;:&quot;</span> <span class="string">&#x27;$1!~/root/&#123;print $1,$3,$7&#125;&#x27;</span> /etc/passwd</span><br><span class="line"></span><br><span class="line"><span class="comment"># 也可以把命令写在文件中，通过 -f 指定</span></span><br><span class="line">awk -F <span class="string">&#x27;:&#x27;</span> -f awk.sh /etc/passwd</span><br><span class="line"><span class="built_in">cat</span> awk.sh</span><br><span class="line">/root/&#123;<span class="built_in">print</span> <span class="variable">$7</span>;<span class="built_in">print</span> <span class="variable">$1</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 并且，第一列字段包含rp并且行数大于10，打印行号和第1、3、7列，NR是内置变量，下面会说明</span></span><br><span class="line">awk -F <span class="string">&quot;:&quot;</span> <span class="string">&#x27;$1~/rp/ &amp;&amp; NR&gt;10 &#123;print NR,$1,$3,$7&#125;&#x27;</span> /etc/passwd</span><br><span class="line"><span class="comment"># 或者</span></span><br><span class="line">awk -F <span class="string">&quot;:&quot;</span> <span class="string">&#x27;$1~/rp/ || $1~/my/ &#123;print NR,$1,$3,$7&#125;&#x27;</span> /etc/passwd</span><br></pre></td></tr></table></figure><h3 id="awk内置变量">awk内置变量</h3><ul class="lvl-0"><li class="lvl-2"><p>内置变量使用时不需要$前缀</p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">ARGC               命令行参数个数</span><br><span class="line">ARGV               命令行参数排列</span><br><span class="line">ENVIRON            支持队列中系统环境变量的使用</span><br><span class="line">FILENAME           awk浏览的文件名</span><br><span class="line">FNR                浏览文件的记录数</span><br><span class="line">FS                 设置输入域分隔符，默认空格，等价于 -F选项</span><br><span class="line">NF                 浏览记录的域的个数，分隔后的列数，<span class="variable">$NF</span>表示打印最后一个字段</span><br><span class="line">NR                 已读的记录数,记录所在的行号</span><br><span class="line">OFS                输出域分隔符，默认空格</span><br><span class="line">ORS                输出记录分隔符,默认\n</span><br><span class="line">RS                 控制记录分隔符,默认\n</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 匹配包含root的行，并且打印行号，这里$NF 含以为：因为分隔后有7个字段，所有NF为7，$NF表示 $7 ,也就是打印第7个字段，即$NF表示打印最后一个字段</span></span><br><span class="line">awk -F <span class="string">&#x27;:&#x27;</span> <span class="string">&#x27;/root/&#123;print NR,$1,$3,$NF&#125;&#x27;</span> /etc/passwd</span><br><span class="line"><span class="comment"># 设置输出分隔符为逗号</span></span><br><span class="line">awk -F <span class="string">&#x27;:&#x27;</span> <span class="string">&#x27;BEGIN&#123;OFS=&quot;,&quot;&#125;/root/&#123;print NR,$1,$3,$NF&#125;&#x27;</span> /etc/passwd</span><br><span class="line"><span class="comment"># 或者</span></span><br><span class="line">awk -F <span class="string">&#x27;:&#x27;</span> <span class="string">&#x27;/root/&#123;OFS=&quot;,&quot;;print NR,$1,$3,$NF&#125;&#x27;</span> /etc/passwd</span><br><span class="line"></span><br><span class="line"><span class="comment"># 统计/etc/passwd:文件名，每行的行号，每行的列数，对应的完整行内容</span></span><br><span class="line">awk  -F <span class="string">&#x27;:&#x27;</span>  <span class="string">&#x27;&#123;print &quot;filename:&quot; FILENAME &quot;,linenumber:&quot; NR &quot;,columns:&quot; NF &quot;,linecontent:&quot;$0&#125;&#x27;</span> /etc/passwd</span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用printf替代print,可以让代码更加简洁，易读</span></span><br><span class="line">awk  -F <span class="string">&#x27;:&#x27;</span>  <span class="string">&#x27;&#123;printf(&quot;filename:%10s,linenumber:%s,columns:%s,linecontent:%s\n&quot;,FILENAME,NR,NF,$0)&#125;&#x27;</span> /etc/passwd</span><br></pre></td></tr></table></figure><div class="tips"><p><em><strong>print和printf</strong></em></p><ul class="lvl-1"><li class="lvl-2">awk中同时提供了print和printf两种打印输出的函数。</li><li class="lvl-2">其中print函数的参数可以是变量、数值或者字符串。字符串必须用双引号引用，参数用逗号分隔。如果没有逗号，参数就串联在一起而无法区分。这里，逗号的作用与输出文件的分隔符的作用是一样的，只是后者是空格而已。</li><li class="lvl-2">printf函数，其用法和c语言中printf基本相似,可以格式化字符串,输出复杂时，printf更加好用，代码更易懂。</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">%s : 字符串</span><br><span class="line">%ms : 占位m个字节，默认右对齐，比如: %10s</span><br><span class="line">%-ms : 占位m个字节，负号表示左对齐，正号表示右对齐，比如: %-10s</span><br><span class="line">%d : 按十进制整型数据的实际长度输出。</span><br><span class="line">%ld : 长整型</span><br><span class="line">%md : m 为指定的输出字段的宽度。如果数据的位数小于 m，则左端补以空格，若大于 m，则按实际位数输出，默认友对齐。比如: %10d</span><br><span class="line">%-md : 负号表示左对齐。比如: %-10d</span><br><span class="line">%u : 无符号整型</span><br><span class="line">%mu : 无符号整型，默认友对齐。比如: %10u</span><br><span class="line">%-mu : 无符号整型，负号表示左对齐。比如: %-10u</span><br><span class="line">%c : 字符</span><br><span class="line">%f : 用来输出实数，包括单精度和双精度，以小数形式输出。整数部分全部输出，小数部分输出 6 位，超过 6 位的四舍五入。</span><br><span class="line">%mf : m 为指定的输出字段的宽度，默认右对齐，比如: %20f</span><br><span class="line">%-mf : m 为指定的输出字段的宽度，负号表示左对齐，比如: %-20f</span><br><span class="line">%.mf : 输出实数时小数点后保留 m 位，注意 m 前面有个点，比如: %.2f</span><br><span class="line">%m.mf : 负号表示左对齐，比如: %-20.2f</span><br><span class="line">%o : 以八进制整数形式输出，输出格式为：24</span><br><span class="line">%<span class="comment">#o : 以八进制整数形式输出，输出格式为：024</span></span><br><span class="line">%x : 以十六进制形式输出，输出格式为：2f</span><br><span class="line">%X : 以十六进制形式输出，输出格式为：2F</span><br><span class="line">%<span class="comment">#x : 以十六进制形式输出，输出格式为：0x2f</span></span><br><span class="line">%<span class="comment">#X : 以十六进制形式输出，输出格式为：0x2F</span></span><br><span class="line">\n : 换行符，支持转义字符，如 \t 等等</span><br><span class="line">\% : %</span><br><span class="line">\&quot; : <span class="string">&quot;</span></span><br><span class="line"><span class="string">\\ : \</span></span><br></pre></td></tr></table></figure></div><h3 id="awk编程">awk编程</h3><h4 id="基础语句">基础语句</h4><ul class="lvl-0"><li class="lvl-2"><p><code>BEGIN &#123;&#125; &#123;&#125; END&#123;&#125;</code></p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># count是自定义变量。之前的action&#123;&#125;里都是只有一个print,其实print只是一个语句，而action&#123;&#125;可以有多个语句，以;号隔开。</span></span><br><span class="line">awk <span class="string">&#x27;&#123;count++;print $0;&#125; END&#123;print &quot;user count is &quot;, count&#125;&#x27;</span> /etc/passwd</span><br><span class="line"></span><br><span class="line"><span class="comment"># 上面没有初始化count，虽然默认是0，但是妥当的做法还是初始化为0:</span></span><br><span class="line">awk <span class="string">&#x27;BEGIN &#123;count=0;print &quot;[start]user count is &quot;, count&#125; &#123;count=count+1;print $0;&#125; END&#123;print &quot;[end]user count is &quot;, count&#125;&#x27;</span> /etc/passwd</span><br><span class="line"></span><br><span class="line"><span class="comment"># 统计某个文件夹下的文件占用的字节数，单位M</span></span><br><span class="line"><span class="built_in">ls</span> -l |awk <span class="string">&#x27;BEGIN &#123;size=0;&#125; &#123;size=size+$5;&#125; END&#123;print &quot;[end]size is &quot;, size/1024/1024,&quot;M&quot;&#125;&#x27;</span> </span><br></pre></td></tr></table></figure><h4 id="条件语句">条件语句</h4><ul class="lvl-0"><li class="lvl-2"><p>awk中的条件语句是从C语言中借鉴来的，见如下声明方式：</p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># a</span></span><br><span class="line"><span class="keyword">if</span> (expression) &#123;</span><br><span class="line">    statement;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># b</span></span><br><span class="line"><span class="keyword">if</span> (expression) &#123;</span><br><span class="line">    statement;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    statement2;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># c</span></span><br><span class="line"><span class="keyword">if</span> (expression) &#123;</span><br><span class="line">    statement1;</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (expression1) &#123;</span><br><span class="line">    statement2;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    statement3;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul class="lvl-0"><li class="lvl-2"><p>示例</p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 1.检测系统中UID为0的用户</span></span><br><span class="line">awk -F : <span class="string">&#x27;&#123;if($3==0) &#123;print $1&#125;&#125;&#x27;</span> /etc/passwd</span><br><span class="line">简写：</span><br><span class="line">awk -F : <span class="string">&#x27;$3==0 &#123;print $1&#125;&#x27;</span> /etc/passwd</span><br><span class="line"></span><br><span class="line">-F表示使用什么做为分隔符，这里使用冒号，默认是空格</span><br><span class="line"><span class="variable">$num</span>表示文件的第几列，这里<span class="variable">$1</span>表示第一列</span><br><span class="line"><span class="string">&#x27;&#x27;</span>:固定格式，执行命令，这里表示，如果第三列是0,则打印第一列的内容</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 2.检测系统中密码为空的用户</span></span><br><span class="line"></span><br><span class="line">awk -F : <span class="string">&#x27;&#123;if(length($2)==0) &#123;print $1&#125;&#125;&#x27;</span> /etc/passwd</span><br><span class="line">简写：</span><br><span class="line">awk -F : <span class="string">&#x27;length($2)==0 &#123;print $1&#125;&#x27;</span> /etc/passwd</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 3.取出第三行，第一列的值</span></span><br><span class="line"></span><br><span class="line">awk <span class="string">&#x27;&#123;if(NR==3) &#123;print $1&#125;&#125;&#x27;</span> file</span><br><span class="line">简写：</span><br><span class="line">awk <span class="string">&#x27;NR==3 &#123;print $1&#125;&#x27;</span> file</span><br><span class="line"></span><br><span class="line"><span class="comment"># 4.跳过第一行</span></span><br><span class="line">awk <span class="string">&#x27;&#123;if(NR&gt;1) &#123;print $0&#125;&#125;&#x27;</span> file</span><br><span class="line">简写：</span><br><span class="line">awk <span class="string">&#x27;NR&gt;1 &#123;print $0&#125;&#x27;</span> file</span><br><span class="line"></span><br><span class="line"><span class="comment"># 5.求和</span></span><br><span class="line">awk -F <span class="string">&#x27;;&#x27;</span> <span class="string">&#x27;&#123;if($3&gt;0) &#123;s+=$3&#125;&#125; END &#123;print s&#125;&#x27;</span> file</span><br><span class="line">简写：</span><br><span class="line">awk -F <span class="string">&#x27;;&#x27;</span> <span class="string">&#x27;$3&gt;0 &#123;s+=$3&#125; END &#123;print s&#125;&#x27;</span> file</span><br><span class="line"></span><br><span class="line"><span class="comment"># 6.if else，~ ，!~某个字段满足某个正则或者不满足某个正则</span></span><br><span class="line">awk <span class="string">&#x27;&#123;if ($1 == &quot;foo&quot;) print &quot;Exact match foo&quot;; else if ($1 ~ &quot;bar&quot;) print &quot;Partial match bar&quot;; else print &quot;Baz&quot;&#125;&#x27;</span> path/to/file</span><br></pre></td></tr></table></figure><h4 id="aws数组">aws数组</h4><ul class="lvl-0"><li class="lvl-2"><p>awk中的数组用来从记录中收集信息，可以用于计算总和、统计单词以及跟踪模板被匹配的次数等等</p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">awk -F <span class="string">&#x27;:&#x27;</span> <span class="string">&#x27;BEGIN &#123;count=0;&#125; &#123;name[count] = $1;count++;&#125;; END&#123;for (i = 0; i &lt; NR; i++)&#123;print i, name[i]&#125;&#125;&#x27;</span> /etc/passwd</span><br><span class="line">简写：</span><br><span class="line">awk -F <span class="string">&#x27;:&#x27;</span> <span class="string">&#x27;BEGIN &#123;count=0;&#125; &#123;name[count] = $1;count++;&#125;; END&#123;for (i = 0; i &lt; NR; i++) print i, name[i]&#125;&#x27;</span> /etc/passwd</span><br></pre></td></tr></table></figure><h4 id="aws循环语句">aws循环语句</h4><ul class="lvl-0"><li class="lvl-2"><p>awk中的循环语句同样借鉴于C语言，支持while、do/while、for、break、continue，这些关键字的语义和C语言中的语义完全相同，感兴趣的自行查阅，这里不再赘述。</p></li></ul>]]></content>
    
    
    <summary type="html">&lt;!--
 **加粗**
 *斜体*
 ***加粗并斜体***
 ~~删除线~~
 ==突出显示==
 `突出显示(推荐)`
 ++下划线++
 ~下标~
 ^上标^
 脚注，参考文献[^1]，然后在文档最下方要添加这个1对应的内容，如：[^1]: My reference.
 图片设置宽度和高度 ![](https://upic-oss.oss-cn-beijing.aliyuncs.com/uPic/innodb_buffer_pool.png =900x600)

 +++ **点击折叠**
 这是被隐藏的内容
 +++

::: tips success warning danger
这里是容器内的内容
:::

% note info % success warning danger
这里是容器内的内容
% endnote %

 --&gt;
&lt;h2 id=&quot;摘要&quot;&gt;摘要&lt;/h2&gt;
&lt;ul class=&quot;lvl-0&quot;&gt;
&lt;li class=&quot;lvl-2&quot;&gt;
&lt;p&gt;awk命令使用说明&lt;/p&gt;
&lt;/li&gt;
&lt;li class=&quot;lvl-2&quot;&gt;
&lt;p&gt;本文基于&lt;code&gt;CentOS8(x86_64)&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;</summary>
    
    
    
    <category term="技术" scheme="https://blog.hanqunfeng.com/categories/%E6%8A%80%E6%9C%AF/"/>
    
    <category term="linux" scheme="https://blog.hanqunfeng.com/categories/%E6%8A%80%E6%9C%AF/linux/"/>
    
    <category term="linux常用命令" scheme="https://blog.hanqunfeng.com/categories/%E6%8A%80%E6%9C%AF/linux/linux%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/"/>
    
    
    <category term="linux常用命令" scheme="https://blog.hanqunfeng.com/tags/linux%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/"/>
    
  </entry>
  
  <entry>
    <title>Linux常用命令--sed</title>
    <link href="https://blog.hanqunfeng.com/2023/03/06/linux-command03-sed/"/>
    <id>https://blog.hanqunfeng.com/2023/03/06/linux-command03-sed/</id>
    <published>2023-03-06T13:31:05.000Z</published>
    <updated>2023-03-24T02:37:46.197Z</updated>
    
    <content type="html"><![CDATA[<!-- **加粗** *斜体* ***加粗并斜体*** ~~删除线~~ ==突出显示== `突出显示(推荐)` ++下划线++ ~下标~ ^上标^ 脚注，参考文献[^1]，然后在文档最下方要添加这个1对应的内容，如：[^1]: My reference. 图片设置宽度和高度 ![](https://upic-oss.oss-cn-beijing.aliyuncs.com/uPic/innodb_buffer_pool.png =900x600) +++ **点击折叠** 这是被隐藏的内容 +++::: tips success warning danger这里是容器内的内容:::% note info % success warning danger这里是容器内的内容% endnote % --><h2 id="摘要">摘要</h2><ul class="lvl-0"><li class="lvl-2"><p>sed命令使用说明</p></li><li class="lvl-2"><p>本文基于<code>CentOS8(x86_64)</code></p></li></ul><span id="more"></span><h2 id="sed">sed</h2><ul class="lvl-0"><li class="lvl-2"><p><code>sed</code> 是一种在线编辑器，它一次处理一行内容。处理时，把当前处理的行存储在临时缓冲区中，称为“模式空间”（pattern space），接着用sed命令处理缓冲区中的内容，处理完成后，把缓冲区的内容送往屏幕。接着处理下一行，这样不断重复，直到文件末尾。文件内容并没有改变，除非你使用重定向存储输出。</p></li><li class="lvl-2"><p><code>sed</code> 主要用来自动编辑一个或多个文件、简化对文件的反复操作、编写转换程序等。</p></li><li class="lvl-2"><p>语法</p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">格式：sed [options] <span class="string">&#x27;command&#x27;</span> file(s)</span><br></pre></td></tr></table></figure><ul class="lvl-0"><li class="lvl-2"><p>参数</p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">功能参数        解释</span><br><span class="line">-n            关闭输出，和p一起使用只输出被sed处理的行</span><br><span class="line">-e            多重编辑，且顺序会影响结果</span><br><span class="line">-r            使用扩展正则</span><br><span class="line">-i            将修改的内容覆盖到文档，使用时要小心</span><br><span class="line">-f            指定一个sed脚本文件到命令行执行</span><br><span class="line"></span><br><span class="line">范围表达式        解释</span><br><span class="line"><span class="string">&#x27;2,5p&#x27;</span>        打印2-5行</span><br><span class="line"><span class="string">&#x27;2p;5p&#x27;</span>         打印2和5行</span><br><span class="line"><span class="string">&#x27;2,+5p&#x27;</span>        打印第2行及其以下5行</span><br><span class="line"><span class="string">&#x27;2~2p&#x27;</span>        从第二行开始步长为2打印，即打印2，4，6，8……行</span><br><span class="line"><span class="string">&#x27;/regexp/p&#x27;</span>    打印正则表达式匹配出的行</span><br><span class="line"><span class="string">&#x27;2,/aaa/p&#x27;</span>    打印第2行到下一次出现aaa的行，如果aaa在第二行之前或者不存在则打印到行尾</span><br><span class="line"><span class="string">&#x27;/aaa/,/bbb/p&#x27;</span>打印aaa所在的行到bbb所在的行，如果bbb在aaa之前或者不存在则打印到行尾</span><br><span class="line"></span><br><span class="line">动作 解释</span><br><span class="line">p    打印</span><br><span class="line">d    删除</span><br><span class="line">s    替换</span><br><span class="line">a    当前行后追加</span><br><span class="line">i    当前行前插入</span><br><span class="line">c    将当前行替换</span><br><span class="line">n    匹配行的下一行</span><br><span class="line">y    替换，固定用法 y/abcd/ABCD/ 将a替换为A，b替换为B……</span><br><span class="line">q    退出sed</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="1-删除：d命令">1)删除：d命令</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 删除example文件的第二行</span></span><br><span class="line">sed <span class="string">&#x27;2d&#x27;</span> example</span><br><span class="line"><span class="comment"># 删除第二行和第五行</span></span><br><span class="line">sed <span class="string">&#x27;2d;5d&#x27;</span> example</span><br><span class="line"><span class="comment"># 删除第二行到第五行</span></span><br><span class="line">sed <span class="string">&#x27;2,5d&#x27;</span> example</span><br><span class="line"><span class="comment"># 删除第二行及其之后的五行</span></span><br><span class="line">sed <span class="string">&#x27;2,+5d&#x27;</span> example</span><br><span class="line"><span class="comment"># 删除example文件的第二行到末尾所有行</span></span><br><span class="line">sed <span class="string">&#x27;2,$d&#x27;</span> example  </span><br><span class="line"><span class="comment"># 删除example文件的最后一行</span></span><br><span class="line">sed <span class="string">&#x27;$d&#x27;</span> example</span><br><span class="line"><span class="comment"># 删除example文件所有包含test的行</span></span><br><span class="line">sed <span class="string">&#x27;/test/d&#x27;</span> example</span><br><span class="line"><span class="comment"># 所有在模板test和check所确定的范围内的行都被删除</span></span><br><span class="line">sed <span class="string">&#x27;/test/,/check/d&#x27;</span> example</span><br><span class="line"><span class="comment"># 从第一行开始，每间隔一行删除一行，这里表示删除1，3，5...行</span></span><br><span class="line">sed <span class="string">&#x27;1~2d&#x27;</span> example</span><br><span class="line"><span class="comment"># 删除匹配行的下一行，n表示下一行</span></span><br><span class="line">sed <span class="string">&#x27;/test/&#123;n;d&#125;&#x27;</span> example</span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除变量指定的行，注意这里要使用双引号</span></span><br><span class="line">sed <span class="string">&quot;1,<span class="variable">$&#123;lineNum&#125;</span>d&quot;</span> example</span><br></pre></td></tr></table></figure><h3 id="2-替换：s命令">2)替换：s命令</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 替换第几处模式匹配的地方，这里2表示替换第二处匹配的地方</span></span><br><span class="line">sed <span class="string">&#x27;s/test/mytest/2&#x27;</span> example</span><br><span class="line">    n : 1~512 之间的数字，表示指定要替换的字符串出现第几次时才进行替换</span><br><span class="line"></span><br><span class="line"><span class="comment"># 在整行范围内把test(i不区分大小写)替换为mytest。如果没有g标记，则只有每行第一个匹配的test被替换成mytest</span></span><br><span class="line">sed <span class="string">&#x27;s/test/mytest/ig&#x27;</span> example</span><br><span class="line">    i : 不区分大小写</span><br><span class="line">    g : 对数据中所有匹配到的内容进行替换，不加g只匹配第一个</span><br><span class="line"></span><br><span class="line"><span class="comment"># (-n)选项和p标志一起使用表示只打印那些发生替换的行。也就是说，如果某一行开头的test被替换成mytest，就打印它</span></span><br><span class="line">sed -n <span class="string">&#x27;s/^test/mytest/p&#x27;</span> example </span><br><span class="line">    -n : 关闭输出，和p标志一起使用表示只打印那些发生替换的行</span><br><span class="line"></span><br><span class="line"><span class="comment"># &amp;符号表示替换字符串中被找到的部份。所有以192.168.0.1开头的行都会被替换成它自已加 localhost，变成192.168.0.1localhost</span></span><br><span class="line">sed <span class="string">&#x27;s/^192.168.0.1/&amp;localhost/&#x27;</span> example </span><br><span class="line">    &amp; : 表示替换字符串中被找到的部份</span><br><span class="line"></span><br><span class="line"><span class="comment"># love被标记为1，所有loveable会被替换成lovers，而且替换的行会被打印出来。</span></span><br><span class="line">sed -n <span class="string">&#x27;s/\(love\)able/\1rs/p&#x27;</span> example </span><br><span class="line">    () : 标记搜索内容，括号顺序按1，2...顺序被标记，注意这里需要被转义</span><br><span class="line"><span class="comment"># love被标记为1，所有loveable会被替换成lovers，打印所有行</span></span><br><span class="line">sed -r <span class="string">&#x27;s/(^love)able/\1rs/&#x27;</span> example </span><br><span class="line">    -r : 支持扩展正则，这里()不需要被转义</span><br><span class="line"><span class="comment"># 所有loveable会被替换成loversbl，括号顺序按1，2...顺序被标记</span></span><br><span class="line">sed -r <span class="string">&#x27;s/(^love)a(bl)e/\1rs\2/&#x27;</span> example </span><br><span class="line"></span><br><span class="line"><span class="comment"># 不论什么字符，紧跟着s命令的都被认为是新的分隔符，所以，“#”在这里是分隔符，代替了默认的“/”分隔符。表示把所有10替换成100</span></span><br><span class="line">sed <span class="string">&#x27;s#10#100#g&#x27;</span> example </span><br><span class="line"></span><br><span class="line"><span class="comment"># -i直接替换源文件，慎重使用</span></span><br><span class="line">sed -i <span class="string">&#x27;s/test/mytest/ig&#x27;</span> example </span><br><span class="line">    -i : 直接替换源文件，慎重使用</span><br><span class="line"></span><br><span class="line"><span class="comment"># w标记会将匹配后的结果保存到指定文件中，注意这里text.txt中只会保留那些发生替换的行</span></span><br><span class="line">sed <span class="string">&#x27;s/test/mytest/w test.txt&#x27;</span> example  ====&gt; sed -n <span class="string">&#x27;s/test/mytest/p&#x27;</span> example &gt; test.txt</span><br><span class="line">    w : 会将匹配后的结果保存到指定文件中</span><br><span class="line"></span><br><span class="line"><span class="comment"># 替换变量指定的行，注意这里要使用双引号，如果替换内容为双引号，要进行转义</span></span><br><span class="line"><span class="comment"># 这里将第一行到指定的行中的&quot;&#125;替换为&quot;&#125;,</span></span><br><span class="line">sed -r <span class="string">&quot;1,<span class="variable">$&#123;lineNum&#125;</span>s/(\&quot;&#125;)/\1,/&quot;</span> example </span><br></pre></td></tr></table></figure><h3 id="3-选定行的范围：逗号">3)选定行的范围：逗号</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 所有在模板test和check所确定的范围内的行都被打印 </span></span><br><span class="line">sed -n <span class="string">&#x27;/test/,/check/p&#x27;</span> example</span><br><span class="line"><span class="comment"># 按连续内容截取，这里还是按关键字搜索匹配，这里假设每行都有序号并且连续</span></span><br><span class="line">sed -n <span class="string">&#x27;/5518/,/5524/p&#x27;</span> example  </span><br><span class="line"></span><br><span class="line"><span class="comment"># grep也有类似方法：</span></span><br><span class="line">countnum=$[ <span class="variable">$endnum</span> - <span class="variable">$startnum</span> + 1  ]</span><br><span class="line">grep <span class="string">&quot;<span class="variable">$startnum</span>&quot;</span> file -A <span class="variable">$countnum</span> </span><br><span class="line"></span><br><span class="line"><span class="comment"># 打印文件的第二行</span></span><br><span class="line">sed -n <span class="string">&#x27;2p&#x27;</span> example</span><br><span class="line"><span class="comment"># 打印文件的第二行和第四行</span></span><br><span class="line">sed -n <span class="string">&#x27;2p;4p&#x27;</span> example</span><br><span class="line"><span class="comment"># 打印第1行到第100百行</span></span><br><span class="line">sed -n <span class="string">&#x27;1,100p&#x27;</span> example  </span><br><span class="line"><span class="comment"># 打印从第五行开始到第一个包含以test开始的行之间的所有行</span></span><br><span class="line">sed -n <span class="string">&#x27;5,/^test/p&#x27;</span> example</span><br><span class="line"><span class="comment"># 打印从第一个包含以test开始的行到第五行之间的所有行</span></span><br><span class="line">sed -n <span class="string">&#x27;/^test/,5p&#x27;</span> example</span><br><span class="line"><span class="comment"># 打印从第一个包含以test开始的行到最后一行之间的所有行</span></span><br><span class="line">sed -n <span class="string">&#x27;/^test/,$p&#x27;</span> example</span><br><span class="line"><span class="comment"># 打印包含java或者linux的行</span></span><br><span class="line">sed -r -n <span class="string">&#x27;/java|linux/p&#x27;</span> example</span><br><span class="line"></span><br><span class="line"><span class="comment"># 从第一行开始，间隔2行打印，这里表示打印1，4，7，10...行</span></span><br><span class="line">sed -n <span class="string">&#x27;1~3p&#x27;</span> example</span><br><span class="line"></span><br><span class="line"><span class="comment"># 打印以java开头的所有行</span></span><br><span class="line">sed -n <span class="string">&#x27;/^java/p&#x27;</span> example</span><br><span class="line"><span class="comment"># 打印以java开头的所有行的下一行</span></span><br><span class="line">sed -n <span class="string">&#x27;/^java/&#123;n;p&#125;&#x27;</span> example</span><br><span class="line"></span><br><span class="line"><span class="comment"># 对于模板test和check之间的行，每行的末尾用字符串sed test替换</span></span><br><span class="line">sed <span class="string">&#x27;/test/,/check/s/$/sed test/&#x27;</span> example</span><br><span class="line"><span class="comment"># 第2到5行，每行的末尾用字符串sed test替换</span></span><br><span class="line">sed <span class="string">&#x27;2,5s/$/sed test/&#x27;</span> example</span><br><span class="line"><span class="comment"># 第2到最后一行，每行的末尾用字符串sed test替换</span></span><br><span class="line">sed <span class="string">&#x27;2,$s/$/sed test/&#x27;</span> example</span><br></pre></td></tr></table></figure><h3 id="4-多点编辑：e命令">4)多点编辑：e命令</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># (-e)选项允许在同一行里执行多条命令。如例子所示，第一条命令删除1至5行，第二条命令用check替换test。命令的执行顺序对结果有影响。如果两个命令都是替换命令，那么第一个替换命令将影响第二个替换命令的结果</span></span><br><span class="line">sed -e <span class="string">&#x27;1,5d&#x27;</span> -e <span class="string">&#x27;s/test/check/&#x27;</span> example</span><br><span class="line"></span><br><span class="line"><span class="comment"># 一个比-e更好的命令是--expression。它能给sed表达式赋值。</span></span><br><span class="line">sed --expression=<span class="string">&#x27;s/test/check/&#x27;</span> --expression=<span class="string">&#x27;/love/d&#x27;</span> example</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">totalLine=`<span class="built_in">cat</span> title_list.json | <span class="built_in">wc</span> -l`</span><br><span class="line">lastLineBefore1=$((<span class="variable">$totalLine</span>-<span class="number">1</span>))</span><br><span class="line">sed -i -r -e <span class="string">&quot;1,<span class="variable">$&#123;lastLineBefore1&#125;</span>s/(\&quot;&#125;)/\1,/&quot;</span> -e <span class="string">&#x27;1d&#x27;</span> -e <span class="string">&#x27;2i &#123;[&#x27;</span> -e <span class="string">&#x27;$a ]&#125;&#x27;</span> title_list.json</span><br></pre></td></tr></table></figure><h3 id="5-追加行或替换行：a、i、c和r">5)追加行或替换行：a、i、c和r</h3><ul class="lvl-0"><li class="lvl-2"><p>a 命令表示在指定行的后面附加一行，i 命令表示在指定行的前面插入一行</p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 将hello wordl 插入到第二行上面</span></span><br><span class="line">sed <span class="string">&#x27;2i hello world&#x27;</span> example</span><br><span class="line">    i : 表示在指定行的前面插入一行，<span class="variable">$i</span> 表示最后一行前插入</span><br><span class="line"></span><br><span class="line"><span class="comment"># 将hello wordl 插入到第二行下面</span></span><br><span class="line">sed <span class="string">&#x27;2a hello world&#x27;</span> example</span><br><span class="line">    a : 表示在指定行的后面插入一行，<span class="variable">$a</span> 表示最后一行后插入</span><br><span class="line"></span><br><span class="line"><span class="comment"># 也可以同时插入多行内容，使用反斜线即可，这里表示在第二行下面添加两行内容</span></span><br><span class="line">sed <span class="string">&#x27;2a\</span></span><br><span class="line"><span class="string">&gt; hello world\</span></span><br><span class="line"><span class="string">&gt; i love you&#x27;</span> example</span><br></pre></td></tr></table></figure><ul class="lvl-0"><li class="lvl-2"><p>c 命令表示将指定行中的所有内容，替换成该选项后面的字符串</p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 将匹配到的所有含有hello的行替换为hello world</span></span><br><span class="line">sed <span class="string">&#x27;/hello/c hello world&#x27;</span> example</span><br><span class="line"></span><br><span class="line"><span class="comment"># 将hello world 替换第二行</span></span><br><span class="line">sed <span class="string">&#x27;2c hello world&#x27;</span> example</span><br><span class="line">    c : 替换行内容</span><br><span class="line"><span class="comment"># 同样支持替换为多行</span></span><br><span class="line">sed <span class="string">&#x27;2c\</span></span><br><span class="line"><span class="string">&gt; hello world\</span></span><br><span class="line"><span class="string">&gt; i love you&#x27;</span> example</span><br></pre></td></tr></table></figure><ul class="lvl-0"><li class="lvl-2"><p>r 命令用于将一个独立文件的数据插入到当前数据流的指定位置</p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 将text.txt中的内容插入到example文件的第二行下面</span></span><br><span class="line">sed <span class="string">&#x27;2r test.txt&#x27;</span> example</span><br><span class="line"><span class="comment"># 将text.txt中的内容插入到example文件的末尾</span></span><br><span class="line">sed <span class="string">&#x27;$r test.txt&#x27;</span> example</span><br></pre></td></tr></table></figure><h3 id="6-处理单个字符：y">6)处理单个字符：y</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 将所有以hello开头的行中的 a替换为A，b替换为B，c替换为C，d替换为D</span></span><br><span class="line">sed <span class="string">&#x27;/^hello/y/abcd/ABCD/&#x27;</span> example</span><br><span class="line"></span><br><span class="line">$ <span class="built_in">echo</span> <span class="string">&quot;This 1 is a test2 of 1 try3.&quot;</span> | sed <span class="string">&#x27;y/123/456/&#x27;</span></span><br><span class="line">This 4 is a test5 of 4 try6.</span><br><span class="line">    y : 字符全局替换，原字符与替换字符的长度必须相同</span><br></pre></td></tr></table></figure><h3 id="7-指定行区间">7)指定行区间</h3><ul class="lvl-0"><li class="lvl-2"><p>默认情况下，sed 命令会作用于文本数据的所有行，如果只想将命令作用于特定行或某些行，需要明确指定行区间范围。</p></li><li class="lvl-2"><p>行区间可以通过如下两种方式进行限定：</p><blockquote><p>1.以数字形式指定行区间<br>2.用文本模式指定具体行区间</p></blockquote></li><li class="lvl-2"><p>行区间放在命令的前面，具体格式如下：</p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">[行区间]脚本命令</span><br><span class="line"></span><br><span class="line">或者</span><br><span class="line"></span><br><span class="line">行区间 &#123;</span><br><span class="line">    多个脚本命令,分号分隔</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul class="lvl-0"><li class="lvl-2"><p>示例:以数字形式指定行区间</p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 替换第二行中的内容</span></span><br><span class="line">sed <span class="string">&#x27;2s/dog/cat/&#x27;</span> test.txt</span><br><span class="line"><span class="comment"># 替换第二行到第四行中的内容</span></span><br><span class="line">sed <span class="string">&#x27;2,4s/dog/cat/&#x27;</span> test.txt</span><br><span class="line"><span class="comment"># 替换第二行到文件最后一行中的内容</span></span><br><span class="line">sed <span class="string">&#x27;2,$s/dog/cat/&#x27;</span> test.txt</span><br><span class="line"><span class="comment"># 从第一行开始，每间隔一行进行替换，1，3，5，7...</span></span><br><span class="line">sed <span class="string">&#x27;1~2s/dog/cat/&#x27;</span> test.txt</span><br></pre></td></tr></table></figure><ul class="lvl-0"><li class="lvl-2"><p>示例:用文本模式指定具体行区间</p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 替换内容中包含pig的所有行的内容</span></span><br><span class="line">sed <span class="string">&#x27;/pig/s/dog/cat/&#x27;</span> test.txt</span><br><span class="line"></span><br><span class="line"><span class="comment"># 正则匹配限制范围，&#123;&#125;指定多个脚本，这个命令的作用是将 h1Helloh1 转换为 &lt;h1&gt;Hello&lt;/h1&gt;</span></span><br><span class="line">sed <span class="string">&#x27;/h[0-9]/&#123;s//\&lt;&amp;\&gt;/1;s//\&lt;\/&amp;\&gt;/2&#125;&#x27;</span> test.txt</span><br><span class="line"><span class="comment"># 也可以将命令写到文件中，通过 -f 参数指定</span></span><br><span class="line">sed -f sed.txt test.txt</span><br><span class="line"><span class="built_in">cat</span> sed.txt</span><br><span class="line">/h[0-9]/&#123;</span><br><span class="line">    s//\&lt;&amp;\&gt;/1</span><br><span class="line">    s//\&lt;\/&amp;\&gt;/2</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;!--
 **加粗**
 *斜体*
 ***加粗并斜体***
 ~~删除线~~
 ==突出显示==
 `突出显示(推荐)`
 ++下划线++
 ~下标~
 ^上标^
 脚注，参考文献[^1]，然后在文档最下方要添加这个1对应的内容，如：[^1]: My reference.
 图片设置宽度和高度 ![](https://upic-oss.oss-cn-beijing.aliyuncs.com/uPic/innodb_buffer_pool.png =900x600)

 +++ **点击折叠**
 这是被隐藏的内容
 +++

::: tips success warning danger
这里是容器内的内容
:::

% note info % success warning danger
这里是容器内的内容
% endnote %

 --&gt;
&lt;h2 id=&quot;摘要&quot;&gt;摘要&lt;/h2&gt;
&lt;ul class=&quot;lvl-0&quot;&gt;
&lt;li class=&quot;lvl-2&quot;&gt;
&lt;p&gt;sed命令使用说明&lt;/p&gt;
&lt;/li&gt;
&lt;li class=&quot;lvl-2&quot;&gt;
&lt;p&gt;本文基于&lt;code&gt;CentOS8(x86_64)&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;</summary>
    
    
    
    <category term="技术" scheme="https://blog.hanqunfeng.com/categories/%E6%8A%80%E6%9C%AF/"/>
    
    <category term="linux" scheme="https://blog.hanqunfeng.com/categories/%E6%8A%80%E6%9C%AF/linux/"/>
    
    <category term="linux常用命令" scheme="https://blog.hanqunfeng.com/categories/%E6%8A%80%E6%9C%AF/linux/linux%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/"/>
    
    
    <category term="linux常用命令" scheme="https://blog.hanqunfeng.com/tags/linux%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/"/>
    
  </entry>
  
  <entry>
    <title>Linux常用命令--grep与egerp</title>
    <link href="https://blog.hanqunfeng.com/2023/03/06/linux-command03-grep/"/>
    <id>https://blog.hanqunfeng.com/2023/03/06/linux-command03-grep/</id>
    <published>2023-03-06T13:30:05.000Z</published>
    <updated>2023-03-24T05:53:51.925Z</updated>
    
    <content type="html"><![CDATA[<!-- **加粗** *斜体* ***加粗并斜体*** ~~删除线~~ ==突出显示== `突出显示(推荐)` ++下划线++ ~下标~ ^上标^ 脚注，参考文献[^1]，然后在文档最下方要添加这个1对应的内容，如：[^1]: My reference. 图片设置宽度和高度 ![](https://upic-oss.oss-cn-beijing.aliyuncs.com/uPic/innodb_buffer_pool.png =900x600) +++ **点击折叠** 这是被隐藏的内容 +++::: tips success warning danger这里是容器内的内容:::% note info % success warning danger这里是容器内的内容% endnote % --><h2 id="摘要">摘要</h2><ul class="lvl-0"><li class="lvl-2"><p>grep与egrep的使用</p></li><li class="lvl-2"><p>本文基于<code>CentOS8(x86_64)</code></p></li></ul><span id="more"></span><h2 id="grep">grep</h2><ul class="lvl-0"><li class="lvl-2"><p>grep命令是linux中一种强大的文本搜索工具，它能使用正则表达式搜索文本，并把匹配的行打印出来。</p></li><li class="lvl-2"><p>语法</p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">grep [option] pattern files</span><br></pre></td></tr></table></figure><ul class="lvl-0"><li class="lvl-2"><p>常用参数</p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">功能参数    解释</span><br><span class="line">-c        输出匹配到的行数，功能等同于<span class="built_in">wc</span> -l</span><br><span class="line">-i        正则表达式忽略大小写</span><br><span class="line">-l        查询多文件时只输出包含匹配字符的文件名</span><br><span class="line">-h        查询多文件时不显示文件名</span><br><span class="line">-n        显示匹配行的行号</span><br><span class="line">-s        不显示文件不存在或无匹配文本的错误信息</span><br><span class="line">-v        显示不包含匹配文本的行</span><br><span class="line">-w          强制 PATTERN 仅完全匹配字词</span><br><span class="line">-x          强制 PATTERN 仅完全匹配一行</span><br><span class="line">-e          用 PATTERN 来进行匹配操作，通常用来匹配多个条件或者PATTERN中含有参数项的</span><br><span class="line">-o          仅显示匹配的字符串本身，一行中有多个匹配，会分行显示</span><br><span class="line">-r          在指定目录下递归查找所有文件中匹配关键字的行</span><br><span class="line">-A        同时显示匹配行的后几行</span><br><span class="line">-B        同时显示匹配行的前几行</span><br><span class="line">-C        同时显示匹配行的前几行和后几行</span><br><span class="line">-NUM        同时显示匹配行的前几行和后几行，等同于 -C，如：-C 2 === -2</span><br><span class="line">-G          基本正则表达式，此为预设</span><br><span class="line">-E        扩展正则表达式，等同于egrep</span><br><span class="line">-P          Perl 正则表达式</span><br></pre></td></tr></table></figure><ul class="lvl-0"><li class="lvl-2"><p>示例</p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 匹配关键字key，忽略大小写</span></span><br><span class="line">grep -i key file</span><br><span class="line"></span><br><span class="line">grep <span class="string">&quot;^#&quot;</span> file : 显示所有行首是<span class="comment">#的行</span></span><br><span class="line">    ^ : 正则，以什么开头的行</span><br><span class="line">    $ : 正则，以什么结尾的行</span><br><span class="line"></span><br><span class="line">grep -v <span class="string">&quot;^#&quot;</span> file : 显示所有行首不是<span class="comment">#的行</span></span><br><span class="line">    -v : 找出与所给关键字不匹配的行</span><br><span class="line"></span><br><span class="line"><span class="comment"># 字符匹配</span></span><br><span class="line">grep [A] file : 行中内容包含给定的字符</span><br><span class="line">    [ ] : 匹配单个字符</span><br><span class="line">grep [^A] file : 行中内容不包含给定的字符</span><br><span class="line">    [^] : 不匹配单个字符</span><br><span class="line">grep [A-Z] file : 行中内容包含给定的字符范围中的任何一个</span><br><span class="line">    [-] : 匹配范围字符</span><br><span class="line"></span><br><span class="line">grep [ABC] file : 行中内容包含给定的字符列表中的任何一个</span><br><span class="line">grep [^ABC] file : 匹配除方括号中字符外的所有字符</span><br><span class="line"></span><br><span class="line"><span class="comment"># 字符类描述: 注意使用时外面要加[]</span></span><br><span class="line">[:alnum:] 字母数字集 “a-z A-Z 0-9”</span><br><span class="line">[:alpha:] 字母集合 “a-z A-Z”</span><br><span class="line">[:blank:] 空格或制表键</span><br><span class="line">[:cntrl:] 任何控制字符</span><br><span class="line">[:digit:] 数字集合 “0-9”</span><br><span class="line">[:graph:] 任何可视字符（无空格）</span><br><span class="line">[:lower:] 小写字母 “a-z”</span><br><span class="line">[:<span class="built_in">print</span>:] 非控制字符</span><br><span class="line">[:punct:] 标点字符</span><br><span class="line">[:space:] 空格</span><br><span class="line">[:upper:] 大写字母 “A-Z”</span><br><span class="line">[:xdigit:] 十六进制数字 “0-9 a-f A-F”</span><br><span class="line"></span><br><span class="line"><span class="comment"># 示例</span></span><br><span class="line"><span class="comment">#搜索开头不是英文字母的行</span></span><br><span class="line">grep ^[^[:alpha:]] file === grep ^[^a-zA-Z] file</span><br><span class="line"><span class="comment"># 搜索非空行</span></span><br><span class="line">grep -v <span class="string">&quot;^$&quot;</span> file : 搜索非空行，严格来讲这个不准确，不能去除行内容只有空格或者制表符的行</span><br><span class="line">grep [^[:blank:]] file : 搜索非空行，去除行内容只有空格或者制表符的行</span><br><span class="line"></span><br><span class="line">grep key file -A 10 : 显示关键字行及其后面的10行</span><br><span class="line">    -A : After</span><br><span class="line"></span><br><span class="line">grep key file -B 10 : 显示关键字行及其前面的10行</span><br><span class="line">    -B : Before</span><br><span class="line"></span><br><span class="line">grep key file -2 : 显示关键行及其上两行和下两行</span><br><span class="line">    -num : 显示上下各num行</span><br><span class="line"></span><br><span class="line"><span class="comment"># -E 开启扩展正则表达式</span></span><br><span class="line">grep -E <span class="string">&quot;^#&quot;</span> file  <span class="comment">#打印所有注释行</span></span><br><span class="line">    -E : 支持扩展正则表达式</span><br><span class="line"></span><br><span class="line">grep  -E <span class="string">&#x27;key1|key2&#x27;</span>  -n -i file : 查找包含任意关键字的行，并显示行号</span><br><span class="line">    -n : 显示行号</span><br><span class="line">    -i : 不区分大小写</span><br><span class="line"></span><br><span class="line">grep key -c file : 查找关键字匹配的行数</span><br><span class="line">    -c : 只输出匹配行的计数</span><br><span class="line"></span><br><span class="line"><span class="comment"># 这个命令非常有用，可以快速定位关键字所在的文件位置</span></span><br><span class="line">grep <span class="string">&#x27;key&#x27;</span> -r <span class="built_in">dir</span> : 在目录下递归查找文件内容包含关键字的文件路径及其所含关键字的内容</span><br><span class="line">    -r : 递归查找</span><br><span class="line"></span><br><span class="line">grep <span class="string">&#x27;key&#x27;</span> -l *.<span class="built_in">log</span> : 打印包含关键字的文件名称</span><br><span class="line">    -l : 在多个文件中查找关键字，并打印文件名称</span><br><span class="line"></span><br><span class="line"><span class="comment"># 把key当做一个完整的单词来进行匹配，忽略那些部分匹配的行，比如 to只能匹配to，不能匹配tom</span></span><br><span class="line">grep -w key file</span><br><span class="line"></span><br><span class="line"><span class="comment"># 如果不用 -e 会无法解析命令，即便加上双引号也不行 &quot;-vb-&quot;</span></span><br><span class="line">grep -e -vb- file</span><br><span class="line"></span><br><span class="line"><span class="comment"># 标准正则，匹配key1 或者 匹配key2，正则中的特殊符号需要转义</span></span><br><span class="line">grep -e key1 -e key2 file</span><br><span class="line"><span class="comment"># 扩展正则</span></span><br><span class="line">grep -Ee key1 -Ee key2 file</span><br><span class="line"></span><br><span class="line"><span class="comment"># 需要同时匹配key1和key2</span></span><br><span class="line">grep key1 file | grep key2</span><br><span class="line"></span><br><span class="line"><span class="comment"># -o 可以用来统计找到多少个匹配项</span></span><br><span class="line">grep -E <span class="string">&quot;ro+t&quot;</span> /etc/passwd</span><br><span class="line">root:x:0:0:root:/root:/bin/bash</span><br><span class="line">operator:x:11:0:operator:/root:/sbin/nologin</span><br><span class="line"><span class="comment"># 每个匹配项占一行</span></span><br><span class="line">grep -Eo <span class="string">&quot;ro+t&quot;</span> /etc/passwd</span><br><span class="line">root</span><br><span class="line">root</span><br><span class="line">root</span><br><span class="line">root</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="egrep">egrep</h2><ul class="lvl-0"><li class="lvl-2"><p>egrep命令用于在文件内查找指定的字符串，egrep执行效果与&quot;grep -E&quot;相似，使用的语法及参数可参照grep指令，与grep的不同点在于解读字符串的方法。</p></li><li class="lvl-2"><p>egrep命令为 grep 的扩充版本, 改良了许多传统 grep 不能或不便的操作，比如:</p><ul class="lvl-2"><li class="lvl-6">grep 使用 <code>?</code> 与 <code>+</code> 时需要转义, 但egrep不需要。</li></ul>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">grep <span class="string">&quot;[0-9]\+&quot;</span> test.txt</span><br><span class="line">grep -E <span class="string">&quot;[0-9]+&quot;</span> test.txt</span><br><span class="line">egrep <span class="string">&quot;[0-9]+&quot;</span> test.txt</span><br></pre></td></tr></table></figure><ul class="lvl-2"><li class="lvl-6">grep 使用 <code>a|b</code> 或 <code>(abc|xyz)</code> 这类&quot;或一&quot;比对时需要对<code>|</code>进行转义, 但egrep不需要。</li></ul>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">grep <span class="string">&quot;a\|s&quot;</span> test.txt</span><br><span class="line">grep -E <span class="string">&quot;a|s&quot;</span> test.txt</span><br><span class="line">egrep <span class="string">&quot;a|s&quot;</span> test.txt</span><br><span class="line"></span><br><span class="line">grep <span class="string">&quot;\(a\|s\)&quot;</span> test.txt</span><br><span class="line">grep -E <span class="string">&quot;(a|s)&quot;</span> test.txt</span><br><span class="line">egrep <span class="string">&quot;(a|s)&quot;</span> test.txt</span><br></pre></td></tr></table></figure><ul class="lvl-2"><li class="lvl-6">grep在处理 <code>&#123;n,m&#125;</code> 时, 需用 <code>\&#123; </code>与 <code>\&#125;</code> 进行转义, 但egrep不需要。</li></ul>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">grep <span class="string">&quot;[0-9]\&#123;3\&#125;&quot;</span> test.txt</span><br><span class="line">grep -E <span class="string">&quot;[0-9]&#123;3&#125;&quot;</span> test.txt</span><br><span class="line">egrep <span class="string">&quot;[0-9]&#123;3&#125;&quot;</span> test.txt</span><br></pre></td></tr></table></figure></li><li class="lvl-2"><p>语法</p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">egrep [范本模式] [文件或目录]</span><br></pre></td></tr></table></figure><ul class="lvl-0"><li class="lvl-2"><p>示例</p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">egrep <span class="string">&#x27;key1|key2|key3&#x27;</span> file : 查找包含任意关键字的行</span><br><span class="line">egrep <span class="string">&#x27;a+&#x27;</span> file : 查找包含一个或多个a的行</span><br><span class="line">egrep <span class="string">&#x27;(abc)&#x27;</span> file : 包含abc整体的行</span><br><span class="line">egrep <span class="string">&#x27;(abc)+&#x27;</span> file : 包含一个或多个abc整体的行</span><br></pre></td></tr></table></figure><div class="tips"><p><em><strong>linux正则表达式</strong></em></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">基础正则表达式    解释</span><br><span class="line">^            ^word表示以word开头的内容</span><br><span class="line">$            word$表示以word结尾的内容</span><br><span class="line">^$            表示空行</span><br><span class="line">.            代表且只能代表任意一个字符</span><br><span class="line">\            转义字符</span><br><span class="line">*            重复之前的字符0或多次</span><br><span class="line">.*            匹配任意多个字符</span><br><span class="line">[abc]           匹配abc其中的任意一个</span><br><span class="line">[^abc]          匹配未包含在[abc]内的任意一个字符</span><br><span class="line">[a-z]        匹配a-z其中的一个字符，[0-9]匹配任意数字</span><br><span class="line"></span><br><span class="line"># grep -E 或者 egrep，grep使用时要转义特殊字符</span><br><span class="line">扩展正则表达式      解释</span><br><span class="line">&#123;m,n&#125;        匹配前一个字符m到n次，注意grep使用时，&#123;&#125;要加转义字符\&#123;\&#125;</span><br><span class="line">&#123;m&#125;            匹配字符m次</span><br><span class="line">&#123;m,&#125;            匹配字符至少m次</span><br><span class="line">+            匹配前一个字符1次或者多次，最少一次，如 wo+d，可以匹配 &quot;wood&quot; &quot;woood&quot; &quot;woooooood&quot;等字符串</span><br><span class="line">?            重复前一个字符0次或者1次，如 bes?t，可以匹配 &quot;bet&quot; 和 &quot;best&quot; 两个字符串</span><br><span class="line">|            同时过滤多个字符，如 of|is|on，匹配包含 &quot;of&quot; 或者 &quot;if&quot; 或者 &quot;on&quot; 的字符串</span><br><span class="line">()              分组，将1个或多个字符捆绑在一起，当做一个整体进行处理，如 t(ad|ef)st，可以匹配 &quot;tadst&quot; 与 &quot;tefst&quot; 两个字符串</span><br><span class="line">                分组括号中的模式匹配到的内容会被正则表达式引擎记录于内部的变量中，这些变量的命名方式为：\1,\2,\3....，如：sed -r &#x27;s/(^love)able/\1rs/&#x27; example </span><br><span class="line">()+             辨别多个重复的组，如 A(xyz)+C ,可以匹配 开头是&quot;A&quot;结尾是&quot;C&quot;，中间有一个以上的&quot;xyz&quot;的字符串</span><br><span class="line"></span><br><span class="line"># grep -P，不支持egrep</span><br><span class="line">Perl 正则表达式    解释</span><br><span class="line">\t              匹配制表符</span><br><span class="line">\n              匹配换行符</span><br><span class="line">\s              匹配空白字符，空格、制表符\t、换行符\r和\n等</span><br><span class="line">\S              匹配非空白字符</span><br><span class="line">\d              匹配数字[0-9]，如：grep -P &quot;\d&quot; test.txt</span><br><span class="line">\D              匹配非数字[^0-9]</span><br><span class="line">\w              匹配字母数字下划线[a-zA-Z0-9_]</span><br><span class="line">\W              匹配非字母数字下划线[^a-zA-Z0-9_]</span><br><span class="line">(?:xxx)         匹配xxx，但是不会被正则表达式引擎记录于内部的变量中，也就是无法通过\1,\2,\3....获得</span><br></pre></td></tr></table></figure></div>]]></content>
    
    
    <summary type="html">&lt;!--
 **加粗**
 *斜体*
 ***加粗并斜体***
 ~~删除线~~
 ==突出显示==
 `突出显示(推荐)`
 ++下划线++
 ~下标~
 ^上标^
 脚注，参考文献[^1]，然后在文档最下方要添加这个1对应的内容，如：[^1]: My reference.
 图片设置宽度和高度 ![](https://upic-oss.oss-cn-beijing.aliyuncs.com/uPic/innodb_buffer_pool.png =900x600)

 +++ **点击折叠**
 这是被隐藏的内容
 +++

::: tips success warning danger
这里是容器内的内容
:::

% note info % success warning danger
这里是容器内的内容
% endnote %

 --&gt;
&lt;h2 id=&quot;摘要&quot;&gt;摘要&lt;/h2&gt;
&lt;ul class=&quot;lvl-0&quot;&gt;
&lt;li class=&quot;lvl-2&quot;&gt;
&lt;p&gt;grep与egrep的使用&lt;/p&gt;
&lt;/li&gt;
&lt;li class=&quot;lvl-2&quot;&gt;
&lt;p&gt;本文基于&lt;code&gt;CentOS8(x86_64)&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;</summary>
    
    
    
    <category term="技术" scheme="https://blog.hanqunfeng.com/categories/%E6%8A%80%E6%9C%AF/"/>
    
    <category term="linux" scheme="https://blog.hanqunfeng.com/categories/%E6%8A%80%E6%9C%AF/linux/"/>
    
    <category term="linux常用命令" scheme="https://blog.hanqunfeng.com/categories/%E6%8A%80%E6%9C%AF/linux/linux%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/"/>
    
    
    <category term="linux常用命令" scheme="https://blog.hanqunfeng.com/tags/linux%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/"/>
    
  </entry>
  
  <entry>
    <title>Linux常用命令--ssh、scp与免密登录</title>
    <link href="https://blog.hanqunfeng.com/2023/02/28/linux-command02-ssh/"/>
    <id>https://blog.hanqunfeng.com/2023/02/28/linux-command02-ssh/</id>
    <published>2023-02-28T13:55:05.000Z</published>
    <updated>2023-03-24T02:38:11.782Z</updated>
    
    <content type="html"><![CDATA[<!-- **加粗** *斜体* ***加粗并斜体*** ~~删除线~~ ==突出显示== `突出显示(推荐)` ++下划线++ ~下标~ ^上标^ 脚注，参考文献[^1]，然后在文档最下方要添加这个1对应的内容，如：[^1]: My reference. 图片设置宽度和高度 ![](https://upic-oss.oss-cn-beijing.aliyuncs.com/uPic/innodb_buffer_pool.png =900x600) +++ **点击折叠** 这是被隐藏的内容 +++::: tips success warning danger这里是容器内的内容:::% note info % success warning danger这里是容器内的内容% endnote % --><h2 id="摘要">摘要</h2><ul class="lvl-0"><li class="lvl-2"><p>ssh、scp命令的使用以及免密登录的设置方法</p></li><li class="lvl-2"><p>本文基于<code>CentOS8(x86_64)</code></p></li></ul><span id="more"></span><h2 id="ssh">ssh</h2><h3 id="3-1-登录">3.1 登录</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 登录</span></span><br><span class="line">ssh user@ip  : 默认连接22端口，不同用户名</span><br><span class="line"><span class="comment"># 指定端口</span></span><br><span class="line">ssh -p 22122 user@ip  : 不同用户名，指定其它端口</span><br><span class="line">ssh -p 22122 ip  : 相同用户名</span><br></pre></td></tr></table></figure><h3 id="3-2-远程执行命令或脚本">3.2 远程执行命令或脚本</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 1.无需交互的命令</span></span><br><span class="line">ssh user@ip <span class="string">&quot;command&quot;</span></span><br><span class="line">示例：</span><br><span class="line">ssh user@ip <span class="string">&quot;pwd&quot;</span></span><br><span class="line">ssh user@ip <span class="string">&quot;sh /usr/local/run.sh&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 2.需要交互的命令，即需要开启一个TTY</span></span><br><span class="line">ssh user@ip -t <span class="string">&quot;command&quot;</span></span><br><span class="line">示例：</span><br><span class="line">ssh user@ip -t <span class="string">&quot;top&quot;</span></span><br></pre></td></tr></table></figure><h3 id="3-3-远程服务器上执行本地的脚步">3.3 远程服务器上执行本地的脚步</h3><p>上面都是执行远程服务器上的脚本，如果要在远程服务器上执行本地的脚步，需要使用如下方式:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 1.不需要参数</span></span><br><span class="line">ssh user@ip &lt; script.sh</span><br><span class="line"></span><br><span class="line"><span class="comment"># 2.需要参数</span></span><br><span class="line">ssh user@ip <span class="string">&#x27;bash -s&#x27;</span> &lt; script.sh param1 param2</span><br></pre></td></tr></table></figure><h2 id="scp">scp</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 本地传输到远程</span></span><br><span class="line">scp xxx.txt user@ip:~/xxx.txt : 默认连接22端口，不同用户名</span><br><span class="line">scp -P 22122 xxx.txt user@ip:~/xxx.txt : 不同用户名，指定其它端口</span><br><span class="line">scp -P 22122 xxx.txt ip:~/xxx.txt : 相同用户名</span><br><span class="line"></span><br><span class="line"><span class="comment"># 远程传输的本地</span></span><br><span class="line">scp -P 22122 user@192.168.1.219:~/xxx.txt xxx.txt</span><br></pre></td></tr></table></figure><h2 id="免密登录-密钥登录">免密登录(密钥登录)</h2><p><em><strong>小贴士</strong></em></p><blockquote><p>默认情况下，ssh或者scp都需要输入登录密码，如果不想输入密码，可以配置免密登录(密钥登录)<br>ssh远程执行命令和scp远程传输如果配合免密登录，就可以为脚本自动化打下基础。</p></blockquote><p><strong>1、如果希望从ServerA免输入passwd就可以ssh到ServerB，先在ServerA上执行:</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">$ ssh-keygen -t rsa</span><br><span class="line">中间会让你输入密码并且确认生成目录，默认存放在本地用户的 ~/.ssh目录下 一路回车就好</span><br><span class="line">会生成：id_rsa（密钥） id_rsa.pub（公钥）</span><br><span class="line"></span><br><span class="line">-t : 指定加密类型，不指定默认rsa，支持 dsa|ecdsa|ed25519|rsa</span><br><span class="line">-b : 指定密钥长度，默认2048位</span><br><span class="line">-C : 注释，用于识别这个密钥，公钥内容最后会附加这个注释，默认为“用户@主机名”</span><br><span class="line">-f : 生成的密钥文件名称</span><br><span class="line"></span><br><span class="line"><span class="comment"># 示例</span></span><br><span class="line">$ ssh-keygen -t rsa -b 4096 -C <span class="string">&quot;hanqunfeng&quot;</span> -f ~/.ssh/sshkey</span><br><span class="line">则 ~/.ssh 路径下会生成两个文件：sshkey 和 sshkey.pub</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>2、把id_rsa.pub（公钥）的内容保存到ServerB的用户目录下的.ssh目录下的authorized_keys文件中</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">方式1：</span><br><span class="line">ServerA命令行执行</span><br><span class="line">ssh-copy-id ~/.ssh/id_rsa.pub user@ServerB_IP</span><br><span class="line">  -p : 指定端口</span><br><span class="line">  -i : 指定私钥路径</span><br><span class="line"></span><br><span class="line">方式2：</span><br><span class="line">打开ServerA上的~/.ssh/id_rsa.pub，复制里面内容，粘贴到ServerB的对应用户下的～/.ssh/authorized_keys文件中，保存退出，</span><br><span class="line">如果authorized_keys文件不存在就创建，如果authorized_keys文件中已有内容则粘贴到最后即可。</span><br></pre></td></tr></table></figure><p><strong>注意：ServerB 的 .ssh 目录的权限和 authorized_keys 的权限分别是 700 和 600</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">chmod</span> 700 -R .ssh</span><br><span class="line"><span class="built_in">chmod</span> 600 authorized_keys</span><br></pre></td></tr></table></figure><p>至此，再次从ServerA通过ssh或者scp连接到ServerB时就不会提示你输入密码啦</p><p>实际上证书的创建在任何服务器上进行都行，只需要让ServerA拥有私钥，ServerB的对应用户下的<code>～/.ssh/authorized_keys</code>文件中配置上公钥</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 此时要求ServerA拥有的私钥的路径必须为~/.ssh/id_rsa</span></span><br><span class="line">ssh user@ServerB_IP</span><br><span class="line"></span><br><span class="line"><span class="comment"># 如果私钥名称不是id_rsa，或者没有放置在~/.ssh下，则需要通过 -i 指定私钥路径</span></span><br><span class="line">ssh -i <span class="string">&quot;~/.ssh/script.pem&quot;</span> user@ServerB_IP</span><br></pre></td></tr></table></figure><p>默认情况下，sshd的密钥认证方式是开启的，可以查看ServerB的<code>/etc/ssh/sshd_config</code>中的配置</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 是否开启公钥验证</span></span><br><span class="line">PubkeyAuthentication <span class="built_in">yes</span></span><br><span class="line"><span class="comment"># 公钥验证文件路径</span></span><br><span class="line">AuthorizedKeysFile      .ssh/authorized_keys</span><br></pre></td></tr></table></figure><h2 id="config配置登录信息">config配置登录信息</h2><blockquote><p>通过config配置，可以进一步简化我们使用ssh和scp的方式</p></blockquote><p><strong>1.在用户根目录下的.ssh文件内创建config文件，用于保存ssh登陆主机的相关信息，内容格式如下：</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">Host aliyun                       <span class="comment">#就是给服务器起一个别名，后面使用时就是使用这个别名，如 ssh &#123;name&#125;</span></span><br><span class="line">User root                         <span class="comment">#登录用户名称</span></span><br><span class="line">HostName 8.130.53.111             <span class="comment">#服务器ip地址</span></span><br><span class="line">Port 22                           <span class="comment">#服务器登录端口，默认22</span></span><br><span class="line">IdentityFile ~/.ssh/id_rsa        <span class="comment">#免密登录的私钥文件路径</span></span><br><span class="line">RemoteCommand sudo su &amp;&amp; <span class="built_in">cd</span>       <span class="comment">#登录后要执行的命令，这里表示切换到root用户</span></span><br><span class="line">RequestTTY <span class="built_in">yes</span>                    <span class="comment">#开启TTY</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 通配符匹配</span></span><br><span class="line">Host 10.10.*                      <span class="comment">#支持通配符，这里表示所有10.10.开头的ip都会被匹配，此时不要配置HostName</span></span><br><span class="line">User root</span><br><span class="line">Port 22</span><br><span class="line">IdentityFile ~/.ssh/id_rsa</span><br><span class="line">ProxyCommand ssh aliyun -W %h:%p  <span class="comment">#通过上面配置的aliyun作为跳板机登录到其它服务器上去</span></span><br><span class="line">RemoteCommand sudo su &amp;&amp; <span class="built_in">cd</span></span><br><span class="line">RequestTTY <span class="built_in">yes</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 全局默认配置</span></span><br><span class="line">Host *</span><br><span class="line">IdentityFile ~/.ssh/id_rsa</span><br><span class="line">Compression <span class="built_in">yes</span></span><br><span class="line">ServerAliveInterval 60</span><br><span class="line">ServerAliveCountMax 5</span><br><span class="line">ControlMaster auto</span><br><span class="line">ControlPath ~/.sockets/%r@%h-%p</span><br><span class="line">ControlPersist 4h</span><br><span class="line">StrictHostKeyChecking no</span><br><span class="line">UserKnownHostsFile /dev/null</span><br><span class="line">ConnectTimeout 15</span><br><span class="line">StrictHostKeyChecking no</span><br></pre></td></tr></table></figure><p><strong>使用方法</strong><br>1）ssh 登录：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ssh aliyun</span><br><span class="line">ssh 10.10.123.123</span><br></pre></td></tr></table></figure><p>2）scp 传输文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 本地传输到远程</span></span><br><span class="line">scp ./file aliyun:~/</span><br><span class="line">scp ./file 10.10.123.123:~/</span><br><span class="line"><span class="comment"># 远程传输的本地</span></span><br><span class="line">scp aliyun:~/file ./</span><br><span class="line">scp 10.10.123.123:~/file ./</span><br></pre></td></tr></table></figure><h2 id="修改sshd端口和关闭密码登录">修改sshd端口和关闭密码登录</h2><p>1.sshd默认端口是22，建议生产环境进行修改</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ vim /etc/ssh/sshd_config</span><br><span class="line"><span class="comment"># 找到 Port 22，默认是注释掉的，解开注释然后将端口22改为你想要的端口号</span></span><br><span class="line">Port 22122</span><br></pre></td></tr></table></figure><p>2.关闭密码登录<br>如果配置了密钥登录，可以禁止密码登录，建议生产环境进行修改</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ vim /etc/ssh/sshd_config</span><br><span class="line"><span class="comment"># 找到 PasswordAuthentication 禁止密码登录设置为 no，允许密码登录设置为 yes</span></span><br><span class="line">PasswordAuthentication no</span><br></pre></td></tr></table></figure><p>3.重启SSH服务：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl restart sshd</span><br></pre></td></tr></table></figure><p>4.查看sshd端口状态</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">netstat -tunpl | grep sshd</span><br><span class="line">tcp        0      0 0.0.0.0:22122           0.0.0.0:*               LISTEN      20652/sshd</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;!--
 **加粗**
 *斜体*
 ***加粗并斜体***
 ~~删除线~~
 ==突出显示==
 `突出显示(推荐)`
 ++下划线++
 ~下标~
 ^上标^
 脚注，参考文献[^1]，然后在文档最下方要添加这个1对应的内容，如：[^1]: My reference.
 图片设置宽度和高度 ![](https://upic-oss.oss-cn-beijing.aliyuncs.com/uPic/innodb_buffer_pool.png =900x600)

 +++ **点击折叠**
 这是被隐藏的内容
 +++

::: tips success warning danger
这里是容器内的内容
:::

% note info % success warning danger
这里是容器内的内容
% endnote %

 --&gt;
&lt;h2 id=&quot;摘要&quot;&gt;摘要&lt;/h2&gt;
&lt;ul class=&quot;lvl-0&quot;&gt;
&lt;li class=&quot;lvl-2&quot;&gt;
&lt;p&gt;ssh、scp命令的使用以及免密登录的设置方法&lt;/p&gt;
&lt;/li&gt;
&lt;li class=&quot;lvl-2&quot;&gt;
&lt;p&gt;本文基于&lt;code&gt;CentOS8(x86_64)&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;</summary>
    
    
    
    <category term="技术" scheme="https://blog.hanqunfeng.com/categories/%E6%8A%80%E6%9C%AF/"/>
    
    <category term="linux" scheme="https://blog.hanqunfeng.com/categories/%E6%8A%80%E6%9C%AF/linux/"/>
    
    <category term="linux常用命令" scheme="https://blog.hanqunfeng.com/categories/%E6%8A%80%E6%9C%AF/linux/linux%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/"/>
    
    
    <category term="linux常用命令" scheme="https://blog.hanqunfeng.com/tags/linux%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/"/>
    
  </entry>
  
  <entry>
    <title>Linux常用命令--curl与wget</title>
    <link href="https://blog.hanqunfeng.com/2023/02/28/linux-command02-curl-wget/"/>
    <id>https://blog.hanqunfeng.com/2023/02/28/linux-command02-curl-wget/</id>
    <published>2023-02-28T13:40:05.000Z</published>
    <updated>2023-03-24T07:51:05.041Z</updated>
    
    <content type="html"><![CDATA[<!-- **加粗** *斜体* ***加粗并斜体*** ~~删除线~~ ==突出显示== `突出显示(推荐)` ++下划线++ ~下标~ ^上标^ 脚注，参考文献[^1]，然后在文档最下方要添加这个1对应的内容，如：[^1]: My reference. 图片设置宽度和高度 ![](https://upic-oss.oss-cn-beijing.aliyuncs.com/uPic/innodb_buffer_pool.png =900x600) +++ **点击折叠** 这是被隐藏的内容 +++::: tips success warning danger这里是容器内的内容:::% note info % success warning danger这里是容器内的内容% endnote % --><h2 id="摘要">摘要</h2><ul class="lvl-0"><li class="lvl-2"><p>curl与wget的基本使用方法</p></li><li class="lvl-2"><p>本文基于<code>CentOS8(x86_64)</code></p></li></ul><span id="more"></span><h2 id="curl">curl</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 查看页面内容，默认GET请求</span></span><br><span class="line">curl url</span><br><span class="line"></span><br><span class="line"><span class="comment"># 简单验证的页面登录方法</span></span><br><span class="line">curl -u user:passwd url</span><br><span class="line"></span><br><span class="line"><span class="comment"># 下载文件要指定下载后的文件名称</span></span><br><span class="line">curl -o fileName url</span><br><span class="line"><span class="comment"># 显示下载进度条,-C断点续传，-o下载后的文件名称</span></span><br><span class="line">curl -C -<span class="comment"># -o fileName url</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># -X指定请求协议,-H指定请求头，多个请求头就使用多个-H，-d指定请求数据</span></span><br><span class="line">curl url \</span><br><span class="line">  -X POST \</span><br><span class="line">  -d <span class="string">&quot;&#123;\&quot;data\&quot;:\&quot;content\&quot;&#125;&quot;</span> \</span><br><span class="line">  -H <span class="string">&quot;content-type: application/json&quot;</span></span><br><span class="line"></span><br><span class="line">curl url \</span><br><span class="line">  -X POST \</span><br><span class="line">  -d <span class="string">&quot;name=zhangsan&amp;age=30&quot;</span></span><br><span class="line">  -H <span class="string">&quot;content-type: application/x-www-form-urlencoded&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># --data-urlencode参数等同于-d，发送 POST 请求的数据体，区别在于会自动将发送的数据进行 URL 编码</span></span><br><span class="line">curl --data-urlencode <span class="string">&#x27;name=张三&#x27;</span> url</span><br><span class="line"></span><br><span class="line"><span class="comment"># 发出一个 GET 请求，实际请求的 URL 为url?name=zhangsan&amp;age=30。如果省略-G，会发出一个 POST 请求。</span></span><br><span class="line">curl -G -d <span class="string">&#x27;name=zhangsan&#x27;</span> -d <span class="string">&#x27;age=30&#x27;</span> url</span><br><span class="line"></span><br><span class="line"><span class="comment"># 上传文件，注意文件名称前面要加上@，后面跟本地文件路径，不指定type默认会把 MIME 类型设为application/octet-stream，不指定filename默认使用上传文件名称作为服务器端接收到的文件名称</span></span><br><span class="line">curl -F <span class="string">&#x27;file=@photo.png;type=image/png;filename=me.png&#x27;</span> -H <span class="string">&quot;Content-Type: multipart/form-data&quot;</span> url</span><br><span class="line"></span><br><span class="line"><span class="comment"># 通过FTP进行下载，-O 将返回内容输出到当前目录下，和url中文件名相同的文件中（不含目录）</span></span><br><span class="line">curl -O ftp://user:pass@ip:port/file </span><br><span class="line"></span><br><span class="line"><span class="comment"># 通过FTP进行上传，-T 指定上传文件</span></span><br><span class="line">curl -T file ftp://user:pass@ip:port/path </span><br></pre></td></tr></table></figure><ul class="lvl-0"><li class="lvl-2"><p>关于curl的更多使用方法可以参考:<a href="https://www.cnblogs.com/hls-code/p/16877803.html">https://www.cnblogs.com/hls-code/p/16877803.html</a></p></li></ul><h2 id="wget">wget</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 下载到当前目录</span></span><br><span class="line">wget url</span><br><span class="line"><span class="comment"># 下载到指定文件中</span></span><br><span class="line">wget -O saveFile url</span><br><span class="line"><span class="comment"># 下载file.txt中的所有链接</span></span><br><span class="line">wget -i file.txt</span><br><span class="line"><span class="comment"># 断点续传，最多重试5次</span></span><br><span class="line">wget -c -t 5 url</span><br><span class="line"><span class="comment"># 递归下载整个网站,递归深度为5</span></span><br><span class="line">wget -r -l 5 url</span><br><span class="line"><span class="comment"># 只下载rar格式的文件</span></span><br><span class="line">wget -m --accept=rar url</span><br><span class="line"><span class="comment"># 不下载gif格式的文件</span></span><br><span class="line">wget -m --reject=gif url</span><br><span class="line"><span class="comment"># 不下载已经存在的文件,设置超时时间5s</span></span><br><span class="line">wget -nc -T 5 url</span><br><span class="line"><span class="comment"># 下载速度限制为1m/s，默认全速下载</span></span><br><span class="line">wget --limit-rate=1m url</span><br><span class="line"><span class="comment"># 使用需要用户名和密码认证的ftp下载</span></span><br><span class="line">wget --ftp-user=USERNAME --ftp-password=PASSWORD ftp://url</span><br><span class="line"><span class="comment"># 访问https连接提示证书过期时，如果确认可以安全访问，可以加上--no-check-certificate</span></span><br><span class="line">wget --no-check-certificate https://xxxxx</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;!--
 **加粗**
 *斜体*
 ***加粗并斜体***
 ~~删除线~~
 ==突出显示==
 `突出显示(推荐)`
 ++下划线++
 ~下标~
 ^上标^
 脚注，参考文献[^1]，然后在文档最下方要添加这个1对应的内容，如：[^1]: My reference.
 图片设置宽度和高度 ![](https://upic-oss.oss-cn-beijing.aliyuncs.com/uPic/innodb_buffer_pool.png =900x600)

 +++ **点击折叠**
 这是被隐藏的内容
 +++

::: tips success warning danger
这里是容器内的内容
:::

% note info % success warning danger
这里是容器内的内容
% endnote %

 --&gt;
&lt;h2 id=&quot;摘要&quot;&gt;摘要&lt;/h2&gt;
&lt;ul class=&quot;lvl-0&quot;&gt;
&lt;li class=&quot;lvl-2&quot;&gt;
&lt;p&gt;curl与wget的基本使用方法&lt;/p&gt;
&lt;/li&gt;
&lt;li class=&quot;lvl-2&quot;&gt;
&lt;p&gt;本文基于&lt;code&gt;CentOS8(x86_64)&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;</summary>
    
    
    
    <category term="技术" scheme="https://blog.hanqunfeng.com/categories/%E6%8A%80%E6%9C%AF/"/>
    
    <category term="linux" scheme="https://blog.hanqunfeng.com/categories/%E6%8A%80%E6%9C%AF/linux/"/>
    
    <category term="linux常用命令" scheme="https://blog.hanqunfeng.com/categories/%E6%8A%80%E6%9C%AF/linux/linux%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/"/>
    
    
    <category term="linux常用命令" scheme="https://blog.hanqunfeng.com/tags/linux%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/"/>
    
  </entry>
  
  <entry>
    <title>Linux常用命令--子网掩码</title>
    <link href="https://blog.hanqunfeng.com/2023/02/28/linux-command02-netmask/"/>
    <id>https://blog.hanqunfeng.com/2023/02/28/linux-command02-netmask/</id>
    <published>2023-02-28T13:36:05.000Z</published>
    <updated>2023-03-24T05:50:36.862Z</updated>
    
    <content type="html"><![CDATA[<!-- **加粗** *斜体* ***加粗并斜体*** ~~删除线~~ ==突出显示== `突出显示(推荐)` ++下划线++ ~下标~ ^上标^ 脚注，参考文献[^1]，然后在文档最下方要添加这个1对应的内容，如：[^1]: My reference. 图片设置宽度和高度 ![](https://upic-oss.oss-cn-beijing.aliyuncs.com/uPic/innodb_buffer_pool.png =900x600) +++ **点击折叠** 这是被隐藏的内容 +++::: tips success warning danger这里是容器内的内容:::% note info % success warning danger这里是容器内的内容% endnote % --><h2 id="摘要">摘要</h2><ul class="lvl-0"><li class="lvl-2"><p>本文介绍子网掩码的作用</p></li><li class="lvl-2"><p>本文基于<code>CentOS8(x86_64)</code></p></li></ul><span id="more"></span><h2 id="子网掩码">子网掩码</h2><ul class="lvl-0"><li class="lvl-2"><p>我们经常看到10.8.1.0/24这种ip表示方式，其表示为从10.8.1.0这个IP开始，24代表子网掩码为255.255.255.0，共包含256个地址，即从0-255共256个IP，即10.8.1.0~10.8.1.255。</p></li><li class="lvl-2"><p>这里<code>/24</code>代表子网掩码，即前面由多少个1组成，举例如下：<br>A类IP地址的默认子网掩码为255.0.0.0，由于255相当于二进制的8位1，所以也缩写成“/8”，表示网络号占了8位，/12表示网络号占了12位，即有12个1，以此类推。<br>具体的设置规则可参考下表:</p></li></ul><table><thead><tr><th></th><th>IP总数</th><th>子网掩码</th></tr></thead><tbody><tr><td>/24</td><td>256</td><td>255.255.255.0</td></tr><tr><td>/20</td><td>4096</td><td>255.255.240.0</td></tr><tr><td>/16</td><td>65536</td><td>255.255.0.0</td></tr><tr><td>/12</td><td>1048576</td><td>255.240.0.0</td></tr><tr><td>/8</td><td>16777216</td><td>255.0.0.0</td></tr></tbody></table><p><code>子网掩码</code>是用来判断任意两台计算机的IP地址是否属于同一子网络的根据。<br>最为简单的理解就是两台计算机各自的IP地址与子网掩码进行<code>与</code>运算后，得出的结果是相同的，则说明这两台计算机是处于同一个子网络上的，可以进行直接的通讯。<br>比如：<br>网段：10.8.1.0/24<br>网络地址：10.8.1.0<br>子网掩码：255.255.255.0<br>主机地址：10.8.1.1~10.8.1.254<br>广播地址：10.8.1.255<br>主机地址+网络地址+广播地址：256</p><p>计算规则：</p><table><thead><tr><th></th><th>10进制</th><th>二进制</th><th>说明</th></tr></thead><tbody><tr><td>主机地址</td><td>10.8.1.1</td><td><code>00001010.00001000.00000001.00000001</code></td><td>10.8.1.1~10.8.1.254，这些ip和子网掩码<code>与</code>后的结果都相同</td></tr><tr><td>子网掩码</td><td>255.255.255.0</td><td><code>11111111.11111111.11111111.00000000</code></td><td>/24，即24个1</td></tr><tr><td>网络地址</td><td>10.8.1.0</td><td><code>00001010.00001000.00000001.00000000</code></td><td>主机地址和子网掩码<code>与</code>运算后的结果就得到了网络地址，同一个物理网络上的所有主机都使用同一个网络地址</td></tr><tr><td>广播地址</td><td>10.8.1.255</td><td><code>00001010.00001000.00000001.11111111</code></td><td>网络地址最后的0全部变为1就得到了广播地址</td></tr></tbody></table><p>以172.16.0.0/12为例，其子网掩码是255.240.0.0，<br>则172.16.0.0是网络地址，172.31.255.255是广播地址，网络地址相同的ip可以互相通信</p><p>IP地址分为五类，A类保留给政府机构，B类分配给中等规模的公司，C类分配给任何需要的人，D类用于组播，E类用于实验，各类可容纳的地址数目不同。<br>其中A类、B类、和C类这三类地址用于TCP/IP节点，其它两类D类和E类被用于特殊用途。</p><p><code>A、B、C三类IP地址的特征</code>：当将IP地址写成二进制形式时，A类地址的第一位总是O，B类地址的前两位总是10，C类地址的前三位总是110。</p><table><thead><tr><th>地址类型</th><th>二进制</th><th>十进制</th><th>地址范围</th><th>私有地址</th><th>保留地址</th><th>说明</th></tr></thead><tbody><tr><td>A类</td><td>0000000.00000000.00000000.00000000</td><td>0.0.0.0</td><td>1.0.0.1~126.155.255.254</td><td>10.X.X.X</td><td>127.X.X.X</td><td>第1字节为网络地址，其它3个字节为主机地址，第1个字节的第一位固定为0，注意数字0和127不作为A类地址</td></tr><tr><td>B类</td><td>10000000.00000000.00000000.00000000</td><td>128.0.0.0</td><td>128.0.0.1~191.255.255.254</td><td>172.16.0.0~172.31.255.255</td><td>169.254.X.X</td><td>第1字节和第2字节为网络地址，其它2个字节为主机地址，第1个字节的前两位固定为10</td></tr><tr><td>C类</td><td>11000000.00000000.00000000.00000000</td><td>192.0.0.0</td><td>192.0.0.1~223.255.255.254</td><td>192.168.X.X</td><td></td><td>第1字节、第2字节和第3个字节为网络地址，第4个个字节为主机地址，第1个字节的前三位固定为110</td></tr><tr><td>D类</td><td>11100000.00000000.00000000.00000000</td><td>224.0.0.0</td><td>224.0.0.1~239.255.255.254</td><td></td><td></td><td>不分网络地址和主机地址，第1个字节的前四位固定为1110，这一类地址被用在多点广播（Multicast）中</td></tr><tr><td>E类</td><td>11110000.00000000.00000000.00000000</td><td>240.0.0.0</td><td>240.0.0.1~255.255.255.254</td><td></td><td></td><td>第1个字节的前五位固定为11110，为将来使用保留</td></tr></tbody></table><p><code>私有网络地址</code>（以下简称私网地址）是指内部网络或者主机的IP地址，IANA（互联网数字分配机构）规定将下列的IP地址保留用作私网地址，不在Internet上被分配，可在一个单位或公司内部使用。RFC918中规定私有地址如下:</p><table><thead><tr><th>私有地址类别</th><th>地址范围</th><th>网段</th></tr></thead><tbody><tr><td>A类私有地址</td><td>10.0.0.0 ~ 10.255.255.255</td><td>10.0.0.0/8</td></tr><tr><td>B类私有地址</td><td>172.16.0.0 ~ 172.31.255.255</td><td>172.16.0.0/12</td></tr><tr><td>C类私有地址</td><td>192.168.0.0 ~ 192.168.255.255</td><td>192.168.0.0/16</td></tr></tbody></table>]]></content>
    
    
    <summary type="html">&lt;!--
 **加粗**
 *斜体*
 ***加粗并斜体***
 ~~删除线~~
 ==突出显示==
 `突出显示(推荐)`
 ++下划线++
 ~下标~
 ^上标^
 脚注，参考文献[^1]，然后在文档最下方要添加这个1对应的内容，如：[^1]: My reference.
 图片设置宽度和高度 ![](https://upic-oss.oss-cn-beijing.aliyuncs.com/uPic/innodb_buffer_pool.png =900x600)

 +++ **点击折叠**
 这是被隐藏的内容
 +++

::: tips success warning danger
这里是容器内的内容
:::

% note info % success warning danger
这里是容器内的内容
% endnote %

 --&gt;
&lt;h2 id=&quot;摘要&quot;&gt;摘要&lt;/h2&gt;
&lt;ul class=&quot;lvl-0&quot;&gt;
&lt;li class=&quot;lvl-2&quot;&gt;
&lt;p&gt;本文介绍子网掩码的作用&lt;/p&gt;
&lt;/li&gt;
&lt;li class=&quot;lvl-2&quot;&gt;
&lt;p&gt;本文基于&lt;code&gt;CentOS8(x86_64)&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;</summary>
    
    
    
    <category term="技术" scheme="https://blog.hanqunfeng.com/categories/%E6%8A%80%E6%9C%AF/"/>
    
    <category term="linux" scheme="https://blog.hanqunfeng.com/categories/%E6%8A%80%E6%9C%AF/linux/"/>
    
    <category term="linux常用命令" scheme="https://blog.hanqunfeng.com/categories/%E6%8A%80%E6%9C%AF/linux/linux%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/"/>
    
    
    <category term="linux常用命令" scheme="https://blog.hanqunfeng.com/tags/linux%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/"/>
    
  </entry>
  
  <entry>
    <title>Linux常用命令--防火墙firewalld</title>
    <link href="https://blog.hanqunfeng.com/2023/02/28/linux-command02-firewall/"/>
    <id>https://blog.hanqunfeng.com/2023/02/28/linux-command02-firewall/</id>
    <published>2023-02-28T13:35:05.000Z</published>
    <updated>2023-03-24T05:51:56.478Z</updated>
    
    <content type="html"><![CDATA[<!-- **加粗** *斜体* ***加粗并斜体*** ~~删除线~~ ==突出显示== `突出显示(推荐)` ++下划线++ ~下标~ ^上标^ 脚注，参考文献[^1]，然后在文档最下方要添加这个1对应的内容，如：[^1]: My reference. 图片设置宽度和高度 ![](https://upic-oss.oss-cn-beijing.aliyuncs.com/uPic/innodb_buffer_pool.png =900x600) +++ **点击折叠** 这是被隐藏的内容 +++::: tips success warning danger这里是容器内的内容:::% note info % success warning danger这里是容器内的内容% endnote % --><h2 id="摘要">摘要</h2><ul class="lvl-0"><li class="lvl-2"><p>firewalld的基本使用介绍</p></li><li class="lvl-2"><p>本文基于<code>CentOS8(x86_64)</code></p></li></ul><span id="more"></span><h2 id="防火墙firewalld">防火墙firewalld</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 关闭防火墙</span></span><br><span class="line">systemctl stop firewalld.service</span><br><span class="line"><span class="comment"># 开启防火墙</span></span><br><span class="line">systemctl start firewalld.service</span><br><span class="line"><span class="comment"># 关闭开机自启动</span></span><br><span class="line">systemctl <span class="built_in">disable</span> firewalld.service</span><br><span class="line"><span class="comment"># 开启开机启动</span></span><br><span class="line">systemctl <span class="built_in">enable</span> firewalld.service</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看firewalld状态</span></span><br><span class="line">sudo firewall-cmd --state</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看默认区域</span></span><br><span class="line">sudo firewall-cmd --get-default-zone</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看启用的规则和服务</span></span><br><span class="line">sudo firewall-cmd --list-all</span><br><span class="line"></span><br><span class="line"><span class="comment"># 只查看启用的服务</span></span><br><span class="line">sudo firewall-cmd --list-services</span><br><span class="line"></span><br><span class="line"><span class="comment"># 临时添加新的服务,firewalld重载或重启后失效</span></span><br><span class="line"><span class="comment"># firewalld会从/etc/firewalld/services/目录中加载服务配置文件，如果这个目录中没有服务配置文件，则到/usr/lib/firewalld/services/目录中加载 https.xml</span></span><br><span class="line">sudo firewall-cmd --add-service=https</span><br><span class="line"></span><br><span class="line"><span class="comment"># 永久添加新的服务</span></span><br><span class="line">sudo firewall-cmd --permanent --add-service=https</span><br><span class="line">sudo firewall-cmd --reload</span><br><span class="line"></span><br><span class="line"><span class="comment"># 永久移除服务</span></span><br><span class="line">sudo firewall-cmd --remove-service=vnc-server --permanent</span><br><span class="line">sudo firewall-cmd --reload</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看开放的端口和协议</span></span><br><span class="line">sudo firewall-cmd --list-ports</span><br><span class="line"></span><br><span class="line"><span class="comment"># 开放端口</span></span><br><span class="line">sudo firewall-cmd --add-port=80/tcp --permanent</span><br><span class="line">sudo firewall-cmd --reload</span><br><span class="line"></span><br><span class="line"><span class="comment"># 关闭端口</span></span><br><span class="line">sudo firewall-cmd --remove-port=80/tcp --permanent</span><br><span class="line">sudo firewall-cmd --reload</span><br><span class="line"></span><br><span class="line"><span class="comment"># 允许ip或ip段访问某个端口</span></span><br><span class="line">sudo firewall-cmd --permanent --add-rich-rule <span class="string">&#x27;rule family=&quot;ipv4&quot; source address=&quot;10.8.1.8&quot; port port=&quot;22&quot; protocol=&quot;tcp&quot; accept&#x27;</span></span><br><span class="line">sudo firewall-cmd --permanent --add-rich-rule <span class="string">&#x27;rule family=&quot;ipv4&quot; source address=&quot;10.8.1.0/24&quot; port port=&quot;22&quot; protocol=&quot;tcp&quot; accept&#x27;</span></span><br><span class="line">sudo firewall-cmd --reload</span><br><span class="line"></span><br><span class="line"><span class="comment"># 拒绝ip或ip段访问某个端口</span></span><br><span class="line">sudo firewall-cmd --permanent --add-rich-rule <span class="string">&#x27;rule family=&quot;ipv4&quot; source address=&quot;10.8.1.8&quot; port port=&quot;22&quot; protocol=&quot;tcp&quot; reject&#x27;</span></span><br><span class="line">sudo firewall-cmd --permanent --add-rich-rule <span class="string">&#x27;rule family=&quot;ipv4&quot; source address=&quot;10.8.1.0/24&quot; port port=&quot;22&quot; protocol=&quot;tcp&quot; reject&#x27;</span></span><br><span class="line">sudo firewall-cmd --reload</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看设置的规则</span></span><br><span class="line">sudo firewall-cmd --list-rich-rules</span><br><span class="line"></span><br></pre></td></tr></table></figure><ul class="lvl-0"><li class="lvl-2"><p>参考地址：<br><a href="https://www.51cto.com/article/707726.html">https://www.51cto.com/article/707726.html</a><br><a href="https://blog.csdn.net/qq_57268251/article/details/124787256">https://blog.csdn.net/qq_57268251/article/details/124787256</a><br><a href="https://blog.csdn.net/eagle89/article/details/127277636">https://blog.csdn.net/eagle89/article/details/127277636</a></p></li><li class="lvl-2"><p>云服务器都是基于<code>安全组</code>的规则进行配置，其<code>firewalld</code>、<code>iptables</code>和<code>SELinux</code>都是关闭的</p></li></ul>]]></content>
    
    
    <summary type="html">&lt;!--
 **加粗**
 *斜体*
 ***加粗并斜体***
 ~~删除线~~
 ==突出显示==
 `突出显示(推荐)`
 ++下划线++
 ~下标~
 ^上标^
 脚注，参考文献[^1]，然后在文档最下方要添加这个1对应的内容，如：[^1]: My reference.
 图片设置宽度和高度 ![](https://upic-oss.oss-cn-beijing.aliyuncs.com/uPic/innodb_buffer_pool.png =900x600)

 +++ **点击折叠**
 这是被隐藏的内容
 +++

::: tips success warning danger
这里是容器内的内容
:::

% note info % success warning danger
这里是容器内的内容
% endnote %

 --&gt;
&lt;h2 id=&quot;摘要&quot;&gt;摘要&lt;/h2&gt;
&lt;ul class=&quot;lvl-0&quot;&gt;
&lt;li class=&quot;lvl-2&quot;&gt;
&lt;p&gt;firewalld的基本使用介绍&lt;/p&gt;
&lt;/li&gt;
&lt;li class=&quot;lvl-2&quot;&gt;
&lt;p&gt;本文基于&lt;code&gt;CentOS8(x86_64)&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;</summary>
    
    
    
    <category term="技术" scheme="https://blog.hanqunfeng.com/categories/%E6%8A%80%E6%9C%AF/"/>
    
    <category term="linux" scheme="https://blog.hanqunfeng.com/categories/%E6%8A%80%E6%9C%AF/linux/"/>
    
    <category term="linux常用命令" scheme="https://blog.hanqunfeng.com/categories/%E6%8A%80%E6%9C%AF/linux/linux%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/"/>
    
    
    <category term="linux常用命令" scheme="https://blog.hanqunfeng.com/tags/linux%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/"/>
    
  </entry>
  
  <entry>
    <title>Linux常用命令--网络相关命令</title>
    <link href="https://blog.hanqunfeng.com/2023/02/28/linux-command02-net/"/>
    <id>https://blog.hanqunfeng.com/2023/02/28/linux-command02-net/</id>
    <published>2023-02-28T13:30:05.000Z</published>
    <updated>2023-03-24T02:40:08.142Z</updated>
    
    <content type="html"><![CDATA[<!-- **加粗** *斜体* ***加粗并斜体*** ~~删除线~~ ==突出显示== `突出显示(推荐)` ++下划线++ ~下标~ ^上标^ 脚注，参考文献[^1]，然后在文档最下方要添加这个1对应的内容，如：[^1]: My reference. 图片设置宽度和高度 ![](https://upic-oss.oss-cn-beijing.aliyuncs.com/uPic/innodb_buffer_pool.png =900x600) +++ **点击折叠** 这是被隐藏的内容 +++::: tips success warning danger这里是容器内的内容:::% note info % success warning danger这里是容器内的内容% endnote % --><h2 id="摘要">摘要</h2><ul class="lvl-0"><li class="lvl-2"><p>网络相关命令，如ping、ifconfig、netstat以及查看DNS、检查域名和证书的到期时间等等</p></li><li class="lvl-2"><p>本文基于<code>CentOS8(x86_64)</code></p></li></ul><span id="more"></span><h2 id="1-测试网络和服务的连通性">1.测试网络和服务的连通性</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 测试网络连通性</span></span><br><span class="line">ping 192.168.36.49 -c 3 : -c 测试次数</span><br><span class="line">ping 192.168.36.49 -c 3 -s 1000 : -s 发送icmp包的大小bytes</span><br><span class="line"></span><br><span class="line"><span class="comment"># ping 域名，可以查看到负载均衡器名及其分发到的ip</span></span><br><span class="line"><span class="comment"># 可以看到多次ping baidu的域名，得到了不同的ip地址</span></span><br><span class="line">ping www.baidu.com</span><br><span class="line">PING www.a.shifen.com (110.242.68.4) 56(84) bytes of data.</span><br><span class="line">64 bytes from 110.242.68.4 (110.242.68.4): icmp_seq=1 ttl=50 time=19.7 ms</span><br><span class="line">64 bytes from 110.242.68.4 (110.242.68.4): icmp_seq=2 ttl=50 time=19.8 ms</span><br><span class="line">64 bytes from 110.242.68.4 (110.242.68.4): icmp_seq=3 ttl=50 time=19.8 ms</span><br><span class="line"></span><br><span class="line">ping www.baidu.com</span><br><span class="line">PING www.a.shifen.com (110.242.68.3) 56(84) bytes of data.</span><br><span class="line">64 bytes from 110.242.68.3 (110.242.68.3): icmp_seq=1 ttl=49 time=19.6 ms</span><br><span class="line">64 bytes from 110.242.68.3 (110.242.68.3): icmp_seq=2 ttl=49 time=19.6 ms</span><br><span class="line">64 bytes from 110.242.68.3 (110.242.68.3): icmp_seq=3 ttl=49 time=19.6 ms</span><br><span class="line"></span><br><span class="line"><span class="comment"># 测试服务连通性</span></span><br><span class="line">telnet 192.168.36.49 3306</span><br></pre></td></tr></table></figure><div class="tips"><p><em><strong>禁止ping</strong></em></p><ul class="lvl-1"><li class="lvl-2">临时禁止，服务器重启后失效</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">echo</span> <span class="string">&quot;1&quot;</span> &gt; /proc/sys/net/ipv4/icmp_echo_ignore_all</span><br></pre></td></tr></table></figure><ul class="lvl-1"><li class="lvl-2">永久禁止</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">vim /etc/sysctl.conf</span><br><span class="line">在文件最后增加如下内容后保存退出</span><br><span class="line">net.ipv4.icmp_echo_ignore_all = 1</span><br><span class="line"></span><br><span class="line">使修改生效</span><br><span class="line">sysctl -p</span><br></pre></td></tr></table></figure></div><h2 id="2-查看网络设置信息">2.查看网络设置信息</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">ifconfig -a : 查看所有网卡信息</span><br><span class="line">ifconfig eth0 : 查看指定网卡信息</span><br><span class="line"></span><br><span class="line">ip a : 查看所有网卡信息</span><br><span class="line"></span><br><span class="line"><span class="comment"># 临时设置IP，重启机器或者重启network马上失效</span></span><br><span class="line">ifconfig eth0 192.168.12.51</span><br><span class="line"></span><br><span class="line"><span class="comment"># 启用网卡</span></span><br><span class="line">ifconfig eth0 up  或者  ifup eth0</span><br><span class="line"></span><br><span class="line"><span class="comment"># 禁用网卡</span></span><br><span class="line">ifconfig eth0 down  或者  ifdown eth0</span><br><span class="line"></span><br><span class="line"><span class="comment"># 重启network</span></span><br><span class="line">systemctl restart network</span><br></pre></td></tr></table></figure><h2 id="3-查看进程端口">3.查看进程端口</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">netstat -tunpl : 查看端口是否启动，或者查看占用端口的进程</span><br><span class="line"></span><br><span class="line">-n 不显示别名，能显示数字的全部转化为数字</span><br><span class="line">-t 显示TCP协议的链接情况</span><br><span class="line">-l 仅理出有在Listen的服务状态</span><br><span class="line">-u 显示UDP协议的链接情况</span><br><span class="line">-p 显示建立相关链接的程序名</span><br><span class="line"></span><br><span class="line">Active Internet connections (only servers)</span><br><span class="line">Proto Recv-Q Send-Q Local Address           Foreign Address         State       PID/Program name</span><br><span class="line">tcp        0      0 0.0.0.0:22              0.0.0.0:*               LISTEN      1158/sshd</span><br><span class="line">tcp6       0      0 :::3306                 :::*                    LISTEN      777/mysqld</span><br><span class="line">udp        0      0 172.19.230.128:68       0.0.0.0:*                           598/systemd-network</span><br><span class="line">udp        0      0 127.0.0.1:323           0.0.0.0:*                           569/chronyd</span><br><span class="line">udp6       0      0 :::546                  :::*                                598/systemd-network</span><br><span class="line">udp6       0      0 ::1:323                 :::*                                569/chronyd</span><br><span class="line"></span><br><span class="line">例子：</span><br><span class="line">netstat -tunpl | grep sshd</span><br><span class="line">netstat -tunpl | grep 3306</span><br></pre></td></tr></table></figure><h2 id="4-查看DNS">4.查看DNS</h2><h3 id="8-1-查看DNS">8.1 查看DNS</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 方法1</span></span><br><span class="line"><span class="built_in">cat</span> /etc/resolv.conf</span><br><span class="line"></span><br><span class="line"><span class="comment"># 方法2</span></span><br><span class="line">nslookup localhost</span><br><span class="line"></span><br><span class="line"><span class="comment"># 方法3</span></span><br><span class="line">dig</span><br></pre></td></tr></table></figure><h3 id="8-2-设置DNS">8.2 设置DNS</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">vim /etc/resolv.conf</span><br><span class="line"><span class="comment"># 可以设置多个DNS，优先级从上到下</span></span><br><span class="line">nameserver xxx.xxx.xxx.xxx</span><br><span class="line">nameserver xxx.xxx.xxx.xxx</span><br><span class="line"></span><br><span class="line"><span class="comment"># 重启网络</span></span><br><span class="line">systemctl restart network</span><br></pre></td></tr></table></figure><h2 id="5-检查域名到期时间">5.检查域名到期时间</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">whois baidu.com | grep -E <span class="string">&#x27;(Expiry Date|Expiration Time)&#x27;</span></span><br></pre></td></tr></table></figure><h2 id="6-检查域名绑定的证书到期时间">6.检查域名绑定的证书到期时间</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">echo</span> | openssl s_client  -connect  www.baidu.com:443 2&gt;/dev/null | openssl x509 -noout -dates | awk -F<span class="string">&#x27;=&#x27;</span> <span class="string">&#x27;NR==2&#123;print $2&#125;&#x27;</span></span><br></pre></td></tr></table></figure><h2 id="7-设置HOSTNAME">7.设置HOSTNAME</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 查看HOSTNAME</span></span><br><span class="line">hostname 或者 hostnamectl</span><br><span class="line"></span><br><span class="line"><span class="comment"># 临时设置，重启后失效</span></span><br><span class="line">hostname newName</span><br><span class="line"></span><br><span class="line"><span class="comment"># 永久立即生效，不需要重启</span></span><br><span class="line">hostnamectl set-hostname newName</span><br></pre></td></tr></table></figure><h2 id="8-路由">8.路由</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 查看路由列表</span></span><br><span class="line">route -n</span><br><span class="line"></span><br><span class="line"><span class="comment"># 添加路由规则，这里表示当前服务器要访问172.20.0.0/24这个网段的ip要去路由器192.168.10.20上查找</span></span><br><span class="line">route add -net 172.20.0.0/24 gw 192.168.10.20 dev eth0</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;!--
 **加粗**
 *斜体*
 ***加粗并斜体***
 ~~删除线~~
 ==突出显示==
 `突出显示(推荐)`
 ++下划线++
 ~下标~
 ^上标^
 脚注，参考文献[^1]，然后在文档最下方要添加这个1对应的内容，如：[^1]: My reference.
 图片设置宽度和高度 ![](https://upic-oss.oss-cn-beijing.aliyuncs.com/uPic/innodb_buffer_pool.png =900x600)

 +++ **点击折叠**
 这是被隐藏的内容
 +++

::: tips success warning danger
这里是容器内的内容
:::

% note info % success warning danger
这里是容器内的内容
% endnote %

 --&gt;
&lt;h2 id=&quot;摘要&quot;&gt;摘要&lt;/h2&gt;
&lt;ul class=&quot;lvl-0&quot;&gt;
&lt;li class=&quot;lvl-2&quot;&gt;
&lt;p&gt;网络相关命令，如ping、ifconfig、netstat以及查看DNS、检查域名和证书的到期时间等等&lt;/p&gt;
&lt;/li&gt;
&lt;li class=&quot;lvl-2&quot;&gt;
&lt;p&gt;本文基于&lt;code&gt;CentOS8(x86_64)&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;</summary>
    
    
    
    <category term="技术" scheme="https://blog.hanqunfeng.com/categories/%E6%8A%80%E6%9C%AF/"/>
    
    <category term="linux" scheme="https://blog.hanqunfeng.com/categories/%E6%8A%80%E6%9C%AF/linux/"/>
    
    <category term="linux常用命令" scheme="https://blog.hanqunfeng.com/categories/%E6%8A%80%E6%9C%AF/linux/linux%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/"/>
    
    
    <category term="linux常用命令" scheme="https://blog.hanqunfeng.com/tags/linux%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/"/>
    
  </entry>
  
  <entry>
    <title>Linux常用命令--文件与目录的权限管理</title>
    <link href="https://blog.hanqunfeng.com/2023/02/24/linux-command01-auth/"/>
    <id>https://blog.hanqunfeng.com/2023/02/24/linux-command01-auth/</id>
    <published>2023-02-24T14:30:05.000Z</published>
    <updated>2023-03-24T05:56:29.448Z</updated>
    
    <content type="html"><![CDATA[<!-- **加粗** *斜体* ***加粗并斜体*** ~~删除线~~ ==突出显示== `突出显示(推荐)` ++下划线++ ~下标~ ^上标^ 脚注，参考文献[^1]，然后在文档最下方要添加这个1对应的内容，如：[^1]: My reference. 图片设置宽度和高度 ![](https://upic-oss.oss-cn-beijing.aliyuncs.com/uPic/innodb_buffer_pool.png =900x600) +++ **点击折叠** 这是被隐藏的内容 +++::: tips success warning danger这里是容器内的内容:::% note info % success warning danger这里是容器内的内容% endnote % --><h2 id="摘要">摘要</h2><ul class="lvl-0"><li class="lvl-2"><p>文件与目录的授权(ACL)等相关命令</p></li><li class="lvl-2"><p>本文基于<code>CentOS8(x86_64)</code></p></li></ul><span id="more"></span><h2 id="文件与目录的权限管理">文件与目录的权限管理</h2><div class="tips"><p><em><strong>小贴士</strong></em><br><strong>文件系统构成</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">/usr/bin 、/bin：存放所有用户都可以执行的命令</span><br><span class="line">/usr/sbin 、/sbin：存放只有root用户可以执行的命令</span><br><span class="line">/home：用户缺省宿主目录</span><br><span class="line">/proc：虚拟文件目录，存放当前进程信息</span><br><span class="line">/dev：设备文件</span><br><span class="line">/lib：系统运行所需的共享库</span><br><span class="line">/lost+found：存放系统出错的检查结果</span><br><span class="line">/tmp：临时文件</span><br><span class="line">/etc：系统配置文件</span><br><span class="line">/var：经常变动的文件，如邮件，日志，计划任务</span><br><span class="line">/usr：库，手册，第三方程序一般安装在/usr/local下</span><br><span class="line">/boot：内核文件</span><br><span class="line">/mnt：临时挂载点</span><br></pre></td></tr></table></figure><p><strong>文件类型和文件权限</strong><br>当我们通过<code>ls -l</code>查看文件列表信息时，会看到文件类型和权限、文件所属用户和用户组、最后修改时间等等:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">drwxr-xr-x 6 root root    4096 7月  23 2021 apache-maven-3.8.1</span><br><span class="line">-rw-r--r-- 1 root root 9536838 3月  31 2021 apache-maven-3.8.1-bin.tar.gz</span><br><span class="line">lrwxrwxrwx 1 root root      18 7月  23 2021 maven -&gt; apache-maven-3.8.1</span><br></pre></td></tr></table></figure><p>第一列展示的就是文件权限，如<code>drwxr-xr-x</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">第一个字符表示文件类型:</span><br><span class="line">- 表示普通文件</span><br><span class="line">d 表示目录</span><br><span class="line">l 表示符号链接</span><br><span class="line">c 表示字符设备文件</span><br><span class="line">b 表示块设备文件</span><br><span class="line">s 表示套接字文件</span><br><span class="line">p 表示管道文件</span><br></pre></td></tr></table></figure><p>也可以通过<code>file</code>命令查看文件类型</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$ file apache-maven-3.8.1</span><br><span class="line">apache-maven-3.8.1: directory</span><br><span class="line">$ file apache-maven-3.8.1-bin.tar.gz</span><br><span class="line">apache-maven-3.8.1-bin.tar.gz: gzip compressed data, from FAT filesystem (MS-DOS, OS/2, NT)</span><br><span class="line">$ file maven</span><br><span class="line">maven: symbolic <span class="built_in">link</span> to `apache-maven-3.8.1<span class="string">&#x27;</span></span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">第一列的其余 9 个字符表示文件或目录的访问权限，分别对应三个字符一组的 rwx 权限，</span><br><span class="line">每3位分别代表文件所有者权限，文件所属组权限，其它用户和组的权限:</span><br><span class="line">r 表示读取权限</span><br><span class="line">w 表示写入权限</span><br><span class="line">x 表示执行权限</span><br><span class="line">- 表示没有对应权限</span><br></pre></td></tr></table></figure></div><h3 id="1-改变文件或目录权限">1.改变文件或目录权限</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">chmod</span> u+x file/dir</span><br><span class="line"></span><br><span class="line">u:文件所有者</span><br><span class="line">g:文件所属组</span><br><span class="line">o:其它用户和组</span><br><span class="line">a:所有用户所有组</span><br><span class="line"></span><br><span class="line">+:赋予权限 -:去除权限</span><br><span class="line"></span><br><span class="line">r:读权限   文件--可以查看  目录--可以列出目录内容</span><br><span class="line">w:写权限   文件--可以修改  目录--可以在目录中创建、删除文件和目录</span><br><span class="line">x:执行权限 文件--可以执行文件 目录--可以进入目录</span><br><span class="line"></span><br><span class="line">注：对于目录，如有r权限，则必须有x权限。</span><br><span class="line"></span><br><span class="line"><span class="built_in">chmod</span> 751 file : 相当于rwxr-x--x</span><br><span class="line">r-&gt;4</span><br><span class="line">w-&gt;2</span><br><span class="line">x-&gt;1</span><br></pre></td></tr></table></figure><h3 id="2-改变文件或目录所有者和所属组">2.改变文件或目录所有者和所属组</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">chown</span> user file :将file的所有者修改为user</span><br><span class="line"></span><br><span class="line"><span class="built_in">chgrp</span> group file :将file的所属组修改为group</span><br><span class="line"></span><br><span class="line"><span class="built_in">chown</span> -R user.group <span class="built_in">dir</span> :修改<span class="built_in">dir</span>及其子目录的所有者和所属组 </span><br></pre></td></tr></table></figure><h3 id="3-为可执行程序赋予SetUID与SetGID权限">3.为可执行程序赋予SetUID与SetGID权限</h3><ul class="lvl-0"><li class="lvl-2"><p>当一个可执行程序具有SetUID权限，用户执行这个程序时将以这个程序所有者身份执行。</p></li><li class="lvl-2"><p>当一个可执行程序具有SetGID权限，用户执行这个程序时将以这个程序所属组身份执行。</p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 设置SetUID</span></span><br><span class="line"><span class="built_in">chmod</span> u+s 程序</span><br><span class="line"><span class="built_in">chmod</span> 4755 程序 : 权限从3位数字变成了4位数字，SetUID权限用数字4表示</span><br><span class="line"><span class="comment"># 取消SetUID</span></span><br><span class="line"><span class="built_in">chmod</span> u-s 程序</span><br><span class="line"><span class="built_in">chmod</span> 755 程序</span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置SetGID</span></span><br><span class="line"><span class="built_in">chmod</span> g+s 程序</span><br><span class="line"><span class="built_in">chmod</span> 2755 程序 : 权限从3位数字变成了4位数字，SetGID权限用数字2表示</span><br><span class="line"><span class="comment"># 取消SetGID</span></span><br><span class="line"><span class="built_in">chmod</span> g-s 程序</span><br><span class="line"><span class="built_in">chmod</span> 755 程序</span><br><span class="line"></span><br><span class="line"><span class="comment"># 示例</span></span><br><span class="line">ll test.sh : 初始权限</span><br><span class="line">-rwxr-xr-x 1 root root 0 3月   3 15:44 test.sh</span><br><span class="line"></span><br><span class="line"><span class="built_in">chmod</span> u+s test.sh : 增加SetUID权限</span><br><span class="line"></span><br><span class="line">ll test.sh</span><br><span class="line">-rwSr-xr-x 1 root root 0 3月   3 15:44 test.sh</span><br><span class="line"></span><br><span class="line">此时可以看到root用户的执行权限从小写的x变成了大写的S，表示任何用户执行test.sh，都会以root用户身份执行</span><br><span class="line"></span><br><span class="line"><span class="built_in">chmod</span> u-s test.sh : 去掉SetUID权限</span><br><span class="line"><span class="built_in">chmod</span> g+s test.sh : 增加SetGID权限</span><br><span class="line"></span><br><span class="line">ll test.sh</span><br><span class="line">-rwxr-Sr-x 1 root root 0 3月   3 15:44 test.sh</span><br><span class="line"></span><br><span class="line">此时可以看到root用户组的执行权限从小写的x变成了大写的S，表示任何用户执行test.sh，都会以root用户组的身份执行</span><br><span class="line"></span><br><span class="line"><span class="comment"># 在根路径下查找具有SetUID和SetGID程序：</span></span><br><span class="line">find / -perm -4000 -o -perm -2000</span><br></pre></td></tr></table></figure><h3 id="4-ACL授权">4.ACL授权</h3><ul class="lvl-0"><li class="lvl-2"><p>ACL授权比chmod更加灵活，也更加精细化，它可以为每个用户或组单独设置一套访问权限</p></li></ul><h4 id="添加或修改ACL权限">添加或修改ACL权限</h4><ul class="lvl-0"><li class="lvl-2"><p>语法格式</p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">setfacl -m [权限规则] <span class="built_in">dir</span>[file]</span><br><span class="line"></span><br><span class="line">权限规则：</span><br><span class="line">u[设置用户]:username[用户名]:rwx[设置权限]</span><br><span class="line">g[设置组]:groupname[组名]:rwx[设置权限]</span><br></pre></td></tr></table></figure><ul class="lvl-0"><li class="lvl-2"><p>示例</p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">-rw-r--r-- 1 root root 0 3月   9 11:25 file</span><br><span class="line">drwxr-xr-x  2 root root 4096 3月   9 11:36 <span class="built_in">dir</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 为hanqf用户设置file文件的访问权限为rw</span></span><br><span class="line">setfacl -m u:hanqf:rw file</span><br><span class="line"><span class="comment"># 为hanqf用户设置dir文件的访问权限为rwx</span></span><br><span class="line">setfacl -m u:hanqf:rwx <span class="built_in">dir</span></span><br><span class="line"></span><br><span class="line">-rw-rw-r--+ 1 root root 0 3月   9 11:25 file</span><br><span class="line">drwxrwxr-x+ 2 root root 4096 3月   9 11:35 <span class="built_in">dir</span></span><br><span class="line">此时可以看到file和<span class="built_in">dir</span>的权限后面多了一个加号标志，同时其组权限也发生了变化，这个我们后面讲</span><br><span class="line"></span><br><span class="line"><span class="comment"># 为hanqf用户组设置file文件的访问权限为rwx</span></span><br><span class="line">setfacl -m g:hanqf:rw file</span><br><span class="line"><span class="comment"># 为hanqf用户组设置dir文件的访问权限为rwx</span></span><br><span class="line">setfacl -m g:hanqf:rwx <span class="built_in">dir</span></span><br><span class="line"></span><br><span class="line">-rw-rwxr--+ 1 root root 0 3月   9 11:25 file</span><br><span class="line">drwxrwxr-x+ 2 root root 4096 3月   9 11:35 <span class="built_in">dir</span></span><br><span class="line">此时同样可以看到file和<span class="built_in">dir</span>的权限后面多了一个加号标志，同时其组权限也发生了变化，这个我们后面讲</span><br><span class="line"></span><br><span class="line">所以，只要看到文件或目录权限后面有个加号，就说明被设置ACL权限</span><br><span class="line"></span><br><span class="line"><span class="comment"># -R : 递归设置子目录下的权限</span></span><br><span class="line">setfacl -m u:hanqf:r -R <span class="built_in">dir</span> <span class="comment">#同时设置子目录下的权限</span></span><br></pre></td></tr></table></figure><h4 id="查看ACL权限">查看ACL权限</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">$ getfacl file  <span class="comment">#查看该文件被设置的所有acl权限</span></span><br><span class="line"><span class="comment"># file: dir</span></span><br><span class="line"><span class="comment"># owner: root</span></span><br><span class="line"><span class="comment"># group: root</span></span><br><span class="line">user::rwx</span><br><span class="line">user:hanqf:rw-</span><br><span class="line">group::r-x</span><br><span class="line">group:hanqf:rwx</span><br><span class="line">mask::rwx</span><br><span class="line">other::r-x</span><br><span class="line"></span><br><span class="line">$ getfacl <span class="built_in">dir</span>  <span class="comment">#查看该目录被设置的所有acl权限</span></span><br><span class="line"><span class="comment"># file: dir</span></span><br><span class="line"><span class="comment"># owner: root</span></span><br><span class="line"><span class="comment"># group: root</span></span><br><span class="line">user::rwx</span><br><span class="line">user:hanqf:rwx</span><br><span class="line">group::r-x</span><br><span class="line">group:hanqf:rwx</span><br><span class="line">mask::rwx</span><br><span class="line">other::r-x</span><br><span class="line"></span><br><span class="line">$ getfacl --omit-header file ：去掉头信息</span><br><span class="line">user::rwx</span><br><span class="line">user:hanqf:rw-</span><br><span class="line">group::r-x</span><br><span class="line">group:hanqf:rwx</span><br><span class="line">mask::rwx</span><br><span class="line">other::r-x</span><br></pre></td></tr></table></figure><div class="tips"><p><em><strong>小贴士</strong></em></p><ul class="lvl-1"><li class="lvl-2">文件所有者权限:<code>ACL_USER_OBJ</code><br>user::rwx</li><li class="lvl-2">指定某些用户的权限，一行显示一个:<code>ACL_USER</code><br>user:hanqf:rw-</li><li class="lvl-2">文件所属组权限:<code>ACL_GROUP</code><br>group::r-x</li><li class="lvl-2">指定某些用户组的权限，一行显示一个:<code>ACL_GROUP_OBJ</code><br>group:hanqf:rwx</li><li class="lvl-2">mask权限，<code>ACL_USER</code>, <code>ACL_GROUP</code>和<code>ACL_GROUP_OBJ</code>中的最大值，即rwx转换为数字后的和<br>mask::rwx</li><li class="lvl-2">其它用户和组的权限<br>other::r-x</li></ul></div><h4 id="mask限制ACL权限最大值">mask限制ACL权限最大值</h4><ul class="lvl-0"><li class="lvl-2"><p>上面我们在给文件或目录设置ACL权限后，通过<code>ls -l</code>命令查看文件或目录权限时，发现组权限也发生了变化，</p></li><li class="lvl-2"><p>实际上这里的组权限显示的是<code>mask</code>，<code>mask</code>用于限制<code>ACL_USER</code>, <code>ACL_GROUP</code>和<code>ACL_GROUP_OBJ</code>中的最大值，即rwx转换为数字后的和</p></li><li class="lvl-2"><p>我们也可以设置<code>mask</code>的值</p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">$ setfacl -m mask::r-- file</span><br><span class="line"></span><br><span class="line">$ getfacl --omit-header file</span><br><span class="line">user::rw-</span><br><span class="line">user:hanqf:rw-<span class="comment">#effective:r--</span></span><br><span class="line">group::r--</span><br><span class="line">group:hanqf:rwx<span class="comment">#effective:r--</span></span><br><span class="line">mask::r--</span><br><span class="line">other::r--</span><br><span class="line"></span><br><span class="line">$ <span class="built_in">ls</span> -l file</span><br><span class="line">-rw-r--r--+ 1 root root 0 3月   9 11:25 file</span><br></pre></td></tr></table></figure><ul class="lvl-0"><li class="lvl-2"><p>此时会看到相应的权限后面多出了<code>#effective:r--</code>，我们设置<code>mask</code>的权限只有读权限，这样即便我们之前设置了hanqf用户的读写权限，此时也失效了，所以实际的权限也是<code>r--</code></p></li><li class="lvl-2"><p><code>mask</code>不会限制<code>other</code>的权限</p></li></ul><h4 id="Default-ACL-设置">Default ACL 设置</h4><ul class="lvl-0"><li class="lvl-2"><p>如果希望任何人在dir下创建的文件都对被指定的用户拥有相同的权限，那么我们就应该对dir目录设置 Default ACL</p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -d 缺省设置，这样，任何人在该dir目录下创建的文件，都可以被hanqf读写</span></span><br><span class="line">$ setfacl -d -m user:hanqf:rw <span class="built_in">dir</span></span><br><span class="line">$ getfacl --omit-header <span class="built_in">dir</span></span><br><span class="line">user::rwx</span><br><span class="line">group::r-x</span><br><span class="line">other::r-x</span><br><span class="line">default:user::rwx</span><br><span class="line">default:user:hanqf:rw-</span><br><span class="line">default:group::r-x</span><br><span class="line">default:mask::rwx</span><br><span class="line">default:other::r-x</span><br></pre></td></tr></table></figure><ul class="lvl-0"><li class="lvl-2"><p>Default ACL 只针对设置后新创建的文件才有效</p></li><li class="lvl-2"><p>取消 Default ACL</p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">$ setfacl -k <span class="built_in">dir</span></span><br><span class="line">$ getfacl <span class="built_in">dir</span></span><br><span class="line">user::rwx</span><br><span class="line">user:hanqf:rw-</span><br><span class="line">group::r-x</span><br><span class="line">mask::rwx</span><br><span class="line">other::r-x</span><br></pre></td></tr></table></figure><h4 id="删除ACL权限">删除ACL权限</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 删除用户的权限</span></span><br><span class="line">setfacl -x u:username file</span><br><span class="line">setfacl -x u:username <span class="built_in">dir</span></span><br><span class="line">setfacl -x u:username -R <span class="built_in">dir</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除组的权限</span></span><br><span class="line">setfacl -x g:groupname file</span><br><span class="line">setfacl -x g:groupname <span class="built_in">dir</span></span><br><span class="line">setfacl -x g:groupname -R <span class="built_in">dir</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除全部acl权限</span></span><br><span class="line">setfacl -b file</span><br><span class="line">setfacl -b <span class="built_in">dir</span></span><br><span class="line">setfacl -b -R <span class="built_in">dir</span></span><br></pre></td></tr></table></figure><ul class="lvl-0"><li class="lvl-2"><p>ACL权限删除后，对应文件或目录权限上的加号就会去掉</p></li></ul>]]></content>
    
    
    <summary type="html">&lt;!--
 **加粗**
 *斜体*
 ***加粗并斜体***
 ~~删除线~~
 ==突出显示==
 `突出显示(推荐)`
 ++下划线++
 ~下标~
 ^上标^
 脚注，参考文献[^1]，然后在文档最下方要添加这个1对应的内容，如：[^1]: My reference.
 图片设置宽度和高度 ![](https://upic-oss.oss-cn-beijing.aliyuncs.com/uPic/innodb_buffer_pool.png =900x600)

 +++ **点击折叠**
 这是被隐藏的内容
 +++

::: tips success warning danger
这里是容器内的内容
:::

% note info % success warning danger
这里是容器内的内容
% endnote %

 --&gt;
&lt;h2 id=&quot;摘要&quot;&gt;摘要&lt;/h2&gt;
&lt;ul class=&quot;lvl-0&quot;&gt;
&lt;li class=&quot;lvl-2&quot;&gt;
&lt;p&gt;文件与目录的授权(ACL)等相关命令&lt;/p&gt;
&lt;/li&gt;
&lt;li class=&quot;lvl-2&quot;&gt;
&lt;p&gt;本文基于&lt;code&gt;CentOS8(x86_64)&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;</summary>
    
    
    
    <category term="技术" scheme="https://blog.hanqunfeng.com/categories/%E6%8A%80%E6%9C%AF/"/>
    
    <category term="linux" scheme="https://blog.hanqunfeng.com/categories/%E6%8A%80%E6%9C%AF/linux/"/>
    
    <category term="linux常用命令" scheme="https://blog.hanqunfeng.com/categories/%E6%8A%80%E6%9C%AF/linux/linux%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/"/>
    
    
    <category term="linux常用命令" scheme="https://blog.hanqunfeng.com/tags/linux%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/"/>
    
  </entry>
  
  <entry>
    <title>Linux常用命令--文件与目录的压缩</title>
    <link href="https://blog.hanqunfeng.com/2023/02/24/linux-command01-zip/"/>
    <id>https://blog.hanqunfeng.com/2023/02/24/linux-command01-zip/</id>
    <published>2023-02-24T13:45:05.000Z</published>
    <updated>2023-03-27T03:23:55.305Z</updated>
    
    <content type="html"><![CDATA[<!-- **加粗** *斜体* ***加粗并斜体*** ~~删除线~~ ==突出显示== `突出显示(推荐)` ++下划线++ ~下标~ ^上标^ 脚注，参考文献[^1]，然后在文档最下方要添加这个1对应的内容，如：[^1]: My reference. 图片设置宽度和高度 ![](https://upic-oss.oss-cn-beijing.aliyuncs.com/uPic/innodb_buffer_pool.png =900x600) +++ **点击折叠** 这是被隐藏的内容 +++::: tips success warning danger这里是容器内的内容:::% note info % success warning danger这里是容器内的内容% endnote % --><h2 id="摘要">摘要</h2><ul class="lvl-0"><li class="lvl-2"><p>文件与目录的压缩与解压缩等相关命令</p></li><li class="lvl-2"><p>本文基于<code>CentOS8(x86_64)</code></p></li></ul><span id="more"></span><h2 id="压缩和解压缩命令">压缩和解压缩命令</h2><h3 id="1-格式：-gz-只能压缩文件">1.格式：.gz 只能压缩文件</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 压缩</span></span><br><span class="line">gzip file : 压缩 file.gz</span><br><span class="line">gzip *.sh : 每个文件生成独立的.gz</span><br><span class="line"></span><br><span class="line"><span class="comment"># 解压缩</span></span><br><span class="line">gunzip file.gz : 解压缩</span><br><span class="line"></span><br><span class="line">gunzip *.gz</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看压缩文件内容</span></span><br><span class="line">vim file.gz <span class="comment"># 可以直接编辑</span></span><br><span class="line">less file.gz</span><br></pre></td></tr></table></figure><h3 id="2-格式：-tar-可以压缩文件和目录">2.格式：.tar 可以压缩文件和目录</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 压缩</span></span><br><span class="line">tar -cvf file.tar file : 压缩</span><br><span class="line">    -c:产生.tar文件</span><br><span class="line">    -v:显示详细信息</span><br><span class="line">    -f:指定压缩后的文件名</span><br><span class="line"></span><br><span class="line"><span class="comment"># 解压缩</span></span><br><span class="line">tar -xvf file.tar : 解压缩</span><br><span class="line">    -x:解压.tar文件</span><br><span class="line">    -v:显示详细信息</span><br><span class="line">    -f:指定要解压的文件名</span><br><span class="line"></span><br><span class="line">tar -xvf file.tar -C todir</span><br><span class="line">    -C:解压到指定目录</span><br><span class="line"></span><br><span class="line"><span class="comment"># 将 .tar文件转成 .tar.gz文件</span></span><br><span class="line">gzip file.tar</span><br><span class="line"></span><br><span class="line"><span class="comment"># 不解包，查看包中文件列表</span></span><br><span class="line">tar -tf file.tar : 不解包，查看包中文件列表</span><br><span class="line">vim file.tar</span><br><span class="line">less file.tar</span><br><span class="line"></span><br><span class="line"><span class="comment"># 将文件加入到压缩包中</span></span><br><span class="line">tar -rf file.tar newfile1 newfile2</span><br><span class="line"></span><br><span class="line"><span class="comment"># 更新压缩包中已经存在的文件或者追加新的文件</span></span><br><span class="line">tar -uf file.tar oldfile1 newfile1</span><br><span class="line"></span><br><span class="line"><span class="comment"># 将文件从压缩包中删除</span></span><br><span class="line">tar --delete file -f file.tar</span><br><span class="line"></span><br><span class="line"><span class="comment"># 合并两个压缩包，将file2.tar中的内容合并到file1.tar中</span></span><br><span class="line">tar -Af file1.tar file2.tar</span><br><span class="line"></span><br><span class="line"><span class="comment"># 比较系统文件与压缩包中的同名文件是否有差异</span></span><br><span class="line">tar -<span class="built_in">df</span> update.tar update.txt</span><br><span class="line">update.txt: 修改时间不同</span><br><span class="line">update.txt: 大小不同</span><br></pre></td></tr></table></figure><h3 id="3-格式：-tar-gz-可以压缩文件和目录">3.格式：.tar.gz 可以压缩文件和目录</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 压缩</span></span><br><span class="line">tar -zcvf file.tar.gz file/dir</span><br><span class="line">tar -zcvf file_$(<span class="built_in">date</span> +%F).tar.gz file</span><br><span class="line">tar -zcvf file.tar.gz dir1 dir2 dir3 : 压缩多个目录</span><br><span class="line">    -c:产生.tar文件</span><br><span class="line">    -v:显示详细信息</span><br><span class="line">    -f:指定压缩后的文件名</span><br><span class="line">    -z:打包同时压缩为.gz</span><br><span class="line"></span><br><span class="line"><span class="comment"># 解压缩</span></span><br><span class="line">tar -zxvf file.tar.gz </span><br><span class="line">    -x:解压.tar文件</span><br><span class="line">    -v:显示详细信息</span><br><span class="line">    -f:指定要解压的文件名</span><br><span class="line">    -z:解压缩.gz</span><br><span class="line"></span><br><span class="line">tar -zxvf file.tar.gz -C todir</span><br><span class="line">    -C:解压到指定目录</span><br><span class="line"></span><br><span class="line"><span class="comment"># 将 .tar.gz文件转成 .tar文件</span></span><br><span class="line">gunzip file.tar.gz</span><br><span class="line"></span><br><span class="line"><span class="comment"># 不解包，查看包中文件列表</span></span><br><span class="line">tar -ztf file.tar.gz : 不解包，查看包中文件列表</span><br><span class="line">vim file.tar.gz</span><br><span class="line">less file.tar.gz</span><br><span class="line"></span><br><span class="line"><span class="comment"># 将文件加入到压缩包中</span></span><br><span class="line"><span class="comment"># tar.gz文件不支持直接追加文件，需要先解压到tar，再追加，之后再打包为tar.gz，更新\删除\合并同理</span></span><br><span class="line">gunzip file.tar.gz</span><br><span class="line">tar -rf file.tar newfile1 newfile2</span><br><span class="line">gzip file.tar</span><br><span class="line"></span><br><span class="line"><span class="comment"># 比较系统文件与压缩包中的同名文件是否有差异</span></span><br><span class="line">tar -<span class="built_in">df</span> update.tar.gz update.txt</span><br><span class="line">update.txt: 修改时间不同</span><br><span class="line">update.txt: 大小不同</span><br></pre></td></tr></table></figure><h3 id="4-格式：-zip-可以压缩文件和目录">4.格式：.zip 可以压缩文件和目录</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 压缩</span></span><br><span class="line">zip file.zip file : 压缩文件</span><br><span class="line">zip -r dir.zip <span class="built_in">dir</span> : 压缩目录</span><br><span class="line"></span><br><span class="line"><span class="comment"># 解压缩</span></span><br><span class="line">unzip file.zip : 解压缩</span><br><span class="line">unzip -o file.zip : 解压后如果文件已经存在，则覆盖</span><br><span class="line">unzip -n file.zip : 解压后如果文件已经存在，则不覆盖</span><br><span class="line">unzip file.zip -d newDir : 解压缩到指定目录</span><br><span class="line"></span><br><span class="line"><span class="comment"># 不解压查看压缩包内文件目录结构</span></span><br><span class="line">zip -sf file.zip : 不解压查看压缩包内文件目录结构</span><br><span class="line">unzip -l file.zip : 不解压查看压缩包内文件目录结构</span><br><span class="line">zipinfo file.zip : 不解压查看压缩包内文件目录结构</span><br><span class="line">vim file.zip</span><br><span class="line">less file.zip</span><br><span class="line"></span><br><span class="line"><span class="comment"># 不解压查看压缩包内文件内容</span></span><br><span class="line">unzip -c file.zip : 不解压查看压缩包内所有文件内容</span><br><span class="line">unzip -c file.zip file : 不解压查看压缩包内的file文件内容</span><br><span class="line"></span><br><span class="line"><span class="comment"># 新增或更新压缩包中的文件</span></span><br><span class="line">zip -u file.zip test.sh</span><br><span class="line"></span><br><span class="line"><span class="comment"># 从压缩包中删除文件</span></span><br><span class="line">zip -d file.zip test.sh</span><br></pre></td></tr></table></figure><h3 id="5-格式：-bz2-只能压缩文件">5.格式：.bz2 只能压缩文件</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 压缩</span></span><br><span class="line">bzip2 -k file : 压缩 file.bz2</span><br><span class="line">    -k:压缩后保留原文件</span><br><span class="line"></span><br><span class="line"><span class="comment"># 解压缩</span></span><br><span class="line">bunzip2 -k file.bz2 : 解压缩</span><br><span class="line">    -k:解压后保留原文件</span><br><span class="line"></span><br><span class="line"><span class="comment"># 不解压查看压缩包内文件内容</span></span><br><span class="line">vim file.bz2 <span class="comment"># 可以直接编辑</span></span><br><span class="line">less file.bz2</span><br></pre></td></tr></table></figure><h3 id="6-格式：-rar">6.格式：.rar</h3><ul class="lvl-0"><li class="lvl-2"><p>rar 命令在 linux 中默认是没有的，我们在使用前需要先安装一下:<a href="https://www.rarlab.com/download.htm">https://www.rarlab.com/download.htm</a></p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 下载与安装，这里要求gcc的版本大于5.2</span></span><br><span class="line">wget --no-check-certificate https://www.rarlab.com/rar/rarlinux-x64-621.tar.gz</span><br><span class="line">tar -zxf rarlinux-x64-621.tar.gz</span><br><span class="line"><span class="built_in">cd</span> rar/</span><br><span class="line">make</span><br></pre></td></tr></table></figure><ul class="lvl-0"><li class="lvl-2"><p>使用示例</p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 压缩: rar a 压缩后的文件名称(不带后缀rar) 要压缩的文件</span></span><br><span class="line">rar a sql *.sql</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看压缩文件内的文件列表</span></span><br><span class="line">rar l sql.rar</span><br><span class="line"></span><br><span class="line"><span class="comment"># 从压缩文件内删除指定的文件，如这里删除1.sql</span></span><br><span class="line">rar d sql.rar 1.sql</span><br><span class="line"></span><br><span class="line"><span class="comment"># 追加或更新文件</span></span><br><span class="line">rar u sql.rar 1.sql</span><br><span class="line"></span><br><span class="line"><span class="comment"># 打印压缩文件内容</span></span><br><span class="line">rar p sql.rar</span><br><span class="line"></span><br><span class="line"><span class="comment"># 解压，并保持原来压缩之前源文件的目录组织结构。</span></span><br><span class="line">rar x sql.rar</span><br><span class="line">unrar x sql.rar</span><br><span class="line"></span><br><span class="line"><span class="comment"># 解压到当前目录，压缩文件中原包含的目录全没有</span></span><br><span class="line">rar e sql.rar</span><br><span class="line">unrar e sql.rar</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;!--
 **加粗**
 *斜体*
 ***加粗并斜体***
 ~~删除线~~
 ==突出显示==
 `突出显示(推荐)`
 ++下划线++
 ~下标~
 ^上标^
 脚注，参考文献[^1]，然后在文档最下方要添加这个1对应的内容，如：[^1]: My reference.
 图片设置宽度和高度 ![](https://upic-oss.oss-cn-beijing.aliyuncs.com/uPic/innodb_buffer_pool.png =900x600)

 +++ **点击折叠**
 这是被隐藏的内容
 +++

::: tips success warning danger
这里是容器内的内容
:::

% note info % success warning danger
这里是容器内的内容
% endnote %

 --&gt;
&lt;h2 id=&quot;摘要&quot;&gt;摘要&lt;/h2&gt;
&lt;ul class=&quot;lvl-0&quot;&gt;
&lt;li class=&quot;lvl-2&quot;&gt;
&lt;p&gt;文件与目录的压缩与解压缩等相关命令&lt;/p&gt;
&lt;/li&gt;
&lt;li class=&quot;lvl-2&quot;&gt;
&lt;p&gt;本文基于&lt;code&gt;CentOS8(x86_64)&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;</summary>
    
    
    
    <category term="技术" scheme="https://blog.hanqunfeng.com/categories/%E6%8A%80%E6%9C%AF/"/>
    
    <category term="linux" scheme="https://blog.hanqunfeng.com/categories/%E6%8A%80%E6%9C%AF/linux/"/>
    
    <category term="linux常用命令" scheme="https://blog.hanqunfeng.com/categories/%E6%8A%80%E6%9C%AF/linux/linux%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/"/>
    
    
    <category term="linux常用命令" scheme="https://blog.hanqunfeng.com/tags/linux%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/"/>
    
  </entry>
  
  <entry>
    <title>Linux常用命令--搜索文件与目录</title>
    <link href="https://blog.hanqunfeng.com/2023/02/24/linux-command01-search/"/>
    <id>https://blog.hanqunfeng.com/2023/02/24/linux-command01-search/</id>
    <published>2023-02-24T13:40:05.000Z</published>
    <updated>2023-03-24T02:38:56.771Z</updated>
    
    <content type="html"><![CDATA[<!-- **加粗** *斜体* ***加粗并斜体*** ~~删除线~~ ==突出显示== `突出显示(推荐)` ++下划线++ ~下标~ ^上标^ 脚注，参考文献[^1]，然后在文档最下方要添加这个1对应的内容，如：[^1]: My reference. 图片设置宽度和高度 ![](https://upic-oss.oss-cn-beijing.aliyuncs.com/uPic/innodb_buffer_pool.png =900x600) +++ **点击折叠** 这是被隐藏的内容 +++::: tips success warning danger这里是容器内的内容:::% note info % success warning danger这里是容器内的内容% endnote % --><h2 id="摘要">摘要</h2><ul class="lvl-0"><li class="lvl-2"><p>文件与目录的检索等相关命令</p></li><li class="lvl-2"><p>本文基于<code>CentOS8(x86_64)</code></p></li></ul><span id="more"></span><h2 id="文件搜索命令">文件搜索命令</h2><h3 id="1-显示系统命令所在目录">1.显示系统命令所在目录</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">which</span> <span class="built_in">mkdir</span></span><br></pre></td></tr></table></figure><h3 id="2-查找文件或目录">2.查找文件或目录</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line">find <span class="built_in">dir</span> -name filename : 在目录下查找文件名为filename的文件</span><br><span class="line"></span><br><span class="line">    -name:文件名称，例如：find . -name <span class="string">&quot;*.log&quot;</span> </span><br><span class="line"></span><br><span class="line">    -size:文件大小,以block为单位，1block=512k</span><br><span class="line"></span><br><span class="line">    -size +204800:大于100M</span><br><span class="line"></span><br><span class="line">    -size -204800:小于100M</span><br><span class="line"></span><br><span class="line">    -user:文件所有者</span><br><span class="line"></span><br><span class="line">    -ctime:按文件创建时间来查找文件，-n指n天以内，+n指n天以前</span><br><span class="line"></span><br><span class="line">    -cmin:同上，分钟</span><br><span class="line"></span><br><span class="line">    -mtime:按文件更改时间来查找文件，-n指n天以内，+n指n天以前</span><br><span class="line"></span><br><span class="line">    -mmin:同上，分钟</span><br><span class="line"></span><br><span class="line">    -atime:按文件访问时间来查找文件</span><br><span class="line"></span><br><span class="line">    -amin:同上，分钟</span><br><span class="line"></span><br><span class="line">    -<span class="built_in">type</span> b/d/c/p/l/f: 查是块设备、目录、字符设备、管道、符号链接、普通文件</span><br><span class="line"></span><br><span class="line">    -empty:查找在系统中为空的文件或者文件夹</span><br><span class="line"></span><br><span class="line">    -<span class="built_in">exec</span> commond &#123;&#125; \; : 将查找到的路径作为commond的参数，并执行,</span><br><span class="line"></span><br><span class="line">        find . -name .svn -<span class="built_in">exec</span> <span class="built_in">rm</span> -rf &#123;&#125; \; 类似于 : find . -name .svn | xargs <span class="built_in">rm</span> -rf</span><br><span class="line"></span><br><span class="line">        find . -name <span class="string">&quot;*.log&quot;</span> -<span class="built_in">exec</span> <span class="built_in">cp</span> <span class="string">&#x27;&#123;&#125;&#x27;</span> ./dir <span class="string">&#x27;;&#x27;</span> : 将当前目录下的以.<span class="built_in">log</span>结尾的文件拷贝到./dir下，</span><br><span class="line">        类似于find . -name <span class="string">&quot;*.log&quot;</span> | xargs -n1 -i <span class="built_in">cp</span> &#123;&#125; ./dir</span><br><span class="line">        -n[num] : 执行命令时，一次提供几个参数，这里表示，每次传递给<span class="built_in">cp</span>一个参数</span><br><span class="line"></span><br><span class="line">        清理30天前的日志文件：</span><br><span class="line">        find logdir -name <span class="string">&quot;*.log*&quot;</span> -mtime +30 -<span class="built_in">type</span> f | xargs <span class="built_in">rm</span> -f</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        -maxdepth:查找目录最大深度，默认是全部查找</span><br><span class="line"></span><br><span class="line">        例如：find -maxdepth 2 -name <span class="string">&quot;*<span class="variable">$&#123;filename&#125;</span>*&quot;</span> -<span class="built_in">exec</span> <span class="built_in">cp</span> &#123;&#125; <span class="variable">$newfilename</span> \;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        -a:and</span><br><span class="line"></span><br><span class="line">        -o:or</span><br><span class="line"></span><br><span class="line">        例子：查询大于100M并且所有者为hanqf的文件并将其删除</span><br><span class="line"></span><br><span class="line">        find /etc -size +204800 -a -user hanqf -<span class="built_in">exec</span> <span class="built_in">rm</span> -rf &#123;&#125; \;</span><br><span class="line"></span><br><span class="line">        !:不等于，不包含，例如：find . ! -<span class="built_in">type</span> d，查找所有类型不是目录的文件</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="3-从文件索引库中查找文件或目录">3.从文件索引库中查找文件或目录</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">updatedb:更新索引，系统会自动定期执行</span><br><span class="line"></span><br><span class="line">locate key：从索引库中查找名称包含key的文件和目录</span><br></pre></td></tr></table></figure><h3 id="4-在文件中搜索匹配关键字的行">4.在文件中搜索匹配关键字的行</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">grep key file : 查找含key的行，等同于 <span class="built_in">cat</span> file | grep key</span><br><span class="line">    例子: grep ^<span class="comment"># file : 显示所有行首是#的行</span></span><br><span class="line"></span><br><span class="line">grep -v key file:查找不含key的行</span><br><span class="line">    例子: grep -v ^<span class="comment"># file : 显示所有行首不是#的行</span></span><br><span class="line"></span><br><span class="line">grep key file -A 10:显示关键字行及其后面的10行</span><br><span class="line"></span><br><span class="line">grep key file -B 10:显示关键字行及其前面的10行</span><br><span class="line"></span><br><span class="line">grep  -E <span class="string">&#x27;key1|key2&#x27;</span>  -n -i file : 查找包含任意关键字的行，并显示行号</span><br><span class="line">    -E 支持正则表达式，-n 显示行号，-i 不区分大小写</span><br><span class="line"></span><br><span class="line">grep key -c file : 查找关键字匹配的行数</span><br><span class="line"></span><br><span class="line"><span class="comment"># 这个命令非常有用，可以快速定位关键字所在的文件位置</span></span><br><span class="line">grep <span class="string">&#x27;key&#x27;</span> -r <span class="built_in">dir</span> : 在目录下递归查找文件内容包含关键字的文件路径及其所含关键字的内容</span><br><span class="line">    -r 递归查找</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;!--
 **加粗**
 *斜体*
 ***加粗并斜体***
 ~~删除线~~
 ==突出显示==
 `突出显示(推荐)`
 ++下划线++
 ~下标~
 ^上标^
 脚注，参考文献[^1]，然后在文档最下方要添加这个1对应的内容，如：[^1]: My reference.
 图片设置宽度和高度 ![](https://upic-oss.oss-cn-beijing.aliyuncs.com/uPic/innodb_buffer_pool.png =900x600)

 +++ **点击折叠**
 这是被隐藏的内容
 +++

::: tips success warning danger
这里是容器内的内容
:::

% note info % success warning danger
这里是容器内的内容
% endnote %

 --&gt;
&lt;h2 id=&quot;摘要&quot;&gt;摘要&lt;/h2&gt;
&lt;ul class=&quot;lvl-0&quot;&gt;
&lt;li class=&quot;lvl-2&quot;&gt;
&lt;p&gt;文件与目录的检索等相关命令&lt;/p&gt;
&lt;/li&gt;
&lt;li class=&quot;lvl-2&quot;&gt;
&lt;p&gt;本文基于&lt;code&gt;CentOS8(x86_64)&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;</summary>
    
    
    
    <category term="技术" scheme="https://blog.hanqunfeng.com/categories/%E6%8A%80%E6%9C%AF/"/>
    
    <category term="linux" scheme="https://blog.hanqunfeng.com/categories/%E6%8A%80%E6%9C%AF/linux/"/>
    
    <category term="linux常用命令" scheme="https://blog.hanqunfeng.com/categories/%E6%8A%80%E6%9C%AF/linux/linux%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/"/>
    
    
    <category term="linux常用命令" scheme="https://blog.hanqunfeng.com/tags/linux%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/"/>
    
  </entry>
  
</feed>
